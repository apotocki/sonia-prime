Terminals unused in grammar

    COMMENT_BEGIN
    COMMENT_END
    OPERATOR_TERM
    "`_`"
    "`->*`"
    "`~>`"
    "`.*`"
    "`++`"
    "`--`"
    "`<<`"
    "`>>`"
    "`<=`"
    "`>=`"
    "`==`"
    "`!=`"
    "`+=`"
    "`-=`"
    "`*=`"
    "`/=`"
    "`%=`"
    "`<<=`"
    "`>>=`"
    "`&=`"
    "`|=`"
    "`^=`"
    "`<`"
    "`>`"
    "`+`"
    "`-`"
    "`*`"
    "`/`"
    "`%`"
    "`&`"
    "`~`"
    "`^`"
    "`$`"
    "`#`"
    FOR
    VOID_
    AUTO
    CONST_
    USING
    THROW
    DELETE_
    SIZEOF
    LOWEST
    "`::`"


Grammar

    0 $accept: begin "end of file"

    1 begin: declaration_any "end of file"

    2 declaration_any: %empty
    3                | declaration_any "`;`"
    4                | declaration_any generic-decl

    5 generic-decl: EXTERN VAR identifier "`:`" type-expr "`;`"
    6             | EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" "`;`"
    7             | EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`;`"
    8             | INCLUDE STRING
    9             | enum-decl
   10             | type-decl
   11             | fn-decl
   12             | let-decl
   13             | compound-expression "`;`"

   14 let-decl: let-decl-start-with-opt-type "`;`"
   15         | let-decl-start-with-opt-type "`=`" expression "`;`"

   16 let-decl-start: LET identifier
   17               | LET "weak modifier" identifier

   18 let-decl-start-with-opt-type: let-decl-start
   19                             | let-decl-start "`:`" type-expr

   20 infunction_declaration_any: %empty
   21                           | infunction_declaration_any "`;`"
   22                           | infunction_declaration_any opt-infunction-decl

   23 opt-infunction-decl: let-decl
   24                    | RETURN expression "`;`"
   25                    | compound-expression "`;`"

   26 identifier: IDENTIFIER

   27 qname: DBLCOLON identifier
   28      | identifier
   29      | qname DBLCOLON identifier

   30 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   31        | FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

   32 enum-decl: ENUM qname "`{`" case-list-opt "`}`"

   33 case-list-opt: %empty
   34              | case-list

   35 case-list: case-decl
   36          | case-list "," case-decl

   37 case-decl: identifier

   38 type-decl: TYPE qname type-extension-any "`{`" parameter-woa-list-opt "`}`"

   39 type-extension-any: %empty
   40                   | EXTENDS type-extension-list

   41 type-extension-list: qname
   42                    | type-extension-list "," qname

   43 parameter-list-opt: %empty
   44                   | parameter-list

   45 parameter-list: parameter-decl
   46               | parameter-list "," parameter-decl

   47 parameter-decl: identifier "`:`" type-expr
   48               | type-expr

   49 parameter-woa-list-opt: %empty
   50                       | parameter-woa-list

   51 parameter-woa-list: parameter-woa-decl
   52                   | parameter-woa-list "," parameter-woa-decl

   53 parameter-woa-decl: parameter-decl
   54                   | parameter-decl "`=`" expression

   55 type-expr: BOOL
   56          | INT
   57          | FLOAT
   58          | STRING_WORD
   59          | DECIMAL_WORD
   60          | qname
   61          | "`[`" type-expr "`]`"
   62          | "`(`" parameter-list-opt "`)`"
   63          | type-expr "`[`" INTEGER "`]`"
   64          | type-expr "`|`" type-expr
   65          | type-expr "`->`" type-expr

   66 compound-expression: expression "`(`" opt-named-expr-list-any "`)`"
   67                    | expression "`{`" opt-named-expr-list-any "`}`"
   68                    | expression "`=`" expression

   69 expression: "true"
   70           | "false"
   71           | INTEGER
   72           | DECIMAL
   73           | STRING
   74           | "`.`" identifier
   75           | qname
   76           | ARGIDENTIFIER
   77           | "`(`" expression "`)`"
   78           | FN "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   79           | FN "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"
   80           | "`[`" expression-list-any "`]`"
   81           | "`!`" expression
   82           | expression "`.`" identifier
   83           | expression "`?`" "`.`" identifier
   84           | expression "`&&`" expression
   85           | expression "`||`" expression
   86           | expression "`..`" expression
   87           | compound-expression

   88 expression-list-any: %empty
   89                    | expression
   90                    | expression-list-any "," expression

   91 opt-named-expr-list-any: %empty
   92                        | opt-named-expr-list

   93 opt-named-expr-list: opt-named-expr
   94                    | opt-named-expr-list "," opt-named-expr

   95 opt-named-expr: qname "`:`" expression
   96               | expression


Terminals, with rules where they appear

    "end of file" (0) 0 1
    error (256)
    COMMENT_BEGIN (258)
    COMMENT_END (259)
    STRING <sonia::lang::bang::annotated_string_view> (260) 8 73
    IDENTIFIER <sonia::lang::bang::annotated_string_view> (261) 26
    ARGIDENTIFIER <sonia::lang::bang::annotated_string_view> (262) 76
    INTEGER <sonia::lang::bang::annotated_decimal> (263) 63 71
    DECIMAL <sonia::lang::bang::annotated_decimal> (264) 72
    OPERATOR_TERM <sonia::string_view> (265)
    "`=`" <sonia::lang::lex::resource_location> (266) 15 54 68
    "`_`" (267)
    "`->*`" (268)
    "`->`" (269) 7 31 65 79
    "`~>`" (270)
    "`.*`" (271)
    "`++`" (272)
    "`--`" (273)
    "`<<`" (274)
    "`>>`" (275)
    "`<=`" (276)
    "`>=`" (277)
    "`==`" (278)
    "`!=`" (279)
    "`&&`" <sonia::lang::lex::resource_location> (280) 84
    "`||`" <sonia::lang::lex::resource_location> (281) 85
    "`..`" <sonia::lang::lex::resource_location> (282) 86
    "`+=`" (283)
    "`-=`" (284)
    "`*=`" (285)
    "`/=`" (286)
    "`%=`" (287)
    "`<<=`" (288)
    "`>>=`" (289)
    "`&=`" (290)
    "`|=`" (291)
    "`^=`" (292)
    "`:`" (293) 5 19 47 95
    "`(`" <sonia::lang::lex::resource_location> (294) 6 7 30 31 62 66 77 78 79
    "`)`" (295) 6 7 30 31 62 66 77 78 79
    "`{`" <sonia::lang::lex::resource_location> (296) 30 31 32 38 67 78 79
    "`}`" (297) 30 31 32 38 67 78 79
    "`[`" <sonia::lang::lex::resource_location> (298) 61 63 80
    "`]`" (299) 61 63 80
    "`<`" (300)
    "`>`" (301)
    "`;`" (302) 3 5 6 7 13 14 15 21 24 25
    "`.`" <sonia::lang::lex::resource_location> (303) 74 82 83
    "`+`" (304)
    "`-`" (305)
    "`*`" (306)
    "`/`" (307)
    "`%`" (308)
    "`&`" (309)
    "`|`" (310) 64
    "`!`" <sonia::lang::lex::resource_location> (311) 81
    "`~`" (312)
    "`^`" (313)
    "," (314) 36 42 46 52 90 94
    "`$`" (315)
    "`?`" (316) 83
    "`#`" (317)
    LET (318) 16 17
    VAR (319) 5
    RETURN (320) 24
    EXTERN (321) 5 6 7
    FOR (322)
    VOID_ (323)
    AUTO (324)
    CONST_ (325)
    USING (326)
    THROW (327)
    DELETE_ (328)
    SIZEOF (329)
    LOWEST (330)
    DBLCOLON (331) 27 29
    "`::`" (332)
    INCLUDE (333) 8
    FN <sonia::lang::lex::resource_location> (334) 6 7 30 31 78 79
    ENUM (335) 32
    TYPE (336) 38
    EXTENDS (337) 40
    BOOL (338) 55
    INT (339) 56
    FLOAT (340) 57
    STRING_WORD (341) 58
    DECIMAL_WORD (342) 59
    "weak modifier" (343) 17
    "true" <sonia::lang::lex::resource_location> (344) 69
    "false" <sonia::lang::lex::resource_location> (345) 70


Nonterminals, with rules where they appear

    $accept (91)
        on left: 0
    begin (92)
        on left: 1
        on right: 0
    declaration_any <declaration_set_t> (93)
        on left: 2 3 4
        on right: 1 3 4
    generic-decl <generic_declaration_t> (94)
        on left: 5 6 7 8 9 10 11 12 13
        on right: 4
    let-decl <let_statement_decl_t> (95)
        on left: 14 15
        on right: 12 23
    let-decl-start <let_statement_decl_t> (96)
        on left: 16 17
        on right: 18 19
    let-decl-start-with-opt-type <let_statement_decl_t> (97)
        on left: 18 19
        on right: 14 15
    infunction_declaration_any <std::vector<infunction_declaration_t>> (98)
        on left: 20 21 22
        on right: 21 22 30 31 78 79
    opt-infunction-decl <infunction_declaration_t> (99)
        on left: 23 24 25
        on right: 22
    identifier <sonia::lang::bang::annotated_identifier> (100)
        on left: 26
        on right: 5 16 17 27 28 29 37 47 74 82 83
    qname <sonia::lang::bang::annotated_qname> (101)
        on left: 27 28 29
        on right: 6 7 29 30 31 32 38 41 42 60 75 95
    fn-decl <fn_decl_t> (102)
        on left: 30 31
        on right: 11
    enum-decl <enum_decl> (103)
        on left: 32
        on right: 9
    case-list-opt <std::vector<sonia::lang::identifier>> (104)
        on left: 33 34
        on right: 32
    case-list <std::vector<sonia::lang::identifier>> (105)
        on left: 35 36
        on right: 34 36
    case-decl <sonia::lang::identifier> (106)
        on left: 37
        on right: 35 36
    type-decl <type_decl> (107)
        on left: 38
        on right: 10
    type-extension-any <extension_list_t> (108)
        on left: 39 40
        on right: 38
    type-extension-list <extension_list_t> (109)
        on left: 41 42
        on right: 40 42
    parameter-list-opt <parameter_list_t> (110)
        on left: 43 44
        on right: 62
    parameter-list <parameter_list_t> (111)
        on left: 45 46
        on right: 44 46
    parameter-decl <parameter_t> (112)
        on left: 47 48
        on right: 45 46 53 54
    parameter-woa-list-opt <parameter_woa_list_t> (113)
        on left: 49 50
        on right: 6 7 30 31 38 78 79
    parameter-woa-list <parameter_woa_list_t> (114)
        on left: 51 52
        on right: 50 52
    parameter-woa-decl <parameter_woa_t> (115)
        on left: 53 54
        on right: 51 52
    type-expr <bang_preliminary_type> (116)
        on left: 55 56 57 58 59 60 61 62 63 64 65
        on right: 5 7 19 31 47 48 61 63 64 65 79
    compound-expression <expression_t> (117)
        on left: 66 67 68
        on right: 13 25 87
    expression <expression_t> (118)
        on left: 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87
        on right: 15 24 54 66 67 68 77 81 82 83 84 85 86 89 90 95 96
    expression-list-any <expression_list_t> (119)
        on left: 88 89 90
        on right: 80 90
    opt-named-expr-list-any <named_expression_term_list_t> (120)
        on left: 91 92
        on right: 66 67
    opt-named-expr-list <named_expression_term_list_t> (121)
        on left: 93 94
        on right: 92 94
    opt-named-expr <named_expression_term_t> (122)
        on left: 95 96
        on right: 93 94


State 0

    0 $accept: . begin "end of file"

    $default  reduce using rule 2 (declaration_any)

    begin            go to state 1
    declaration_any  go to state 2


State 1

    0 $accept: begin . "end of file"

    "end of file"  shift, and go to state 3


State 2

    1 begin: declaration_any . "end of file"
    3 declaration_any: declaration_any . "`;`"
    4                | declaration_any . generic-decl

    "end of file"  shift, and go to state 4
    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`;`"          shift, and go to state 12
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    LET            shift, and go to state 15
    EXTERN         shift, and go to state 16
    DBLCOLON       shift, and go to state 17
    INCLUDE        shift, and go to state 18
    FN             shift, and go to state 19
    ENUM           shift, and go to state 20
    TYPE           shift, and go to state 21
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    generic-decl                  go to state 24
    let-decl                      go to state 25
    let-decl-start                go to state 26
    let-decl-start-with-opt-type  go to state 27
    identifier                    go to state 28
    qname                         go to state 29
    fn-decl                       go to state 30
    enum-decl                     go to state 31
    type-decl                     go to state 32
    compound-expression           go to state 33
    expression                    go to state 34


State 3

    0 $accept: begin "end of file" .

    $default  accept


State 4

    1 begin: declaration_any "end of file" .

    $default  reduce using rule 1 (begin)


State 5

   73 expression: STRING .

    $default  reduce using rule 73 (expression)


State 6

   26 identifier: IDENTIFIER .

    $default  reduce using rule 26 (identifier)


State 7

   76 expression: ARGIDENTIFIER .

    $default  reduce using rule 76 (expression)


State 8

   71 expression: INTEGER .

    $default  reduce using rule 71 (expression)


State 9

   72 expression: DECIMAL .

    $default  reduce using rule 72 (expression)


State 10

   77 expression: "`(`" . expression "`)`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 37


State 11

   80 expression: "`[`" . expression-list-any "`]`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    $default  reduce using rule 88 (expression-list-any)

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 38
    expression-list-any  go to state 39


State 12

    3 declaration_any: declaration_any "`;`" .

    $default  reduce using rule 3 (declaration_any)


State 13

   74 expression: "`.`" . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 40


State 14

   81 expression: "`!`" . expression

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 41


State 15

   16 let-decl-start: LET . identifier
   17               | LET . "weak modifier" identifier

    IDENTIFIER       shift, and go to state 6
    "weak modifier"  shift, and go to state 42

    identifier  go to state 43


State 16

    5 generic-decl: EXTERN . VAR identifier "`:`" type-expr "`;`"
    6             | EXTERN . FN qname "`(`" parameter-woa-list-opt "`)`" "`;`"
    7             | EXTERN . FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`;`"

    VAR  shift, and go to state 44
    FN   shift, and go to state 45


State 17

   27 qname: DBLCOLON . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 46


State 18

    8 generic-decl: INCLUDE . STRING

    STRING  shift, and go to state 47


State 19

   30 fn-decl: FN . qname "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   31        | FN . qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"
   78 expression: FN . "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   79           | FN . "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    IDENTIFIER  shift, and go to state 6
    "`(`"       shift, and go to state 48
    DBLCOLON    shift, and go to state 17

    identifier  go to state 28
    qname       go to state 49


State 20

   32 enum-decl: ENUM . qname "`{`" case-list-opt "`}`"

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 17

    identifier  go to state 28
    qname       go to state 50


State 21

   38 type-decl: TYPE . qname type-extension-any "`{`" parameter-woa-list-opt "`}`"

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 17

    identifier  go to state 28
    qname       go to state 51


State 22

   69 expression: "true" .

    $default  reduce using rule 69 (expression)


State 23

   70 expression: "false" .

    $default  reduce using rule 70 (expression)


State 24

    4 declaration_any: declaration_any generic-decl .

    $default  reduce using rule 4 (declaration_any)


State 25

   12 generic-decl: let-decl .

    $default  reduce using rule 12 (generic-decl)


State 26

   18 let-decl-start-with-opt-type: let-decl-start .
   19                             | let-decl-start . "`:`" type-expr

    "`:`"  shift, and go to state 52

    $default  reduce using rule 18 (let-decl-start-with-opt-type)


State 27

   14 let-decl: let-decl-start-with-opt-type . "`;`"
   15         | let-decl-start-with-opt-type . "`=`" expression "`;`"

    "`=`"  shift, and go to state 53
    "`;`"  shift, and go to state 54


State 28

   28 qname: identifier .

    $default  reduce using rule 28 (qname)


State 29

   29 qname: qname . DBLCOLON identifier
   75 expression: qname .

    DBLCOLON  shift, and go to state 55

    $default  reduce using rule 75 (expression)


State 30

   11 generic-decl: fn-decl .

    $default  reduce using rule 11 (generic-decl)


State 31

    9 generic-decl: enum-decl .

    $default  reduce using rule 9 (generic-decl)


State 32

   10 generic-decl: type-decl .

    $default  reduce using rule 10 (generic-decl)


State 33

   13 generic-decl: compound-expression . "`;`"
   87 expression: compound-expression .

    "`;`"  shift, and go to state 56

    $default  reduce using rule 87 (expression)


State 34

   66 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   67                    | expression . "`{`" opt-named-expr-list-any "`}`"
   68                    | expression . "`=`" expression
   82 expression: expression . "`.`" identifier
   83           | expression . "`?`" "`.`" identifier
   84           | expression . "`&&`" expression
   85           | expression . "`||`" expression
   86           | expression . "`..`" expression

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`{`"   shift, and go to state 62
    "`.`"   shift, and go to state 63
    "`?`"   shift, and go to state 64


State 35

   78 expression: FN . "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   79           | FN . "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`(`"  shift, and go to state 48


State 36

   87 expression: compound-expression .

    $default  reduce using rule 87 (expression)


State 37

   66 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   67                    | expression . "`{`" opt-named-expr-list-any "`}`"
   68                    | expression . "`=`" expression
   77 expression: "`(`" expression . "`)`"
   82           | expression . "`.`" identifier
   83           | expression . "`?`" "`.`" identifier
   84           | expression . "`&&`" expression
   85           | expression . "`||`" expression
   86           | expression . "`..`" expression

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`)`"   shift, and go to state 65
    "`{`"   shift, and go to state 62
    "`.`"   shift, and go to state 63
    "`?`"   shift, and go to state 64


State 38

   66 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   67                    | expression . "`{`" opt-named-expr-list-any "`}`"
   68                    | expression . "`=`" expression
   82 expression: expression . "`.`" identifier
   83           | expression . "`?`" "`.`" identifier
   84           | expression . "`&&`" expression
   85           | expression . "`||`" expression
   86           | expression . "`..`" expression
   89 expression-list-any: expression .

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`{`"   shift, and go to state 62
    "`.`"   shift, and go to state 63
    "`?`"   shift, and go to state 64

    $default  reduce using rule 89 (expression-list-any)


State 39

   80 expression: "`[`" expression-list-any . "`]`"
   90 expression-list-any: expression-list-any . "," expression

    "`]`"  shift, and go to state 66
    ","    shift, and go to state 67


State 40

   74 expression: "`.`" identifier .

    $default  reduce using rule 74 (expression)


State 41

   66 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   67                    | expression . "`{`" opt-named-expr-list-any "`}`"
   68                    | expression . "`=`" expression
   81 expression: "`!`" expression .
   82           | expression . "`.`" identifier
   83           | expression . "`?`" "`.`" identifier
   84           | expression . "`&&`" expression
   85           | expression . "`||`" expression
   86           | expression . "`..`" expression

    "`(`"  shift, and go to state 61
    "`{`"  shift, and go to state 62
    "`.`"  shift, and go to state 63
    "`?`"  shift, and go to state 64

    $default  reduce using rule 81 (expression)


State 42

   17 let-decl-start: LET "weak modifier" . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 68


State 43

   16 let-decl-start: LET identifier .

    $default  reduce using rule 16 (let-decl-start)


State 44

    5 generic-decl: EXTERN VAR . identifier "`:`" type-expr "`;`"

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 69


State 45

    6 generic-decl: EXTERN FN . qname "`(`" parameter-woa-list-opt "`)`" "`;`"
    7             | EXTERN FN . qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`;`"

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 17

    identifier  go to state 28
    qname       go to state 70


State 46

   27 qname: DBLCOLON identifier .

    $default  reduce using rule 27 (qname)


State 47

    8 generic-decl: INCLUDE STRING .

    $default  reduce using rule 8 (generic-decl)


State 48

   78 expression: FN "`(`" . parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   79           | FN "`(`" . parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 71
    "`[`"         shift, and go to state 72
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 73
    INT           shift, and go to state 74
    FLOAT         shift, and go to state 75
    STRING_WORD   shift, and go to state 76
    DECIMAL_WORD  shift, and go to state 77

    $default  reduce using rule 49 (parameter-woa-list-opt)

    identifier              go to state 78
    qname                   go to state 79
    parameter-decl          go to state 80
    parameter-woa-list-opt  go to state 81
    parameter-woa-list      go to state 82
    parameter-woa-decl      go to state 83
    type-expr               go to state 84


State 49

   29 qname: qname . DBLCOLON identifier
   30 fn-decl: FN qname . "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   31        | FN qname . "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`(`"     shift, and go to state 85
    DBLCOLON  shift, and go to state 55


State 50

   29 qname: qname . DBLCOLON identifier
   32 enum-decl: ENUM qname . "`{`" case-list-opt "`}`"

    "`{`"     shift, and go to state 86
    DBLCOLON  shift, and go to state 55


State 51

   29 qname: qname . DBLCOLON identifier
   38 type-decl: TYPE qname . type-extension-any "`{`" parameter-woa-list-opt "`}`"

    DBLCOLON  shift, and go to state 55
    EXTENDS   shift, and go to state 87

    $default  reduce using rule 39 (type-extension-any)

    type-extension-any  go to state 88


State 52

   19 let-decl-start-with-opt-type: let-decl-start "`:`" . type-expr

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 71
    "`[`"         shift, and go to state 72
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 73
    INT           shift, and go to state 74
    FLOAT         shift, and go to state 75
    STRING_WORD   shift, and go to state 76
    DECIMAL_WORD  shift, and go to state 77

    identifier  go to state 28
    qname       go to state 79
    type-expr   go to state 89


State 53

   15 let-decl: let-decl-start-with-opt-type "`=`" . expression "`;`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 90


State 54

   14 let-decl: let-decl-start-with-opt-type "`;`" .

    $default  reduce using rule 14 (let-decl)


State 55

   29 qname: qname DBLCOLON . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 91


State 56

   13 generic-decl: compound-expression "`;`" .

    $default  reduce using rule 13 (generic-decl)


State 57

   68 compound-expression: expression "`=`" . expression

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 92


State 58

   84 expression: expression "`&&`" . expression

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 93


State 59

   85 expression: expression "`||`" . expression

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 94


State 60

   86 expression: expression "`..`" . expression

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 95


State 61

   66 compound-expression: expression "`(`" . opt-named-expr-list-any "`)`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    $default  reduce using rule 91 (opt-named-expr-list-any)

    identifier               go to state 28
    qname                    go to state 96
    compound-expression      go to state 36
    expression               go to state 97
    opt-named-expr-list-any  go to state 98
    opt-named-expr-list      go to state 99
    opt-named-expr           go to state 100


State 62

   67 compound-expression: expression "`{`" . opt-named-expr-list-any "`}`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    $default  reduce using rule 91 (opt-named-expr-list-any)

    identifier               go to state 28
    qname                    go to state 96
    compound-expression      go to state 36
    expression               go to state 97
    opt-named-expr-list-any  go to state 101
    opt-named-expr-list      go to state 99
    opt-named-expr           go to state 100


State 63

   82 expression: expression "`.`" . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 102


State 64

   83 expression: expression "`?`" . "`.`" identifier

    "`.`"  shift, and go to state 103


State 65

   77 expression: "`(`" expression "`)`" .

    $default  reduce using rule 77 (expression)


State 66

   80 expression: "`[`" expression-list-any "`]`" .

    $default  reduce using rule 80 (expression)


State 67

   90 expression-list-any: expression-list-any "," . expression

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 104


State 68

   17 let-decl-start: LET "weak modifier" identifier .

    $default  reduce using rule 17 (let-decl-start)


State 69

    5 generic-decl: EXTERN VAR identifier . "`:`" type-expr "`;`"

    "`:`"  shift, and go to state 105


State 70

    6 generic-decl: EXTERN FN qname . "`(`" parameter-woa-list-opt "`)`" "`;`"
    7             | EXTERN FN qname . "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`;`"
   29 qname: qname . DBLCOLON identifier

    "`(`"     shift, and go to state 106
    DBLCOLON  shift, and go to state 55


State 71

   62 type-expr: "`(`" . parameter-list-opt "`)`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 71
    "`[`"         shift, and go to state 72
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 73
    INT           shift, and go to state 74
    FLOAT         shift, and go to state 75
    STRING_WORD   shift, and go to state 76
    DECIMAL_WORD  shift, and go to state 77

    $default  reduce using rule 43 (parameter-list-opt)

    identifier          go to state 78
    qname               go to state 79
    parameter-list-opt  go to state 107
    parameter-list      go to state 108
    parameter-decl      go to state 109
    type-expr           go to state 84


State 72

   61 type-expr: "`[`" . type-expr "`]`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 71
    "`[`"         shift, and go to state 72
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 73
    INT           shift, and go to state 74
    FLOAT         shift, and go to state 75
    STRING_WORD   shift, and go to state 76
    DECIMAL_WORD  shift, and go to state 77

    identifier  go to state 28
    qname       go to state 79
    type-expr   go to state 110


State 73

   55 type-expr: BOOL .

    $default  reduce using rule 55 (type-expr)


State 74

   56 type-expr: INT .

    $default  reduce using rule 56 (type-expr)


State 75

   57 type-expr: FLOAT .

    $default  reduce using rule 57 (type-expr)


State 76

   58 type-expr: STRING_WORD .

    $default  reduce using rule 58 (type-expr)


State 77

   59 type-expr: DECIMAL_WORD .

    $default  reduce using rule 59 (type-expr)


State 78

   28 qname: identifier .
   47 parameter-decl: identifier . "`:`" type-expr

    "`:`"  shift, and go to state 111

    $default  reduce using rule 28 (qname)


State 79

   29 qname: qname . DBLCOLON identifier
   60 type-expr: qname .

    DBLCOLON  shift, and go to state 55

    $default  reduce using rule 60 (type-expr)


State 80

   53 parameter-woa-decl: parameter-decl .
   54                   | parameter-decl . "`=`" expression

    "`=`"  shift, and go to state 112

    $default  reduce using rule 53 (parameter-woa-decl)


State 81

   78 expression: FN "`(`" parameter-woa-list-opt . "`)`" "`{`" infunction_declaration_any "`}`"
   79           | FN "`(`" parameter-woa-list-opt . "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`)`"  shift, and go to state 113


State 82

   50 parameter-woa-list-opt: parameter-woa-list .
   52 parameter-woa-list: parameter-woa-list . "," parameter-woa-decl

    ","  shift, and go to state 114

    $default  reduce using rule 50 (parameter-woa-list-opt)


State 83

   51 parameter-woa-list: parameter-woa-decl .

    $default  reduce using rule 51 (parameter-woa-list)


State 84

   48 parameter-decl: type-expr .
   63 type-expr: type-expr . "`[`" INTEGER "`]`"
   64          | type-expr . "`|`" type-expr
   65          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 115
    "`[`"   shift, and go to state 116
    "`|`"   shift, and go to state 117

    $default  reduce using rule 48 (parameter-decl)


State 85

   30 fn-decl: FN qname "`(`" . parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   31        | FN qname "`(`" . parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 71
    "`[`"         shift, and go to state 72
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 73
    INT           shift, and go to state 74
    FLOAT         shift, and go to state 75
    STRING_WORD   shift, and go to state 76
    DECIMAL_WORD  shift, and go to state 77

    $default  reduce using rule 49 (parameter-woa-list-opt)

    identifier              go to state 78
    qname                   go to state 79
    parameter-decl          go to state 80
    parameter-woa-list-opt  go to state 118
    parameter-woa-list      go to state 82
    parameter-woa-decl      go to state 83
    type-expr               go to state 84


State 86

   32 enum-decl: ENUM qname "`{`" . case-list-opt "`}`"

    IDENTIFIER  shift, and go to state 6

    $default  reduce using rule 33 (case-list-opt)

    identifier     go to state 119
    case-list-opt  go to state 120
    case-list      go to state 121
    case-decl      go to state 122


State 87

   40 type-extension-any: EXTENDS . type-extension-list

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 17

    identifier           go to state 28
    qname                go to state 123
    type-extension-list  go to state 124


State 88

   38 type-decl: TYPE qname type-extension-any . "`{`" parameter-woa-list-opt "`}`"

    "`{`"  shift, and go to state 125


State 89

   19 let-decl-start-with-opt-type: let-decl-start "`:`" type-expr .
   63 type-expr: type-expr . "`[`" INTEGER "`]`"
   64          | type-expr . "`|`" type-expr
   65          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 115
    "`[`"   shift, and go to state 116
    "`|`"   shift, and go to state 117

    $default  reduce using rule 19 (let-decl-start-with-opt-type)


State 90

   15 let-decl: let-decl-start-with-opt-type "`=`" expression . "`;`"
   66 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   67                    | expression . "`{`" opt-named-expr-list-any "`}`"
   68                    | expression . "`=`" expression
   82 expression: expression . "`.`" identifier
   83           | expression . "`?`" "`.`" identifier
   84           | expression . "`&&`" expression
   85           | expression . "`||`" expression
   86           | expression . "`..`" expression

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`{`"   shift, and go to state 62
    "`;`"   shift, and go to state 126
    "`.`"   shift, and go to state 63
    "`?`"   shift, and go to state 64


State 91

   29 qname: qname DBLCOLON identifier .

    $default  reduce using rule 29 (qname)


State 92

   66 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   67                    | expression . "`{`" opt-named-expr-list-any "`}`"
   68                    | expression . "`=`" expression
   68                    | expression "`=`" expression .
   82 expression: expression . "`.`" identifier
   83           | expression . "`?`" "`.`" identifier
   84           | expression . "`&&`" expression
   85           | expression . "`||`" expression
   86           | expression . "`..`" expression

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`{`"   shift, and go to state 62
    "`.`"   shift, and go to state 63
    "`?`"   shift, and go to state 64

    $default  reduce using rule 68 (compound-expression)


State 93

   66 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   67                    | expression . "`{`" opt-named-expr-list-any "`}`"
   68                    | expression . "`=`" expression
   82 expression: expression . "`.`" identifier
   83           | expression . "`?`" "`.`" identifier
   84           | expression . "`&&`" expression
   84           | expression "`&&`" expression .
   85           | expression . "`||`" expression
   86           | expression . "`..`" expression

    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`{`"   shift, and go to state 62
    "`.`"   shift, and go to state 63
    "`?`"   shift, and go to state 64

    $default  reduce using rule 84 (expression)


State 94

   66 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   67                    | expression . "`{`" opt-named-expr-list-any "`}`"
   68                    | expression . "`=`" expression
   82 expression: expression . "`.`" identifier
   83           | expression . "`?`" "`.`" identifier
   84           | expression . "`&&`" expression
   85           | expression . "`||`" expression
   85           | expression "`||`" expression .
   86           | expression . "`..`" expression

    "`&&`"  shift, and go to state 58
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`{`"   shift, and go to state 62
    "`.`"   shift, and go to state 63
    "`?`"   shift, and go to state 64

    $default  reduce using rule 85 (expression)


State 95

   66 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   67                    | expression . "`{`" opt-named-expr-list-any "`}`"
   68                    | expression . "`=`" expression
   82 expression: expression . "`.`" identifier
   83           | expression . "`?`" "`.`" identifier
   84           | expression . "`&&`" expression
   85           | expression . "`||`" expression
   86           | expression . "`..`" expression
   86           | expression "`..`" expression .

    "`(`"  shift, and go to state 61
    "`{`"  shift, and go to state 62
    "`.`"  shift, and go to state 63
    "`?`"  shift, and go to state 64

    $default  reduce using rule 86 (expression)


State 96

   29 qname: qname . DBLCOLON identifier
   75 expression: qname .
   95 opt-named-expr: qname . "`:`" expression

    "`:`"     shift, and go to state 127
    DBLCOLON  shift, and go to state 55

    $default  reduce using rule 75 (expression)


State 97

   66 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   67                    | expression . "`{`" opt-named-expr-list-any "`}`"
   68                    | expression . "`=`" expression
   82 expression: expression . "`.`" identifier
   83           | expression . "`?`" "`.`" identifier
   84           | expression . "`&&`" expression
   85           | expression . "`||`" expression
   86           | expression . "`..`" expression
   96 opt-named-expr: expression .

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`{`"   shift, and go to state 62
    "`.`"   shift, and go to state 63
    "`?`"   shift, and go to state 64

    $default  reduce using rule 96 (opt-named-expr)


State 98

   66 compound-expression: expression "`(`" opt-named-expr-list-any . "`)`"

    "`)`"  shift, and go to state 128


State 99

   92 opt-named-expr-list-any: opt-named-expr-list .
   94 opt-named-expr-list: opt-named-expr-list . "," opt-named-expr

    ","  shift, and go to state 129

    $default  reduce using rule 92 (opt-named-expr-list-any)


State 100

   93 opt-named-expr-list: opt-named-expr .

    $default  reduce using rule 93 (opt-named-expr-list)


State 101

   67 compound-expression: expression "`{`" opt-named-expr-list-any . "`}`"

    "`}`"  shift, and go to state 130


State 102

   82 expression: expression "`.`" identifier .

    $default  reduce using rule 82 (expression)


State 103

   83 expression: expression "`?`" "`.`" . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 131


State 104

   66 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   67                    | expression . "`{`" opt-named-expr-list-any "`}`"
   68                    | expression . "`=`" expression
   82 expression: expression . "`.`" identifier
   83           | expression . "`?`" "`.`" identifier
   84           | expression . "`&&`" expression
   85           | expression . "`||`" expression
   86           | expression . "`..`" expression
   90 expression-list-any: expression-list-any "," expression .

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`{`"   shift, and go to state 62
    "`.`"   shift, and go to state 63
    "`?`"   shift, and go to state 64

    $default  reduce using rule 90 (expression-list-any)


State 105

    5 generic-decl: EXTERN VAR identifier "`:`" . type-expr "`;`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 71
    "`[`"         shift, and go to state 72
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 73
    INT           shift, and go to state 74
    FLOAT         shift, and go to state 75
    STRING_WORD   shift, and go to state 76
    DECIMAL_WORD  shift, and go to state 77

    identifier  go to state 28
    qname       go to state 79
    type-expr   go to state 132


State 106

    6 generic-decl: EXTERN FN qname "`(`" . parameter-woa-list-opt "`)`" "`;`"
    7             | EXTERN FN qname "`(`" . parameter-woa-list-opt "`)`" "`->`" type-expr "`;`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 71
    "`[`"         shift, and go to state 72
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 73
    INT           shift, and go to state 74
    FLOAT         shift, and go to state 75
    STRING_WORD   shift, and go to state 76
    DECIMAL_WORD  shift, and go to state 77

    $default  reduce using rule 49 (parameter-woa-list-opt)

    identifier              go to state 78
    qname                   go to state 79
    parameter-decl          go to state 80
    parameter-woa-list-opt  go to state 133
    parameter-woa-list      go to state 82
    parameter-woa-decl      go to state 83
    type-expr               go to state 84


State 107

   62 type-expr: "`(`" parameter-list-opt . "`)`"

    "`)`"  shift, and go to state 134


State 108

   44 parameter-list-opt: parameter-list .
   46 parameter-list: parameter-list . "," parameter-decl

    ","  shift, and go to state 135

    $default  reduce using rule 44 (parameter-list-opt)


State 109

   45 parameter-list: parameter-decl .

    $default  reduce using rule 45 (parameter-list)


State 110

   61 type-expr: "`[`" type-expr . "`]`"
   63          | type-expr . "`[`" INTEGER "`]`"
   64          | type-expr . "`|`" type-expr
   65          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 115
    "`[`"   shift, and go to state 116
    "`]`"   shift, and go to state 136
    "`|`"   shift, and go to state 117


State 111

   47 parameter-decl: identifier "`:`" . type-expr

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 71
    "`[`"         shift, and go to state 72
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 73
    INT           shift, and go to state 74
    FLOAT         shift, and go to state 75
    STRING_WORD   shift, and go to state 76
    DECIMAL_WORD  shift, and go to state 77

    identifier  go to state 28
    qname       go to state 79
    type-expr   go to state 137


State 112

   54 parameter-woa-decl: parameter-decl "`=`" . expression

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 138


State 113

   78 expression: FN "`(`" parameter-woa-list-opt "`)`" . "`{`" infunction_declaration_any "`}`"
   79           | FN "`(`" parameter-woa-list-opt "`)`" . "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`->`"  shift, and go to state 139
    "`{`"   shift, and go to state 140


State 114

   52 parameter-woa-list: parameter-woa-list "," . parameter-woa-decl

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 71
    "`[`"         shift, and go to state 72
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 73
    INT           shift, and go to state 74
    FLOAT         shift, and go to state 75
    STRING_WORD   shift, and go to state 76
    DECIMAL_WORD  shift, and go to state 77

    identifier          go to state 78
    qname               go to state 79
    parameter-decl      go to state 80
    parameter-woa-decl  go to state 141
    type-expr           go to state 84


State 115

   65 type-expr: type-expr "`->`" . type-expr

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 71
    "`[`"         shift, and go to state 72
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 73
    INT           shift, and go to state 74
    FLOAT         shift, and go to state 75
    STRING_WORD   shift, and go to state 76
    DECIMAL_WORD  shift, and go to state 77

    identifier  go to state 28
    qname       go to state 79
    type-expr   go to state 142


State 116

   63 type-expr: type-expr "`[`" . INTEGER "`]`"

    INTEGER  shift, and go to state 143


State 117

   64 type-expr: type-expr "`|`" . type-expr

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 71
    "`[`"         shift, and go to state 72
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 73
    INT           shift, and go to state 74
    FLOAT         shift, and go to state 75
    STRING_WORD   shift, and go to state 76
    DECIMAL_WORD  shift, and go to state 77

    identifier  go to state 28
    qname       go to state 79
    type-expr   go to state 144


State 118

   30 fn-decl: FN qname "`(`" parameter-woa-list-opt . "`)`" "`{`" infunction_declaration_any "`}`"
   31        | FN qname "`(`" parameter-woa-list-opt . "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`)`"  shift, and go to state 145


State 119

   37 case-decl: identifier .

    $default  reduce using rule 37 (case-decl)


State 120

   32 enum-decl: ENUM qname "`{`" case-list-opt . "`}`"

    "`}`"  shift, and go to state 146


State 121

   34 case-list-opt: case-list .
   36 case-list: case-list . "," case-decl

    ","  shift, and go to state 147

    $default  reduce using rule 34 (case-list-opt)


State 122

   35 case-list: case-decl .

    $default  reduce using rule 35 (case-list)


State 123

   29 qname: qname . DBLCOLON identifier
   41 type-extension-list: qname .

    DBLCOLON  shift, and go to state 55

    $default  reduce using rule 41 (type-extension-list)


State 124

   40 type-extension-any: EXTENDS type-extension-list .
   42 type-extension-list: type-extension-list . "," qname

    ","  shift, and go to state 148

    $default  reduce using rule 40 (type-extension-any)


State 125

   38 type-decl: TYPE qname type-extension-any "`{`" . parameter-woa-list-opt "`}`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 71
    "`[`"         shift, and go to state 72
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 73
    INT           shift, and go to state 74
    FLOAT         shift, and go to state 75
    STRING_WORD   shift, and go to state 76
    DECIMAL_WORD  shift, and go to state 77

    $default  reduce using rule 49 (parameter-woa-list-opt)

    identifier              go to state 78
    qname                   go to state 79
    parameter-decl          go to state 80
    parameter-woa-list-opt  go to state 149
    parameter-woa-list      go to state 82
    parameter-woa-decl      go to state 83
    type-expr               go to state 84


State 126

   15 let-decl: let-decl-start-with-opt-type "`=`" expression "`;`" .

    $default  reduce using rule 15 (let-decl)


State 127

   95 opt-named-expr: qname "`:`" . expression

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 150


State 128

   66 compound-expression: expression "`(`" opt-named-expr-list-any "`)`" .

    $default  reduce using rule 66 (compound-expression)


State 129

   94 opt-named-expr-list: opt-named-expr-list "," . opt-named-expr

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    identifier           go to state 28
    qname                go to state 96
    compound-expression  go to state 36
    expression           go to state 97
    opt-named-expr       go to state 151


State 130

   67 compound-expression: expression "`{`" opt-named-expr-list-any "`}`" .

    $default  reduce using rule 67 (compound-expression)


State 131

   83 expression: expression "`?`" "`.`" identifier .

    $default  reduce using rule 83 (expression)


State 132

    5 generic-decl: EXTERN VAR identifier "`:`" type-expr . "`;`"
   63 type-expr: type-expr . "`[`" INTEGER "`]`"
   64          | type-expr . "`|`" type-expr
   65          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 115
    "`[`"   shift, and go to state 116
    "`;`"   shift, and go to state 152
    "`|`"   shift, and go to state 117


State 133

    6 generic-decl: EXTERN FN qname "`(`" parameter-woa-list-opt . "`)`" "`;`"
    7             | EXTERN FN qname "`(`" parameter-woa-list-opt . "`)`" "`->`" type-expr "`;`"

    "`)`"  shift, and go to state 153


State 134

   62 type-expr: "`(`" parameter-list-opt "`)`" .

    $default  reduce using rule 62 (type-expr)


State 135

   46 parameter-list: parameter-list "," . parameter-decl

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 71
    "`[`"         shift, and go to state 72
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 73
    INT           shift, and go to state 74
    FLOAT         shift, and go to state 75
    STRING_WORD   shift, and go to state 76
    DECIMAL_WORD  shift, and go to state 77

    identifier      go to state 78
    qname           go to state 79
    parameter-decl  go to state 154
    type-expr       go to state 84


State 136

   61 type-expr: "`[`" type-expr "`]`" .

    $default  reduce using rule 61 (type-expr)


State 137

   47 parameter-decl: identifier "`:`" type-expr .
   63 type-expr: type-expr . "`[`" INTEGER "`]`"
   64          | type-expr . "`|`" type-expr
   65          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 115
    "`[`"   shift, and go to state 116
    "`|`"   shift, and go to state 117

    $default  reduce using rule 47 (parameter-decl)


State 138

   54 parameter-woa-decl: parameter-decl "`=`" expression .
   66 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   67                    | expression . "`{`" opt-named-expr-list-any "`}`"
   68                    | expression . "`=`" expression
   82 expression: expression . "`.`" identifier
   83           | expression . "`?`" "`.`" identifier
   84           | expression . "`&&`" expression
   85           | expression . "`||`" expression
   86           | expression . "`..`" expression

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`{`"   shift, and go to state 62
    "`.`"   shift, and go to state 63
    "`?`"   shift, and go to state 64

    $default  reduce using rule 54 (parameter-woa-decl)


State 139

   79 expression: FN "`(`" parameter-woa-list-opt "`)`" "`->`" . type-expr "`{`" infunction_declaration_any "`}`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 71
    "`[`"         shift, and go to state 72
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 73
    INT           shift, and go to state 74
    FLOAT         shift, and go to state 75
    STRING_WORD   shift, and go to state 76
    DECIMAL_WORD  shift, and go to state 77

    identifier  go to state 28
    qname       go to state 79
    type-expr   go to state 155


State 140

   78 expression: FN "`(`" parameter-woa-list-opt "`)`" "`{`" . infunction_declaration_any "`}`"

    $default  reduce using rule 20 (infunction_declaration_any)

    infunction_declaration_any  go to state 156


State 141

   52 parameter-woa-list: parameter-woa-list "," parameter-woa-decl .

    $default  reduce using rule 52 (parameter-woa-list)


State 142

   63 type-expr: type-expr . "`[`" INTEGER "`]`"
   64          | type-expr . "`|`" type-expr
   65          | type-expr . "`->`" type-expr
   65          | type-expr "`->`" type-expr .

    $default  reduce using rule 65 (type-expr)


State 143

   63 type-expr: type-expr "`[`" INTEGER . "`]`"

    "`]`"  shift, and go to state 157


State 144

   63 type-expr: type-expr . "`[`" INTEGER "`]`"
   64          | type-expr . "`|`" type-expr
   64          | type-expr "`|`" type-expr .
   65          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 115
    "`[`"   shift, and go to state 116

    $default  reduce using rule 64 (type-expr)


State 145

   30 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" . "`{`" infunction_declaration_any "`}`"
   31        | FN qname "`(`" parameter-woa-list-opt "`)`" . "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`->`"  shift, and go to state 158
    "`{`"   shift, and go to state 159


State 146

   32 enum-decl: ENUM qname "`{`" case-list-opt "`}`" .

    $default  reduce using rule 32 (enum-decl)


State 147

   36 case-list: case-list "," . case-decl

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 119
    case-decl   go to state 160


State 148

   42 type-extension-list: type-extension-list "," . qname

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 17

    identifier  go to state 28
    qname       go to state 161


State 149

   38 type-decl: TYPE qname type-extension-any "`{`" parameter-woa-list-opt . "`}`"

    "`}`"  shift, and go to state 162


State 150

   66 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   67                    | expression . "`{`" opt-named-expr-list-any "`}`"
   68                    | expression . "`=`" expression
   82 expression: expression . "`.`" identifier
   83           | expression . "`?`" "`.`" identifier
   84           | expression . "`&&`" expression
   85           | expression . "`||`" expression
   86           | expression . "`..`" expression
   95 opt-named-expr: qname "`:`" expression .

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`{`"   shift, and go to state 62
    "`.`"   shift, and go to state 63
    "`?`"   shift, and go to state 64

    $default  reduce using rule 95 (opt-named-expr)


State 151

   94 opt-named-expr-list: opt-named-expr-list "," opt-named-expr .

    $default  reduce using rule 94 (opt-named-expr-list)


State 152

    5 generic-decl: EXTERN VAR identifier "`:`" type-expr "`;`" .

    $default  reduce using rule 5 (generic-decl)


State 153

    6 generic-decl: EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" . "`;`"
    7             | EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" . "`->`" type-expr "`;`"

    "`->`"  shift, and go to state 163
    "`;`"   shift, and go to state 164


State 154

   46 parameter-list: parameter-list "," parameter-decl .

    $default  reduce using rule 46 (parameter-list)


State 155

   63 type-expr: type-expr . "`[`" INTEGER "`]`"
   64          | type-expr . "`|`" type-expr
   65          | type-expr . "`->`" type-expr
   79 expression: FN "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr . "`{`" infunction_declaration_any "`}`"

    "`->`"  shift, and go to state 115
    "`{`"   shift, and go to state 165
    "`[`"   shift, and go to state 116
    "`|`"   shift, and go to state 117


State 156

   21 infunction_declaration_any: infunction_declaration_any . "`;`"
   22                           | infunction_declaration_any . opt-infunction-decl
   78 expression: FN "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any . "`}`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`}`"          shift, and go to state 166
    "`[`"          shift, and go to state 11
    "`;`"          shift, and go to state 167
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    LET            shift, and go to state 15
    RETURN         shift, and go to state 168
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    let-decl                      go to state 169
    let-decl-start                go to state 26
    let-decl-start-with-opt-type  go to state 27
    opt-infunction-decl           go to state 170
    identifier                    go to state 28
    qname                         go to state 29
    compound-expression           go to state 171
    expression                    go to state 34


State 157

   63 type-expr: type-expr "`[`" INTEGER "`]`" .

    $default  reduce using rule 63 (type-expr)


State 158

   31 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" . type-expr "`{`" infunction_declaration_any "`}`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 71
    "`[`"         shift, and go to state 72
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 73
    INT           shift, and go to state 74
    FLOAT         shift, and go to state 75
    STRING_WORD   shift, and go to state 76
    DECIMAL_WORD  shift, and go to state 77

    identifier  go to state 28
    qname       go to state 79
    type-expr   go to state 172


State 159

   30 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`{`" . infunction_declaration_any "`}`"

    $default  reduce using rule 20 (infunction_declaration_any)

    infunction_declaration_any  go to state 173


State 160

   36 case-list: case-list "," case-decl .

    $default  reduce using rule 36 (case-list)


State 161

   29 qname: qname . DBLCOLON identifier
   42 type-extension-list: type-extension-list "," qname .

    DBLCOLON  shift, and go to state 55

    $default  reduce using rule 42 (type-extension-list)


State 162

   38 type-decl: TYPE qname type-extension-any "`{`" parameter-woa-list-opt "`}`" .

    $default  reduce using rule 38 (type-decl)


State 163

    7 generic-decl: EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" . type-expr "`;`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 71
    "`[`"         shift, and go to state 72
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 73
    INT           shift, and go to state 74
    FLOAT         shift, and go to state 75
    STRING_WORD   shift, and go to state 76
    DECIMAL_WORD  shift, and go to state 77

    identifier  go to state 28
    qname       go to state 79
    type-expr   go to state 174


State 164

    6 generic-decl: EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" "`;`" .

    $default  reduce using rule 6 (generic-decl)


State 165

   79 expression: FN "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" . infunction_declaration_any "`}`"

    $default  reduce using rule 20 (infunction_declaration_any)

    infunction_declaration_any  go to state 175


State 166

   78 expression: FN "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`" .

    $default  reduce using rule 78 (expression)


State 167

   21 infunction_declaration_any: infunction_declaration_any "`;`" .

    $default  reduce using rule 21 (infunction_declaration_any)


State 168

   24 opt-infunction-decl: RETURN . expression "`;`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 176


State 169

   23 opt-infunction-decl: let-decl .

    $default  reduce using rule 23 (opt-infunction-decl)


State 170

   22 infunction_declaration_any: infunction_declaration_any opt-infunction-decl .

    $default  reduce using rule 22 (infunction_declaration_any)


State 171

   25 opt-infunction-decl: compound-expression . "`;`"
   87 expression: compound-expression .

    "`;`"  shift, and go to state 177

    $default  reduce using rule 87 (expression)


State 172

   31 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr . "`{`" infunction_declaration_any "`}`"
   63 type-expr: type-expr . "`[`" INTEGER "`]`"
   64          | type-expr . "`|`" type-expr
   65          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 115
    "`{`"   shift, and go to state 178
    "`[`"   shift, and go to state 116
    "`|`"   shift, and go to state 117


State 173

   21 infunction_declaration_any: infunction_declaration_any . "`;`"
   22                           | infunction_declaration_any . opt-infunction-decl
   30 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any . "`}`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`}`"          shift, and go to state 179
    "`[`"          shift, and go to state 11
    "`;`"          shift, and go to state 167
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    LET            shift, and go to state 15
    RETURN         shift, and go to state 168
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    let-decl                      go to state 169
    let-decl-start                go to state 26
    let-decl-start-with-opt-type  go to state 27
    opt-infunction-decl           go to state 170
    identifier                    go to state 28
    qname                         go to state 29
    compound-expression           go to state 171
    expression                    go to state 34


State 174

    7 generic-decl: EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr . "`;`"
   63 type-expr: type-expr . "`[`" INTEGER "`]`"
   64          | type-expr . "`|`" type-expr
   65          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 115
    "`[`"   shift, and go to state 116
    "`;`"   shift, and go to state 180
    "`|`"   shift, and go to state 117


State 175

   21 infunction_declaration_any: infunction_declaration_any . "`;`"
   22                           | infunction_declaration_any . opt-infunction-decl
   79 expression: FN "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any . "`}`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`}`"          shift, and go to state 181
    "`[`"          shift, and go to state 11
    "`;`"          shift, and go to state 167
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    LET            shift, and go to state 15
    RETURN         shift, and go to state 168
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    let-decl                      go to state 169
    let-decl-start                go to state 26
    let-decl-start-with-opt-type  go to state 27
    opt-infunction-decl           go to state 170
    identifier                    go to state 28
    qname                         go to state 29
    compound-expression           go to state 171
    expression                    go to state 34


State 176

   24 opt-infunction-decl: RETURN expression . "`;`"
   66 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   67                    | expression . "`{`" opt-named-expr-list-any "`}`"
   68                    | expression . "`=`" expression
   82 expression: expression . "`.`" identifier
   83           | expression . "`?`" "`.`" identifier
   84           | expression . "`&&`" expression
   85           | expression . "`||`" expression
   86           | expression . "`..`" expression

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`{`"   shift, and go to state 62
    "`;`"   shift, and go to state 182
    "`.`"   shift, and go to state 63
    "`?`"   shift, and go to state 64


State 177

   25 opt-infunction-decl: compound-expression "`;`" .

    $default  reduce using rule 25 (opt-infunction-decl)


State 178

   31 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" . infunction_declaration_any "`}`"

    $default  reduce using rule 20 (infunction_declaration_any)

    infunction_declaration_any  go to state 183


State 179

   30 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`" .

    $default  reduce using rule 30 (fn-decl)


State 180

    7 generic-decl: EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`;`" .

    $default  reduce using rule 7 (generic-decl)


State 181

   79 expression: FN "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`" .

    $default  reduce using rule 79 (expression)


State 182

   24 opt-infunction-decl: RETURN expression "`;`" .

    $default  reduce using rule 24 (opt-infunction-decl)


State 183

   21 infunction_declaration_any: infunction_declaration_any . "`;`"
   22                           | infunction_declaration_any . opt-infunction-decl
   31 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any . "`}`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`}`"          shift, and go to state 184
    "`[`"          shift, and go to state 11
    "`;`"          shift, and go to state 167
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    LET            shift, and go to state 15
    RETURN         shift, and go to state 168
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    let-decl                      go to state 169
    let-decl-start                go to state 26
    let-decl-start-with-opt-type  go to state 27
    opt-infunction-decl           go to state 170
    identifier                    go to state 28
    qname                         go to state 29
    compound-expression           go to state 171
    expression                    go to state 34


State 184

   31 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`" .

    $default  reduce using rule 31 (fn-decl)
