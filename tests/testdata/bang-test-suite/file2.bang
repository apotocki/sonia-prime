fn foo_xn(arg0: string) {
    print(arg0, ' ', $$);
}

fn foo_xn(arg0: string, arg1: string, integer) {
    print(arg0, ' ', arg1, ' ', $0, ' ', $$);
}

fn foo_xn(arg0: string, arg1: string, $iparam: integer, integer) {
    print(arg0, ' ', arg1, ' ', $iparam, ' ', $0, ' ', $1, ' ', $$);
}

foo_xn(arg0: "hello");
foo_xn(arg1: "world", arg0: " hello,", 22);
foo_xn(arg1: "world", arg0: " hello,", 22, 42);

extern fn set_external_property(object, string, _);
extern fn get_external_property(object, string) -> any;

struct View => (cookie: object, proto: typename metaobject(disabled: bool));
fn 
fn get(self:View, property: __id("object")) -> object { }
fn set(self:View, property: const __identifier $ID, $value: View::proto.$ID)) {
    set_external_property(self.object, $ID, $value);
}

struct view {
    let cookie: object;
    let proto = const metaobject(disabled: bool);
    fn get(property: const __identifier $ID, $value: proto.$ID)) { return object.$ID
}