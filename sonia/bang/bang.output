Terminals unused in grammar

    COMMENT_BEGIN
    COMMENT_END
    OPERATOR_TERM
    "`->*`"
    "`~>`"
    "`.*`"
    "`++`"
    "`--`"
    "`<<`"
    "`>>`"
    "`<=`"
    "`>=`"
    "`&&`"
    "`||`"
    "`..`"
    "`+=`"
    "`-=`"
    "`*=`"
    "`/=`"
    "`%=`"
    "`<<=`"
    "`>>=`"
    "`&=`"
    "`|=`"
    "`^=`"
    "`<`"
    "`>`"
    "`-`"
    "`*`"
    "`/`"
    "`%`"
    "`&`"
    "`~`"
    "`^`"
    "`$`"
    "`?`"
    "`#`"
    AUTO
    THROW
    SIZEOF
    LOWEST
    EXTENDS
    TYPENAME


Grammar

    0 $accept: begin "end of file"

    1 begin: statement_any "end of file"
    2      | finished-statement-any "end of file"

    3 statement_any: %empty
    4              | statement
    5              | finished-statement-any statement

    6 finished-statement-any: finished-statement
    7                       | finished-statement-any "`;`"
    8                       | finished-statement-any finished-statement
    9                       | statement_any "`;`"

   10 statement: EXTERN VAR identifier "`:`" type-expr
   11          | EXTERN "`fn`" fn-decl
   12          | INCLUDE STRING
   13          | fn-start-decl fn-decl "`=>`" syntax-expression
   14          | generic-statement
   15          | STRUCT struct-decl

   16 let-decl: let-decl-start-with-opt-type
   17         | let-decl-start-with-opt-type "`=`" syntax-expression

   18 let-decl-start: LET identifier
   19               | LET "weak modifier" identifier

   20 let-decl-start-with-opt-type: let-decl-start
   21                             | let-decl-start "`:`" type-expr

   22 infunction-statement-any: %empty
   23                         | infunction-statement
   24                         | finished-infunction-statement-any infunction-statement

   25 finished-infunction-statement-any: finished-statement
   26                                  | finished-infunction-statement-any "`;`"
   27                                  | finished-infunction-statement-any finished-statement
   28                                  | infunction-statement-any "`;`"

   29 braced-statements: "`{`" infunction-statement-set "`}`"

   30 finished-statement: "`while`" syntax-expression braced-statements
   31                   | "`while`" syntax-expression "`;`" syntax-expression braced-statements
   32                   | "`for`" syntax-expression "`in`" syntax-expression braced-statements
   33                   | "`if`" syntax-expression braced-statements
   34                   | "`if`" syntax-expression braced-statements "`else`" braced-statements
   35                   | fn-start-decl fn-decl braced-statements
   36                   | STRUCT qname braced-statements
   37                   | STRUCT qname "`(`" parameter-list-opt "`)`" braced-statements
   38                   | ENUM enum-decl

   39 infunction-statement-set: infunction-statement-any
   40                         | finished-infunction-statement-any

   41 generic-statement: let-decl
   42                  | USING using-decl
   43                  | "`return`" syntax-expression
   44                  | compound-expression
   45                  | syntax-expression "`=`" syntax-expression

   46 infunction-statement: generic-statement
   47                     | "`break`"
   48                     | "`continue`"

   49 identifier: IDENTIFIER

   50 internal-identifier: INTERNAL_IDENTIFIER

   51 qname: "`::`" identifier
   52      | identifier
   53      | qname "`::`" identifier

   54 fn-start-decl: "`fn`"
   55              | INLINE "`fn`"

   56 fn-name: qname
   57        | "`new`"

   58 fn-decl: fn-name "`(`" parameter-list-opt "`)`"
   59        | fn-name "`(`" parameter-list-opt "`)`" "`->`" type-expr

   60 enum-decl: qname "`{`" case-list-opt "`}`"

   61 case-list-opt: %empty
   62              | case-list

   63 case-list: case-decl
   64          | case-list "," case-decl

   65 case-decl: identifier

   66 struct-decl: qname "`=>`" "`(`" field-list-opt "`)`"
   67            | qname "`(`" parameter-list-opt "`)`" "`=>`" "`(`" field-list-opt "`)`"

   68 using-decl: qname "`=>`" syntax-expression
   69           | qname "`(`" parameter-list-opt "`)`" "`=>`" syntax-expression

   70 expression-list: syntax-expression
   71                | expression-list "," syntax-expression

   72 argument-list-opt: %empty
   73                  | argument-list

   74 argument-list: argument
   75              | argument-list "," argument

   76 argument: argument-name syntax-expression
   77         | syntax-expression

   78 argument-name: identifier "`=`"
   79              | identifier "`:`"

   80 field-list-opt: %empty
   81               | field-list

   82 field-list: field
   83           | field-list "," field

   84 field-default-value-opt: %empty
   85                        | "`=`" syntax-expression

   86 field: identifier "`:`" field-type-expr field-default-value-opt
   87      | identifier "`=>`" field-type-expr field-default-value-opt

   88 field-type-expr: qname
   89                | qname "`(`" argument-list-opt "`)`"
   90                | INTERNAL_IDENTIFIER
   91                | field-type-expr "`|`" field-type-expr

   92 parameter-list-opt: %empty
   93                   | parameter-list

   94 parameter-list: parameter-decl
   95               | parameter-list "," parameter-decl

   96 internal-identifier-opt: %empty
   97                        | internal-identifier

   98 parameter-default-value-opt: %empty
   99                            | "`=`" syntax-expression

  100 parameter-decl: identifier internal-identifier-opt "`:`" parameter-constraint-set parameter-default-value-opt
  101               | identifier internal-identifier-opt "`:`" "const modifier" parameter-constraint-set parameter-default-value-opt
  102               | identifier internal-identifier-opt "`:`" "mut modifier" parameter-constraint-set parameter-default-value-opt
  103               | identifier internal-identifier-opt "`=>`" parameter-value-constraint-set
  104               | INTERNAL_IDENTIFIER "`:`" parameter-constraint-set parameter-default-value-opt
  105               | INTERNAL_IDENTIFIER "`:`" "const modifier" parameter-constraint-set parameter-default-value-opt
  106               | INTERNAL_IDENTIFIER "`:`" "mut modifier" parameter-constraint-set parameter-default-value-opt
  107               | INTERNAL_IDENTIFIER "`=>`" parameter-value-constraint-set
  108               | INTERNAL_IDENTIFIER "`...`" "`:`" parameter-constraint-set
  109               | INTERNAL_IDENTIFIER "`...`" "`:`" "const modifier" parameter-constraint-set
  110               | INTERNAL_IDENTIFIER "`...`" "`:`" "mut modifier" parameter-constraint-set
  111               | parameter-constraint-set parameter-default-value-opt
  112               | "const modifier" parameter-constraint-set parameter-default-value-opt
  113               | "mut modifier" parameter-constraint-set parameter-default-value-opt
  114               | "`=>`" parameter-value-constraint-set

  115 parameter-constraint-set: parameter-matched-type
  116                         | concept-expression
  117                         | parameter-constraint-set concept-expression

  118 parameter-value-constraint-set: parameter-matched-value
  119                               | concept-expression
  120                               | parameter-value-constraint-set concept-expression

  121 parameter-matched-value: syntax-expression

  122 parameter-matched-type: basic-parameter-matched-type
  123                       | basic-parameter-matched-type "`...`"
  124                       | INTERNAL_IDENTIFIER
  125                       | INTERNAL_IDENTIFIER "`...`"

  126 basic-parameter-matched-type: "`_`"
  127                             | qname
  128                             | qname "`(`" argument-list-opt "`)`"
  129                             | basic-parameter-matched-type "`|`" basic-parameter-matched-type

  130 concept-expression: "`@`" qname

  131 syntax-expression: INTERNAL_IDENTIFIER
  132                  | syntax-expression-wo-ii

  133 syntax-expression-wo-ii: "nil"
  134                        | "true"
  135                        | "false"
  136                        | INTEGER
  137                        | DECIMAL
  138                        | DECIMAL_S
  139                        | INTEGER_INDEX
  140                        | STRING
  141                        | RESERVED_IDENTIFIER
  142                        | qname
  143                        | "`(`" argument-list "`)`"
  144                        | "`[`" expression-list "`]`"
  145                        | "`[[`" expression-list "`]]`"
  146                        | "`.`" identifier
  147                        | syntax-expression "`.`" identifier
  148                        | syntax-expression "`.`" apostrophe-expression
  149                        | syntax-expression INTEGER_INDEX
  150                        | "`!`" syntax-expression
  151                        | syntax-expression "`+`" syntax-expression
  152                        | syntax-expression "`==`" syntax-expression
  153                        | syntax-expression "`!=`" syntax-expression
  154                        | apostrophe-expression
  155                        | new-expression
  156                        | compound-expression
  157                        | lambda-expression

  158 apostrophe-expression: "APOSTROPHE" syntax-expression "APOSTROPHE"

  159 new-expression: "`new`" qname
  160               | "`new`" apostrophe-expression
  161               | "`new`" qname "`(`" argument-list-opt "`)`"
  162               | "`new`" apostrophe-expression "`(`" argument-list-opt "`)`"

  163 call-expression: qname "`(`" argument-list-opt "`)`"
  164                | call-expression "`(`" argument-list-opt "`)`"
  165                | apostrophe-expression "`(`" argument-list-opt "`)`"
  166                | lambda-expression "`(`" argument-list-opt "`)`"

  167 lambda-expression: fn-start-decl "`(`" parameter-list-opt "`)`" braced-statements
  168                  | fn-start-decl "`(`" parameter-list-opt "`)`" "`->`" type-expr braced-statements

  169 compound-expression: call-expression
  170                    | syntax-expression "`...`"

  171 type-expr: qname
  172          | call-expression
  173          | INTERNAL_IDENTIFIER
  174          | "`[`" type-expr "`]`"
  175          | "`(`" argument-list-opt "`)`"
  176          | type-expr "`[`" INTEGER "`]`"
  177          | type-expr "`|`" type-expr
  178          | type-expr "`->`" type-expr


Terminals, with rules where they appear

    "end of file" (0) 0 1 2
    error (256)
    COMMENT_BEGIN (258)
    COMMENT_END (259)
    STRING <sonia::lang::bang::annotated_string_view> (260) 12 140
    IDENTIFIER <sonia::lang::bang::annotated_string_view> (261) 49
    INTERNAL_IDENTIFIER <sonia::lang::bang::annotated_string_view> (262) 50 90 104 105 106 107 108 109 110 124 125 131 173
    RESERVED_IDENTIFIER <sonia::lang::bang::annotated_string_view> (263) 141
    INTEGER_INDEX <sonia::lang::bang::annotated_string_view> (264) 139 149
    INTEGER <sonia::lang::bang::annotated_integer> (265) 136 176
    DECIMAL <sonia::lang::bang::annotated_decimal> (266) 137
    DECIMAL_S <sonia::lang::bang::annotated_decimal> (267) 138
    OPERATOR_TERM <sonia::string_view> (268)
    "`=`" <sonia::lang::lex::resource_location> (269) 17 45 78 85 99
    "APOSTROPHE" (270) 158
    "`@`" (271) 130
    "`_`" <sonia::lang::lex::resource_location> (272) 126
    "`->*`" (273)
    "`->`" (274) 59 168 178
    "`=>`" (275) 13 66 67 68 69 87 103 107 114
    "`~>`" (276)
    "`.*`" (277)
    "`++`" (278)
    "`--`" (279)
    "`<<`" (280)
    "`>>`" (281)
    "`<=`" (282)
    "`>=`" (283)
    "`==`" <sonia::lang::lex::resource_location> (284) 152
    "`!=`" <sonia::lang::lex::resource_location> (285) 153
    "`&&`" <sonia::lang::lex::resource_location> (286)
    "`||`" <sonia::lang::lex::resource_location> (287)
    "`..`" <sonia::lang::lex::resource_location> (288)
    "`...`" <sonia::lang::lex::resource_location> (289) 108 109 110 123 125 170
    "`+=`" (290)
    "`-=`" (291)
    "`*=`" (292)
    "`/=`" (293)
    "`%=`" (294)
    "`<<=`" (295)
    "`>>=`" (296)
    "`&=`" (297)
    "`|=`" (298)
    "`^=`" (299)
    "`:`" (300) 10 21 79 86 100 101 102 104 105 106 108 109 110
    "`::`" (301) 51 53
    "`(`" <sonia::lang::lex::resource_location> (302) 37 58 59 66 67 69 89 128 143 161 162 163 164 165 166 167 168 175
    "`)`" (303) 37 58 59 66 67 69 89 128 143 161 162 163 164 165 166 167 168 175
    "`{`" <sonia::lang::lex::resource_location> (304) 29 60
    "`}`" (305) 29 60
    "`[`" <sonia::lang::lex::resource_location> (306) 144 174 176
    "`]`" (307) 144 174 176
    "`[[`" <sonia::lang::lex::resource_location> (308) 145
    "`]]`" (309) 145
    "`<`" (310)
    "`>`" (311)
    "`;`" (312) 7 9 26 28 31
    "`.`" <sonia::lang::lex::resource_location> (313) 146 147 148
    "`+`" <sonia::lang::lex::resource_location> (314) 151
    "`-`" (315)
    "`*`" (316)
    "`/`" (317)
    "`%`" (318)
    "`&`" (319)
    "`|`" <sonia::lang::lex::resource_location> (320) 91 129 177
    "`!`" <sonia::lang::lex::resource_location> (321) 150
    "`~`" (322)
    "`^`" (323)
    "," (324) 64 71 75 83 95
    "`$`" (325)
    "`?`" (326)
    "`#`" (327)
    LET (328) 18 19
    VAR (329) 10
    EXTERN (330) 10 11
    "`new`" <sonia::lang::lex::resource_location> (331) 57 159 160 161 162
    "`while`" (332) 30 31
    "`for`" (333) 32
    "`in`" (334) 32
    "`if`" (335) 33 34
    "`else`" (336) 34
    "`continue`" <sonia::lang::lex::resource_location> (337) 48
    "`break`" <sonia::lang::lex::resource_location> (338) 47
    "`return`" (339) 43
    AUTO (340)
    USING (341) 42
    THROW (342)
    SIZEOF (343)
    LOWEST (344)
    INCLUDE (345) 12
    INLINE (346) 55
    "`fn`" <sonia::lang::lex::resource_location> (347) 11 54 55
    ENUM (348) 38
    STRUCT (349) 15 36 37
    EXTENDS (350)
    TYPENAME (351)
    "weak modifier" (352) 19
    "const modifier" (353) 101 105 109 112
    "mut modifier" (354) 102 106 110 113
    "nil" <annotated_nil> (355) 133
    "true" <annotated_bool> (356) 134
    "false" <annotated_bool> (357) 135


Nonterminals, with rules where they appear

    $accept (103)
        on left: 0
    begin (104)
        on left: 1 2
        on right: 0
    statement_any <managed_statement_list> (105)
        on left: 3 4 5
        on right: 1 9
    finished-statement-any <managed_statement_list> (106)
        on left: 6 7 8 9
        on right: 2 5 7 8
    statement <statement> (107)
        on left: 10 11 12 13 14 15
        on right: 4 5
    let-decl <let_statement> (108)
        on left: 16 17
        on right: 41
    let-decl-start <let_statement> (109)
        on left: 18 19
        on right: 20 21
    let-decl-start-with-opt-type <let_statement> (110)
        on left: 20 21
        on right: 16 17
    infunction-statement-any <managed_statement_list> (111)
        on left: 22 23 24
        on right: 28 39
    finished-infunction-statement-any <managed_statement_list> (112)
        on left: 25 26 27 28
        on right: 24 26 27 40
    braced-statements <managed_statement_list> (113)
        on left: 29
        on right: 30 31 32 33 34 35 36 37 167 168
    finished-statement <finished_statement_type> (114)
        on left: 30 31 32 33 34 35 36 37 38
        on right: 6 8 25 27
    infunction-statement-set <managed_statement_list> (115)
        on left: 39 40
        on right: 29
    generic-statement <generic_statement_type> (116)
        on left: 41 42 43 44 45
        on right: 14 46
    infunction-statement <statement> (117)
        on left: 46 47 48
        on right: 23 24
    identifier <sonia::lang::bang::annotated_identifier> (118)
        on left: 49
        on right: 10 18 19 51 52 53 65 78 79 86 87 100 101 102 103 146 147
    internal-identifier <sonia::lang::bang::annotated_identifier> (119)
        on left: 50
        on right: 97
    qname <sonia::lang::bang::annotated_qname> (120)
        on left: 51 52 53
        on right: 36 37 53 56 60 66 67 68 69 88 89 127 128 130 142 159 161 163 171
    fn-start-decl <fn_kind> (121)
        on left: 54 55
        on right: 13 35 167 168
    fn-name <sonia::lang::bang::annotated_qname> (122)
        on left: 56 57
        on right: 58 59
    fn-decl <fn_pure_t> (123)
        on left: 58 59
        on right: 11 13 35
    enum-decl <enum_decl> (124)
        on left: 60
        on right: 38
    case-list-opt <std::vector<sonia::lang::bang::identifier>> (125)
        on left: 61 62
        on right: 60
    case-list <std::vector<sonia::lang::bang::identifier>> (126)
        on left: 63 64
        on right: 62 64
    case-decl <sonia::lang::bang::identifier> (127)
        on left: 65
        on right: 63 64
    struct-decl <struct_decl> (128)
        on left: 66 67
        on right: 15
    using-decl <using_decl> (129)
        on left: 68 69
        on right: 42
    expression-list <expression_list_t> (130)
        on left: 70 71
        on right: 71 144 145
    argument-list-opt <named_expression_list_t> (131)
        on left: 72 73
        on right: 89 128 161 162 163 164 165 166 175
    argument-list <named_expression_list_t> (132)
        on left: 74 75
        on right: 73 75 143
    argument <named_expression_t> (133)
        on left: 76 77
        on right: 74 75
    argument-name <sonia::lang::bang::annotated_identifier> (134)
        on left: 78 79
        on right: 76
    field-list-opt <field_list_t> (135)
        on left: 80 81
        on right: 66 67
    field-list <field_list_t> (136)
        on left: 82 83
        on right: 81 83
    field-default-value-opt <sonia::optional<syntax_expression_t>> (137)
        on left: 84 85
        on right: 86 87
    field <field_t> (138)
        on left: 86 87
        on right: 82 83
    field-type-expr <syntax_expression_t> (139)
        on left: 88 89 90 91
        on right: 86 87 91
    parameter-list-opt <parameter_list_t> (140)
        on left: 92 93
        on right: 37 58 59 67 69 167 168
    parameter-list <parameter_list_t> (141)
        on left: 94 95
        on right: 93 95
    internal-identifier-opt <sonia::lang::bang::annotated_identifier> (142)
        on left: 96 97
        on right: 100 101 102 103
    parameter-default-value-opt <sonia::optional<syntax_expression_t>> (143)
        on left: 98 99
        on right: 100 101 102 104 105 106 111 112 113
    parameter-decl <parameter_t> (144)
        on left: 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114
        on right: 94 95
    parameter-constraint-set <parameter_constraint_set_t> (145)
        on left: 115 116 117
        on right: 100 101 102 104 105 106 108 109 110 111 112 113 117
    parameter-value-constraint-set <parameter_constraint_set_t> (146)
        on left: 118 119 120
        on right: 103 107 114 120
    parameter-matched-value <syntax_expression_t> (147)
        on left: 121
        on right: 118
    parameter-matched-type <syntax_expression_t> (148)
        on left: 122 123 124 125
        on right: 115
    basic-parameter-matched-type <syntax_expression_t> (149)
        on left: 126 127 128 129
        on right: 122 123 129
    concept-expression <syntax_expression_t> (150)
        on left: 130
        on right: 116 117 119 120
    syntax-expression <syntax_expression_t> (151)
        on left: 131 132
        on right: 13 17 30 31 32 33 34 43 45 68 69 70 71 76 77 85 99 121 147 148 149 150 151 152 153 158 170
    syntax-expression-wo-ii <syntax_expression_t> (152)
        on left: 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157
        on right: 132
    apostrophe-expression <syntax_expression_t> (153)
        on left: 158
        on right: 148 154 160 162 165
    new-expression <syntax_expression_t> (154)
        on left: 159 160 161 162
        on right: 155
    call-expression <syntax_expression_t> (155)
        on left: 163 164 165 166
        on right: 164 169 172
    lambda-expression <syntax_expression_t> (156)
        on left: 167 168
        on right: 157 166
    compound-expression <syntax_expression_t> (157)
        on left: 169 170
        on right: 44 156
    type-expr <syntax_expression_t> (158)
        on left: 171 172 173 174 175 176 177 178
        on right: 10 21 59 168 174 176 177 178


State 0

    0 $accept: . begin "end of file"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    LET                  shift, and go to state 16
    EXTERN               shift, and go to state 17
    "`new`"              shift, and go to state 18
    "`while`"            shift, and go to state 19
    "`for`"              shift, and go to state 20
    "`if`"               shift, and go to state 21
    "`return`"           shift, and go to state 22
    USING                shift, and go to state 23
    INCLUDE              shift, and go to state 24
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    ENUM                 shift, and go to state 27
    STRUCT               shift, and go to state 28
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    $default  reduce using rule 3 (statement_any)

    begin                         go to state 32
    statement_any                 go to state 33
    finished-statement-any        go to state 34
    statement                     go to state 35
    let-decl                      go to state 36
    let-decl-start                go to state 37
    let-decl-start-with-opt-type  go to state 38
    finished-statement            go to state 39
    generic-statement             go to state 40
    identifier                    go to state 41
    qname                         go to state 42
    fn-start-decl                 go to state 43
    syntax-expression             go to state 44
    syntax-expression-wo-ii       go to state 45
    apostrophe-expression         go to state 46
    new-expression                go to state 47
    call-expression               go to state 48
    lambda-expression             go to state 49
    compound-expression           go to state 50


State 1

  140 syntax-expression-wo-ii: STRING .

    $default  reduce using rule 140 (syntax-expression-wo-ii)


State 2

   49 identifier: IDENTIFIER .

    $default  reduce using rule 49 (identifier)


State 3

  131 syntax-expression: INTERNAL_IDENTIFIER .

    $default  reduce using rule 131 (syntax-expression)


State 4

  141 syntax-expression-wo-ii: RESERVED_IDENTIFIER .

    $default  reduce using rule 141 (syntax-expression-wo-ii)


State 5

  139 syntax-expression-wo-ii: INTEGER_INDEX .

    $default  reduce using rule 139 (syntax-expression-wo-ii)


State 6

  136 syntax-expression-wo-ii: INTEGER .

    $default  reduce using rule 136 (syntax-expression-wo-ii)


State 7

  137 syntax-expression-wo-ii: DECIMAL .

    $default  reduce using rule 137 (syntax-expression-wo-ii)


State 8

  138 syntax-expression-wo-ii: DECIMAL_S .

    $default  reduce using rule 138 (syntax-expression-wo-ii)


State 9

  158 apostrophe-expression: "APOSTROPHE" . syntax-expression "APOSTROPHE"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    identifier               go to state 41
    qname                    go to state 42
    fn-start-decl            go to state 51
    syntax-expression        go to state 52
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 10

   51 qname: "`::`" . identifier

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 54


State 11

  143 syntax-expression-wo-ii: "`(`" . argument-list "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    identifier               go to state 55
    qname                    go to state 42
    fn-start-decl            go to state 51
    argument-list            go to state 56
    argument                 go to state 57
    argument-name            go to state 58
    syntax-expression        go to state 59
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 12

  144 syntax-expression-wo-ii: "`[`" . expression-list "`]`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    identifier               go to state 41
    qname                    go to state 42
    fn-start-decl            go to state 51
    expression-list          go to state 60
    syntax-expression        go to state 61
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 13

  145 syntax-expression-wo-ii: "`[[`" . expression-list "`]]`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    identifier               go to state 41
    qname                    go to state 42
    fn-start-decl            go to state 51
    expression-list          go to state 62
    syntax-expression        go to state 61
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 14

  146 syntax-expression-wo-ii: "`.`" . identifier

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 63


State 15

  150 syntax-expression-wo-ii: "`!`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    identifier               go to state 41
    qname                    go to state 42
    fn-start-decl            go to state 51
    syntax-expression        go to state 64
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 16

   18 let-decl-start: LET . identifier
   19               | LET . "weak modifier" identifier

    IDENTIFIER       shift, and go to state 2
    "weak modifier"  shift, and go to state 65

    identifier  go to state 66


State 17

   10 statement: EXTERN . VAR identifier "`:`" type-expr
   11          | EXTERN . "`fn`" fn-decl

    VAR     shift, and go to state 67
    "`fn`"  shift, and go to state 68


State 18

  159 new-expression: "`new`" . qname
  160               | "`new`" . apostrophe-expression
  161               | "`new`" . qname "`(`" argument-list-opt "`)`"
  162               | "`new`" . apostrophe-expression "`(`" argument-list-opt "`)`"

    IDENTIFIER    shift, and go to state 2
    "APOSTROPHE"  shift, and go to state 9
    "`::`"        shift, and go to state 10

    identifier             go to state 41
    qname                  go to state 69
    apostrophe-expression  go to state 70


State 19

   30 finished-statement: "`while`" . syntax-expression braced-statements
   31                   | "`while`" . syntax-expression "`;`" syntax-expression braced-statements

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    identifier               go to state 41
    qname                    go to state 42
    fn-start-decl            go to state 51
    syntax-expression        go to state 71
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 20

   32 finished-statement: "`for`" . syntax-expression "`in`" syntax-expression braced-statements

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    identifier               go to state 41
    qname                    go to state 42
    fn-start-decl            go to state 51
    syntax-expression        go to state 72
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 21

   33 finished-statement: "`if`" . syntax-expression braced-statements
   34                   | "`if`" . syntax-expression braced-statements "`else`" braced-statements

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    identifier               go to state 41
    qname                    go to state 42
    fn-start-decl            go to state 51
    syntax-expression        go to state 73
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 22

   43 generic-statement: "`return`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    identifier               go to state 41
    qname                    go to state 42
    fn-start-decl            go to state 51
    syntax-expression        go to state 74
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 23

   42 generic-statement: USING . using-decl

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 10

    identifier  go to state 41
    qname       go to state 75
    using-decl  go to state 76


State 24

   12 statement: INCLUDE . STRING

    STRING  shift, and go to state 77


State 25

   55 fn-start-decl: INLINE . "`fn`"

    "`fn`"  shift, and go to state 78


State 26

   54 fn-start-decl: "`fn`" .

    $default  reduce using rule 54 (fn-start-decl)


State 27

   38 finished-statement: ENUM . enum-decl

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 10

    identifier  go to state 41
    qname       go to state 79
    enum-decl   go to state 80


State 28

   15 statement: STRUCT . struct-decl
   36 finished-statement: STRUCT . qname braced-statements
   37                   | STRUCT . qname "`(`" parameter-list-opt "`)`" braced-statements

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 10

    identifier   go to state 41
    qname        go to state 81
    struct-decl  go to state 82


State 29

  133 syntax-expression-wo-ii: "nil" .

    $default  reduce using rule 133 (syntax-expression-wo-ii)


State 30

  134 syntax-expression-wo-ii: "true" .

    $default  reduce using rule 134 (syntax-expression-wo-ii)


State 31

  135 syntax-expression-wo-ii: "false" .

    $default  reduce using rule 135 (syntax-expression-wo-ii)


State 32

    0 $accept: begin . "end of file"

    "end of file"  shift, and go to state 83


State 33

    1 begin: statement_any . "end of file"
    9 finished-statement-any: statement_any . "`;`"

    "end of file"  shift, and go to state 84
    "`;`"          shift, and go to state 85


State 34

    2 begin: finished-statement-any . "end of file"
    5 statement_any: finished-statement-any . statement
    7 finished-statement-any: finished-statement-any . "`;`"
    8                       | finished-statement-any . finished-statement

    "end of file"        shift, and go to state 86
    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`;`"                shift, and go to state 87
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    LET                  shift, and go to state 16
    EXTERN               shift, and go to state 17
    "`new`"              shift, and go to state 18
    "`while`"            shift, and go to state 19
    "`for`"              shift, and go to state 20
    "`if`"               shift, and go to state 21
    "`return`"           shift, and go to state 22
    USING                shift, and go to state 23
    INCLUDE              shift, and go to state 24
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    ENUM                 shift, and go to state 27
    STRUCT               shift, and go to state 28
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    statement                     go to state 88
    let-decl                      go to state 36
    let-decl-start                go to state 37
    let-decl-start-with-opt-type  go to state 38
    finished-statement            go to state 89
    generic-statement             go to state 40
    identifier                    go to state 41
    qname                         go to state 42
    fn-start-decl                 go to state 43
    syntax-expression             go to state 44
    syntax-expression-wo-ii       go to state 45
    apostrophe-expression         go to state 46
    new-expression                go to state 47
    call-expression               go to state 48
    lambda-expression             go to state 49
    compound-expression           go to state 50


State 35

    4 statement_any: statement .

    $default  reduce using rule 4 (statement_any)


State 36

   41 generic-statement: let-decl .

    $default  reduce using rule 41 (generic-statement)


State 37

   20 let-decl-start-with-opt-type: let-decl-start .
   21                             | let-decl-start . "`:`" type-expr

    "`:`"  shift, and go to state 90

    $default  reduce using rule 20 (let-decl-start-with-opt-type)


State 38

   16 let-decl: let-decl-start-with-opt-type .
   17         | let-decl-start-with-opt-type . "`=`" syntax-expression

    "`=`"  shift, and go to state 91

    $default  reduce using rule 16 (let-decl)


State 39

    6 finished-statement-any: finished-statement .

    $default  reduce using rule 6 (finished-statement-any)


State 40

   14 statement: generic-statement .

    $default  reduce using rule 14 (statement)


State 41

   52 qname: identifier .

    $default  reduce using rule 52 (qname)


State 42

   53 qname: qname . "`::`" identifier
  142 syntax-expression-wo-ii: qname .
  163 call-expression: qname . "`(`" argument-list-opt "`)`"

    "`::`"  shift, and go to state 92
    "`(`"   shift, and go to state 93

    $default  reduce using rule 142 (syntax-expression-wo-ii)


State 43

   13 statement: fn-start-decl . fn-decl "`=>`" syntax-expression
   35 finished-statement: fn-start-decl . fn-decl braced-statements
  167 lambda-expression: fn-start-decl . "`(`" parameter-list-opt "`)`" braced-statements
  168                  | fn-start-decl . "`(`" parameter-list-opt "`)`" "`->`" type-expr braced-statements

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 10
    "`(`"       shift, and go to state 94
    "`new`"     shift, and go to state 95

    identifier  go to state 41
    qname       go to state 96
    fn-name     go to state 97
    fn-decl     go to state 98


State 44

   45 generic-statement: syntax-expression . "`=`" syntax-expression
  147 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  148                        | syntax-expression . "`.`" apostrophe-expression
  149                        | syntax-expression . INTEGER_INDEX
  151                        | syntax-expression . "`+`" syntax-expression
  152                        | syntax-expression . "`==`" syntax-expression
  153                        | syntax-expression . "`!=`" syntax-expression
  170 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 99
    "`=`"          shift, and go to state 100
    "`==`"         shift, and go to state 101
    "`!=`"         shift, and go to state 102
    "`...`"        shift, and go to state 103
    "`.`"          shift, and go to state 104
    "`+`"          shift, and go to state 105


State 45

  132 syntax-expression: syntax-expression-wo-ii .

    $default  reduce using rule 132 (syntax-expression)


State 46

  154 syntax-expression-wo-ii: apostrophe-expression .
  165 call-expression: apostrophe-expression . "`(`" argument-list-opt "`)`"

    "`(`"  shift, and go to state 106

    $default  reduce using rule 154 (syntax-expression-wo-ii)


State 47

  155 syntax-expression-wo-ii: new-expression .

    $default  reduce using rule 155 (syntax-expression-wo-ii)


State 48

  164 call-expression: call-expression . "`(`" argument-list-opt "`)`"
  169 compound-expression: call-expression .

    "`(`"  shift, and go to state 107

    $default  reduce using rule 169 (compound-expression)


State 49

  157 syntax-expression-wo-ii: lambda-expression .
  166 call-expression: lambda-expression . "`(`" argument-list-opt "`)`"

    "`(`"  shift, and go to state 108

    $default  reduce using rule 157 (syntax-expression-wo-ii)


State 50

   44 generic-statement: compound-expression .
  156 syntax-expression-wo-ii: compound-expression .

    "end of file"  reduce using rule 44 (generic-statement)
    "`}`"          reduce using rule 44 (generic-statement)
    "`;`"          reduce using rule 44 (generic-statement)
    $default       reduce using rule 156 (syntax-expression-wo-ii)


State 51

  167 lambda-expression: fn-start-decl . "`(`" parameter-list-opt "`)`" braced-statements
  168                  | fn-start-decl . "`(`" parameter-list-opt "`)`" "`->`" type-expr braced-statements

    "`(`"  shift, and go to state 94


State 52

  147 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  148                        | syntax-expression . "`.`" apostrophe-expression
  149                        | syntax-expression . INTEGER_INDEX
  151                        | syntax-expression . "`+`" syntax-expression
  152                        | syntax-expression . "`==`" syntax-expression
  153                        | syntax-expression . "`!=`" syntax-expression
  158 apostrophe-expression: "APOSTROPHE" syntax-expression . "APOSTROPHE"
  170 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 99
    "APOSTROPHE"   shift, and go to state 109
    "`==`"         shift, and go to state 101
    "`!=`"         shift, and go to state 102
    "`...`"        shift, and go to state 103
    "`.`"          shift, and go to state 104
    "`+`"          shift, and go to state 105


State 53

  156 syntax-expression-wo-ii: compound-expression .

    $default  reduce using rule 156 (syntax-expression-wo-ii)


State 54

   51 qname: "`::`" identifier .

    $default  reduce using rule 51 (qname)


State 55

   52 qname: identifier .
   78 argument-name: identifier . "`=`"
   79              | identifier . "`:`"

    "`=`"  shift, and go to state 110
    "`:`"  shift, and go to state 111

    $default  reduce using rule 52 (qname)


State 56

   75 argument-list: argument-list . "," argument
  143 syntax-expression-wo-ii: "`(`" argument-list . "`)`"

    "`)`"  shift, and go to state 112
    ","    shift, and go to state 113


State 57

   74 argument-list: argument .

    $default  reduce using rule 74 (argument-list)


State 58

   76 argument: argument-name . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    identifier               go to state 41
    qname                    go to state 42
    fn-start-decl            go to state 51
    syntax-expression        go to state 114
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 59

   77 argument: syntax-expression .
  147 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  148                        | syntax-expression . "`.`" apostrophe-expression
  149                        | syntax-expression . INTEGER_INDEX
  151                        | syntax-expression . "`+`" syntax-expression
  152                        | syntax-expression . "`==`" syntax-expression
  153                        | syntax-expression . "`!=`" syntax-expression
  170 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 99
    "`==`"         shift, and go to state 101
    "`!=`"         shift, and go to state 102
    "`...`"        shift, and go to state 103
    "`.`"          shift, and go to state 104
    "`+`"          shift, and go to state 105

    $default  reduce using rule 77 (argument)


State 60

   71 expression-list: expression-list . "," syntax-expression
  144 syntax-expression-wo-ii: "`[`" expression-list . "`]`"

    "`]`"  shift, and go to state 115
    ","    shift, and go to state 116


State 61

   70 expression-list: syntax-expression .
  147 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  148                        | syntax-expression . "`.`" apostrophe-expression
  149                        | syntax-expression . INTEGER_INDEX
  151                        | syntax-expression . "`+`" syntax-expression
  152                        | syntax-expression . "`==`" syntax-expression
  153                        | syntax-expression . "`!=`" syntax-expression
  170 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 99
    "`==`"         shift, and go to state 101
    "`!=`"         shift, and go to state 102
    "`...`"        shift, and go to state 103
    "`.`"          shift, and go to state 104
    "`+`"          shift, and go to state 105

    $default  reduce using rule 70 (expression-list)


State 62

   71 expression-list: expression-list . "," syntax-expression
  145 syntax-expression-wo-ii: "`[[`" expression-list . "`]]`"

    "`]]`"  shift, and go to state 117
    ","     shift, and go to state 116


State 63

  146 syntax-expression-wo-ii: "`.`" identifier .

    $default  reduce using rule 146 (syntax-expression-wo-ii)


State 64

  147 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  148                        | syntax-expression . "`.`" apostrophe-expression
  149                        | syntax-expression . INTEGER_INDEX
  150                        | "`!`" syntax-expression .
  151                        | syntax-expression . "`+`" syntax-expression
  152                        | syntax-expression . "`==`" syntax-expression
  153                        | syntax-expression . "`!=`" syntax-expression
  170 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 99
    "`.`"          shift, and go to state 104

    $default  reduce using rule 150 (syntax-expression-wo-ii)


State 65

   19 let-decl-start: LET "weak modifier" . identifier

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 118


State 66

   18 let-decl-start: LET identifier .

    $default  reduce using rule 18 (let-decl-start)


State 67

   10 statement: EXTERN VAR . identifier "`:`" type-expr

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 119


State 68

   11 statement: EXTERN "`fn`" . fn-decl

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 10
    "`new`"     shift, and go to state 95

    identifier  go to state 41
    qname       go to state 96
    fn-name     go to state 97
    fn-decl     go to state 120


State 69

   53 qname: qname . "`::`" identifier
  159 new-expression: "`new`" qname .
  161               | "`new`" qname . "`(`" argument-list-opt "`)`"

    "`::`"  shift, and go to state 92
    "`(`"   shift, and go to state 121

    $default  reduce using rule 159 (new-expression)


State 70

  160 new-expression: "`new`" apostrophe-expression .
  162               | "`new`" apostrophe-expression . "`(`" argument-list-opt "`)`"

    "`(`"  shift, and go to state 122

    $default  reduce using rule 160 (new-expression)


State 71

   30 finished-statement: "`while`" syntax-expression . braced-statements
   31                   | "`while`" syntax-expression . "`;`" syntax-expression braced-statements
  147 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  148                        | syntax-expression . "`.`" apostrophe-expression
  149                        | syntax-expression . INTEGER_INDEX
  151                        | syntax-expression . "`+`" syntax-expression
  152                        | syntax-expression . "`==`" syntax-expression
  153                        | syntax-expression . "`!=`" syntax-expression
  170 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 99
    "`==`"         shift, and go to state 101
    "`!=`"         shift, and go to state 102
    "`...`"        shift, and go to state 103
    "`{`"          shift, and go to state 123
    "`;`"          shift, and go to state 124
    "`.`"          shift, and go to state 104
    "`+`"          shift, and go to state 105

    braced-statements  go to state 125


State 72

   32 finished-statement: "`for`" syntax-expression . "`in`" syntax-expression braced-statements
  147 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  148                        | syntax-expression . "`.`" apostrophe-expression
  149                        | syntax-expression . INTEGER_INDEX
  151                        | syntax-expression . "`+`" syntax-expression
  152                        | syntax-expression . "`==`" syntax-expression
  153                        | syntax-expression . "`!=`" syntax-expression
  170 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 99
    "`==`"         shift, and go to state 101
    "`!=`"         shift, and go to state 102
    "`...`"        shift, and go to state 103
    "`.`"          shift, and go to state 104
    "`+`"          shift, and go to state 105
    "`in`"         shift, and go to state 126


State 73

   33 finished-statement: "`if`" syntax-expression . braced-statements
   34                   | "`if`" syntax-expression . braced-statements "`else`" braced-statements
  147 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  148                        | syntax-expression . "`.`" apostrophe-expression
  149                        | syntax-expression . INTEGER_INDEX
  151                        | syntax-expression . "`+`" syntax-expression
  152                        | syntax-expression . "`==`" syntax-expression
  153                        | syntax-expression . "`!=`" syntax-expression
  170 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 99
    "`==`"         shift, and go to state 101
    "`!=`"         shift, and go to state 102
    "`...`"        shift, and go to state 103
    "`{`"          shift, and go to state 123
    "`.`"          shift, and go to state 104
    "`+`"          shift, and go to state 105

    braced-statements  go to state 127


State 74

   43 generic-statement: "`return`" syntax-expression .
  147 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  148                        | syntax-expression . "`.`" apostrophe-expression
  149                        | syntax-expression . INTEGER_INDEX
  151                        | syntax-expression . "`+`" syntax-expression
  152                        | syntax-expression . "`==`" syntax-expression
  153                        | syntax-expression . "`!=`" syntax-expression
  170 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 99
    "`==`"         shift, and go to state 101
    "`!=`"         shift, and go to state 102
    "`...`"        shift, and go to state 103
    "`.`"          shift, and go to state 104
    "`+`"          shift, and go to state 105

    $default  reduce using rule 43 (generic-statement)


State 75

   53 qname: qname . "`::`" identifier
   68 using-decl: qname . "`=>`" syntax-expression
   69           | qname . "`(`" parameter-list-opt "`)`" "`=>`" syntax-expression

    "`=>`"  shift, and go to state 128
    "`::`"  shift, and go to state 92
    "`(`"   shift, and go to state 129


State 76

   42 generic-statement: USING using-decl .

    $default  reduce using rule 42 (generic-statement)


State 77

   12 statement: INCLUDE STRING .

    $default  reduce using rule 12 (statement)


State 78

   55 fn-start-decl: INLINE "`fn`" .

    $default  reduce using rule 55 (fn-start-decl)


State 79

   53 qname: qname . "`::`" identifier
   60 enum-decl: qname . "`{`" case-list-opt "`}`"

    "`::`"  shift, and go to state 92
    "`{`"   shift, and go to state 130


State 80

   38 finished-statement: ENUM enum-decl .

    $default  reduce using rule 38 (finished-statement)


State 81

   36 finished-statement: STRUCT qname . braced-statements
   37                   | STRUCT qname . "`(`" parameter-list-opt "`)`" braced-statements
   53 qname: qname . "`::`" identifier
   66 struct-decl: qname . "`=>`" "`(`" field-list-opt "`)`"
   67            | qname . "`(`" parameter-list-opt "`)`" "`=>`" "`(`" field-list-opt "`)`"

    "`=>`"  shift, and go to state 131
    "`::`"  shift, and go to state 92
    "`(`"   shift, and go to state 132
    "`{`"   shift, and go to state 123

    braced-statements  go to state 133


State 82

   15 statement: STRUCT struct-decl .

    $default  reduce using rule 15 (statement)


State 83

    0 $accept: begin "end of file" .

    $default  accept


State 84

    1 begin: statement_any "end of file" .

    $default  reduce using rule 1 (begin)


State 85

    9 finished-statement-any: statement_any "`;`" .

    $default  reduce using rule 9 (finished-statement-any)


State 86

    2 begin: finished-statement-any "end of file" .

    $default  reduce using rule 2 (begin)


State 87

    7 finished-statement-any: finished-statement-any "`;`" .

    $default  reduce using rule 7 (finished-statement-any)


State 88

    5 statement_any: finished-statement-any statement .

    $default  reduce using rule 5 (statement_any)


State 89

    8 finished-statement-any: finished-statement-any finished-statement .

    $default  reduce using rule 8 (finished-statement-any)


State 90

   21 let-decl-start-with-opt-type: let-decl-start "`:`" . type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 134
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 135
    "`[`"                shift, and go to state 136
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26

    identifier             go to state 41
    qname                  go to state 137
    fn-start-decl          go to state 51
    apostrophe-expression  go to state 138
    call-expression        go to state 139
    lambda-expression      go to state 140
    type-expr              go to state 141


State 91

   17 let-decl: let-decl-start-with-opt-type "`=`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    identifier               go to state 41
    qname                    go to state 42
    fn-start-decl            go to state 51
    syntax-expression        go to state 142
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 92

   53 qname: qname "`::`" . identifier

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 143


State 93

  163 call-expression: qname "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    $default  reduce using rule 72 (argument-list-opt)

    identifier               go to state 55
    qname                    go to state 42
    fn-start-decl            go to state 51
    argument-list-opt        go to state 144
    argument-list            go to state 145
    argument                 go to state 57
    argument-name            go to state 58
    syntax-expression        go to state 59
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 94

  167 lambda-expression: fn-start-decl "`(`" . parameter-list-opt "`)`" braced-statements
  168                  | fn-start-decl "`(`" . parameter-list-opt "`)`" "`->`" type-expr braced-statements

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 146
    "`@`"                shift, and go to state 147
    "`_`"                shift, and go to state 148
    "`=>`"               shift, and go to state 149
    "`::`"               shift, and go to state 10
    "const modifier"     shift, and go to state 150
    "mut modifier"       shift, and go to state 151

    $default  reduce using rule 92 (parameter-list-opt)

    identifier                    go to state 152
    qname                         go to state 153
    parameter-list-opt            go to state 154
    parameter-list                go to state 155
    parameter-decl                go to state 156
    parameter-constraint-set      go to state 157
    parameter-matched-type        go to state 158
    basic-parameter-matched-type  go to state 159
    concept-expression            go to state 160


State 95

   57 fn-name: "`new`" .

    $default  reduce using rule 57 (fn-name)


State 96

   53 qname: qname . "`::`" identifier
   56 fn-name: qname .

    "`::`"  shift, and go to state 92

    $default  reduce using rule 56 (fn-name)


State 97

   58 fn-decl: fn-name . "`(`" parameter-list-opt "`)`"
   59        | fn-name . "`(`" parameter-list-opt "`)`" "`->`" type-expr

    "`(`"  shift, and go to state 161


State 98

   13 statement: fn-start-decl fn-decl . "`=>`" syntax-expression
   35 finished-statement: fn-start-decl fn-decl . braced-statements

    "`=>`"  shift, and go to state 162
    "`{`"   shift, and go to state 123

    braced-statements  go to state 163


State 99

  149 syntax-expression-wo-ii: syntax-expression INTEGER_INDEX .

    $default  reduce using rule 149 (syntax-expression-wo-ii)


State 100

   45 generic-statement: syntax-expression "`=`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    identifier               go to state 41
    qname                    go to state 42
    fn-start-decl            go to state 51
    syntax-expression        go to state 164
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 101

  152 syntax-expression-wo-ii: syntax-expression "`==`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    identifier               go to state 41
    qname                    go to state 42
    fn-start-decl            go to state 51
    syntax-expression        go to state 165
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 102

  153 syntax-expression-wo-ii: syntax-expression "`!=`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    identifier               go to state 41
    qname                    go to state 42
    fn-start-decl            go to state 51
    syntax-expression        go to state 166
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 103

  170 compound-expression: syntax-expression "`...`" .

    $default  reduce using rule 170 (compound-expression)


State 104

  147 syntax-expression-wo-ii: syntax-expression "`.`" . identifier
  148                        | syntax-expression "`.`" . apostrophe-expression

    IDENTIFIER    shift, and go to state 2
    "APOSTROPHE"  shift, and go to state 9

    identifier             go to state 167
    apostrophe-expression  go to state 168


State 105

  151 syntax-expression-wo-ii: syntax-expression "`+`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    identifier               go to state 41
    qname                    go to state 42
    fn-start-decl            go to state 51
    syntax-expression        go to state 169
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 106

  165 call-expression: apostrophe-expression "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    $default  reduce using rule 72 (argument-list-opt)

    identifier               go to state 55
    qname                    go to state 42
    fn-start-decl            go to state 51
    argument-list-opt        go to state 170
    argument-list            go to state 145
    argument                 go to state 57
    argument-name            go to state 58
    syntax-expression        go to state 59
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 107

  164 call-expression: call-expression "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    $default  reduce using rule 72 (argument-list-opt)

    identifier               go to state 55
    qname                    go to state 42
    fn-start-decl            go to state 51
    argument-list-opt        go to state 171
    argument-list            go to state 145
    argument                 go to state 57
    argument-name            go to state 58
    syntax-expression        go to state 59
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 108

  166 call-expression: lambda-expression "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    $default  reduce using rule 72 (argument-list-opt)

    identifier               go to state 55
    qname                    go to state 42
    fn-start-decl            go to state 51
    argument-list-opt        go to state 172
    argument-list            go to state 145
    argument                 go to state 57
    argument-name            go to state 58
    syntax-expression        go to state 59
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 109

  158 apostrophe-expression: "APOSTROPHE" syntax-expression "APOSTROPHE" .

    $default  reduce using rule 158 (apostrophe-expression)


State 110

   78 argument-name: identifier "`=`" .

    $default  reduce using rule 78 (argument-name)


State 111

   79 argument-name: identifier "`:`" .

    $default  reduce using rule 79 (argument-name)


State 112

  143 syntax-expression-wo-ii: "`(`" argument-list "`)`" .

    $default  reduce using rule 143 (syntax-expression-wo-ii)


State 113

   75 argument-list: argument-list "," . argument

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    identifier               go to state 55
    qname                    go to state 42
    fn-start-decl            go to state 51
    argument                 go to state 173
    argument-name            go to state 58
    syntax-expression        go to state 59
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 114

   76 argument: argument-name syntax-expression .
  147 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  148                        | syntax-expression . "`.`" apostrophe-expression
  149                        | syntax-expression . INTEGER_INDEX
  151                        | syntax-expression . "`+`" syntax-expression
  152                        | syntax-expression . "`==`" syntax-expression
  153                        | syntax-expression . "`!=`" syntax-expression
  170 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 99
    "`==`"         shift, and go to state 101
    "`!=`"         shift, and go to state 102
    "`...`"        shift, and go to state 103
    "`.`"          shift, and go to state 104
    "`+`"          shift, and go to state 105

    $default  reduce using rule 76 (argument)


State 115

  144 syntax-expression-wo-ii: "`[`" expression-list "`]`" .

    $default  reduce using rule 144 (syntax-expression-wo-ii)


State 116

   71 expression-list: expression-list "," . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    identifier               go to state 41
    qname                    go to state 42
    fn-start-decl            go to state 51
    syntax-expression        go to state 174
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 117

  145 syntax-expression-wo-ii: "`[[`" expression-list "`]]`" .

    $default  reduce using rule 145 (syntax-expression-wo-ii)


State 118

   19 let-decl-start: LET "weak modifier" identifier .

    $default  reduce using rule 19 (let-decl-start)


State 119

   10 statement: EXTERN VAR identifier . "`:`" type-expr

    "`:`"  shift, and go to state 175


State 120

   11 statement: EXTERN "`fn`" fn-decl .

    $default  reduce using rule 11 (statement)


State 121

  161 new-expression: "`new`" qname "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    $default  reduce using rule 72 (argument-list-opt)

    identifier               go to state 55
    qname                    go to state 42
    fn-start-decl            go to state 51
    argument-list-opt        go to state 176
    argument-list            go to state 145
    argument                 go to state 57
    argument-name            go to state 58
    syntax-expression        go to state 59
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 122

  162 new-expression: "`new`" apostrophe-expression "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    $default  reduce using rule 72 (argument-list-opt)

    identifier               go to state 55
    qname                    go to state 42
    fn-start-decl            go to state 51
    argument-list-opt        go to state 177
    argument-list            go to state 145
    argument                 go to state 57
    argument-name            go to state 58
    syntax-expression        go to state 59
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 123

   29 braced-statements: "`{`" . infunction-statement-set "`}`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    LET                  shift, and go to state 16
    "`new`"              shift, and go to state 18
    "`while`"            shift, and go to state 19
    "`for`"              shift, and go to state 20
    "`if`"               shift, and go to state 21
    "`continue`"         shift, and go to state 178
    "`break`"            shift, and go to state 179
    "`return`"           shift, and go to state 22
    USING                shift, and go to state 23
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    ENUM                 shift, and go to state 27
    STRUCT               shift, and go to state 180
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    $default  reduce using rule 22 (infunction-statement-any)

    let-decl                           go to state 36
    let-decl-start                     go to state 37
    let-decl-start-with-opt-type       go to state 38
    infunction-statement-any           go to state 181
    finished-infunction-statement-any  go to state 182
    finished-statement                 go to state 183
    infunction-statement-set           go to state 184
    generic-statement                  go to state 185
    infunction-statement               go to state 186
    identifier                         go to state 41
    qname                              go to state 42
    fn-start-decl                      go to state 187
    syntax-expression                  go to state 44
    syntax-expression-wo-ii            go to state 45
    apostrophe-expression              go to state 46
    new-expression                     go to state 47
    call-expression                    go to state 48
    lambda-expression                  go to state 49
    compound-expression                go to state 50


State 124

   31 finished-statement: "`while`" syntax-expression "`;`" . syntax-expression braced-statements

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    identifier               go to state 41
    qname                    go to state 42
    fn-start-decl            go to state 51
    syntax-expression        go to state 188
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 125

   30 finished-statement: "`while`" syntax-expression braced-statements .

    $default  reduce using rule 30 (finished-statement)


State 126

   32 finished-statement: "`for`" syntax-expression "`in`" . syntax-expression braced-statements

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    identifier               go to state 41
    qname                    go to state 42
    fn-start-decl            go to state 51
    syntax-expression        go to state 189
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 127

   33 finished-statement: "`if`" syntax-expression braced-statements .
   34                   | "`if`" syntax-expression braced-statements . "`else`" braced-statements

    "`else`"  shift, and go to state 190

    $default  reduce using rule 33 (finished-statement)


State 128

   68 using-decl: qname "`=>`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    identifier               go to state 41
    qname                    go to state 42
    fn-start-decl            go to state 51
    syntax-expression        go to state 191
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 129

   69 using-decl: qname "`(`" . parameter-list-opt "`)`" "`=>`" syntax-expression

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 146
    "`@`"                shift, and go to state 147
    "`_`"                shift, and go to state 148
    "`=>`"               shift, and go to state 149
    "`::`"               shift, and go to state 10
    "const modifier"     shift, and go to state 150
    "mut modifier"       shift, and go to state 151

    $default  reduce using rule 92 (parameter-list-opt)

    identifier                    go to state 152
    qname                         go to state 153
    parameter-list-opt            go to state 192
    parameter-list                go to state 155
    parameter-decl                go to state 156
    parameter-constraint-set      go to state 157
    parameter-matched-type        go to state 158
    basic-parameter-matched-type  go to state 159
    concept-expression            go to state 160


State 130

   60 enum-decl: qname "`{`" . case-list-opt "`}`"

    IDENTIFIER  shift, and go to state 2

    $default  reduce using rule 61 (case-list-opt)

    identifier     go to state 193
    case-list-opt  go to state 194
    case-list      go to state 195
    case-decl      go to state 196


State 131

   66 struct-decl: qname "`=>`" . "`(`" field-list-opt "`)`"

    "`(`"  shift, and go to state 197


State 132

   37 finished-statement: STRUCT qname "`(`" . parameter-list-opt "`)`" braced-statements
   67 struct-decl: qname "`(`" . parameter-list-opt "`)`" "`=>`" "`(`" field-list-opt "`)`"

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 146
    "`@`"                shift, and go to state 147
    "`_`"                shift, and go to state 148
    "`=>`"               shift, and go to state 149
    "`::`"               shift, and go to state 10
    "const modifier"     shift, and go to state 150
    "mut modifier"       shift, and go to state 151

    $default  reduce using rule 92 (parameter-list-opt)

    identifier                    go to state 152
    qname                         go to state 153
    parameter-list-opt            go to state 198
    parameter-list                go to state 155
    parameter-decl                go to state 156
    parameter-constraint-set      go to state 157
    parameter-matched-type        go to state 158
    basic-parameter-matched-type  go to state 159
    concept-expression            go to state 160


State 133

   36 finished-statement: STRUCT qname braced-statements .

    $default  reduce using rule 36 (finished-statement)


State 134

  173 type-expr: INTERNAL_IDENTIFIER .

    $default  reduce using rule 173 (type-expr)


State 135

  175 type-expr: "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    $default  reduce using rule 72 (argument-list-opt)

    identifier               go to state 55
    qname                    go to state 42
    fn-start-decl            go to state 51
    argument-list-opt        go to state 199
    argument-list            go to state 145
    argument                 go to state 57
    argument-name            go to state 58
    syntax-expression        go to state 59
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 136

  174 type-expr: "`[`" . type-expr "`]`"

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 134
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 135
    "`[`"                shift, and go to state 136
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26

    identifier             go to state 41
    qname                  go to state 137
    fn-start-decl          go to state 51
    apostrophe-expression  go to state 138
    call-expression        go to state 139
    lambda-expression      go to state 140
    type-expr              go to state 200


State 137

   53 qname: qname . "`::`" identifier
  163 call-expression: qname . "`(`" argument-list-opt "`)`"
  171 type-expr: qname .

    "`::`"  shift, and go to state 92
    "`(`"   shift, and go to state 93

    $default  reduce using rule 171 (type-expr)


State 138

  165 call-expression: apostrophe-expression . "`(`" argument-list-opt "`)`"

    "`(`"  shift, and go to state 106


State 139

  164 call-expression: call-expression . "`(`" argument-list-opt "`)`"
  172 type-expr: call-expression .

    "`(`"  shift, and go to state 107

    $default  reduce using rule 172 (type-expr)


State 140

  166 call-expression: lambda-expression . "`(`" argument-list-opt "`)`"

    "`(`"  shift, and go to state 108


State 141

   21 let-decl-start-with-opt-type: let-decl-start "`:`" type-expr .
  176 type-expr: type-expr . "`[`" INTEGER "`]`"
  177          | type-expr . "`|`" type-expr
  178          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 201
    "`[`"   shift, and go to state 202
    "`|`"   shift, and go to state 203

    $default  reduce using rule 21 (let-decl-start-with-opt-type)


State 142

   17 let-decl: let-decl-start-with-opt-type "`=`" syntax-expression .
  147 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  148                        | syntax-expression . "`.`" apostrophe-expression
  149                        | syntax-expression . INTEGER_INDEX
  151                        | syntax-expression . "`+`" syntax-expression
  152                        | syntax-expression . "`==`" syntax-expression
  153                        | syntax-expression . "`!=`" syntax-expression
  170 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 99
    "`==`"         shift, and go to state 101
    "`!=`"         shift, and go to state 102
    "`...`"        shift, and go to state 103
    "`.`"          shift, and go to state 104
    "`+`"          shift, and go to state 105

    $default  reduce using rule 17 (let-decl)


State 143

   53 qname: qname "`::`" identifier .

    $default  reduce using rule 53 (qname)


State 144

  163 call-expression: qname "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 204


State 145

   73 argument-list-opt: argument-list .
   75 argument-list: argument-list . "," argument

    ","  shift, and go to state 113

    $default  reduce using rule 73 (argument-list-opt)


State 146

  104 parameter-decl: INTERNAL_IDENTIFIER . "`:`" parameter-constraint-set parameter-default-value-opt
  105               | INTERNAL_IDENTIFIER . "`:`" "const modifier" parameter-constraint-set parameter-default-value-opt
  106               | INTERNAL_IDENTIFIER . "`:`" "mut modifier" parameter-constraint-set parameter-default-value-opt
  107               | INTERNAL_IDENTIFIER . "`=>`" parameter-value-constraint-set
  108               | INTERNAL_IDENTIFIER . "`...`" "`:`" parameter-constraint-set
  109               | INTERNAL_IDENTIFIER . "`...`" "`:`" "const modifier" parameter-constraint-set
  110               | INTERNAL_IDENTIFIER . "`...`" "`:`" "mut modifier" parameter-constraint-set
  124 parameter-matched-type: INTERNAL_IDENTIFIER .
  125                       | INTERNAL_IDENTIFIER . "`...`"

    "`=>`"   shift, and go to state 205
    "`...`"  shift, and go to state 206
    "`:`"    shift, and go to state 207

    $default  reduce using rule 124 (parameter-matched-type)


State 147

  130 concept-expression: "`@`" . qname

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 10

    identifier  go to state 41
    qname       go to state 208


State 148

  126 basic-parameter-matched-type: "`_`" .

    $default  reduce using rule 126 (basic-parameter-matched-type)


State 149

  114 parameter-decl: "`=>`" . parameter-value-constraint-set

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`@`"                shift, and go to state 147
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    identifier                      go to state 41
    qname                           go to state 42
    fn-start-decl                   go to state 51
    parameter-value-constraint-set  go to state 209
    parameter-matched-value         go to state 210
    concept-expression              go to state 211
    syntax-expression               go to state 212
    syntax-expression-wo-ii         go to state 45
    apostrophe-expression           go to state 46
    new-expression                  go to state 47
    call-expression                 go to state 48
    lambda-expression               go to state 49
    compound-expression             go to state 53


State 150

  112 parameter-decl: "const modifier" . parameter-constraint-set parameter-default-value-opt

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 213
    "`@`"                shift, and go to state 147
    "`_`"                shift, and go to state 148
    "`::`"               shift, and go to state 10

    identifier                    go to state 41
    qname                         go to state 153
    parameter-constraint-set      go to state 214
    parameter-matched-type        go to state 158
    basic-parameter-matched-type  go to state 159
    concept-expression            go to state 160


State 151

  113 parameter-decl: "mut modifier" . parameter-constraint-set parameter-default-value-opt

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 213
    "`@`"                shift, and go to state 147
    "`_`"                shift, and go to state 148
    "`::`"               shift, and go to state 10

    identifier                    go to state 41
    qname                         go to state 153
    parameter-constraint-set      go to state 215
    parameter-matched-type        go to state 158
    basic-parameter-matched-type  go to state 159
    concept-expression            go to state 160


State 152

   52 qname: identifier .
  100 parameter-decl: identifier . internal-identifier-opt "`:`" parameter-constraint-set parameter-default-value-opt
  101               | identifier . internal-identifier-opt "`:`" "const modifier" parameter-constraint-set parameter-default-value-opt
  102               | identifier . internal-identifier-opt "`:`" "mut modifier" parameter-constraint-set parameter-default-value-opt
  103               | identifier . internal-identifier-opt "`=>`" parameter-value-constraint-set

    INTERNAL_IDENTIFIER  shift, and go to state 216

    "`=>`"    reduce using rule 96 (internal-identifier-opt)
    "`:`"     reduce using rule 96 (internal-identifier-opt)
    $default  reduce using rule 52 (qname)

    internal-identifier      go to state 217
    internal-identifier-opt  go to state 218


State 153

   53 qname: qname . "`::`" identifier
  127 basic-parameter-matched-type: qname .
  128                             | qname . "`(`" argument-list-opt "`)`"

    "`::`"  shift, and go to state 92
    "`(`"   shift, and go to state 219

    $default  reduce using rule 127 (basic-parameter-matched-type)


State 154

  167 lambda-expression: fn-start-decl "`(`" parameter-list-opt . "`)`" braced-statements
  168                  | fn-start-decl "`(`" parameter-list-opt . "`)`" "`->`" type-expr braced-statements

    "`)`"  shift, and go to state 220


State 155

   93 parameter-list-opt: parameter-list .
   95 parameter-list: parameter-list . "," parameter-decl

    ","  shift, and go to state 221

    $default  reduce using rule 93 (parameter-list-opt)


State 156

   94 parameter-list: parameter-decl .

    $default  reduce using rule 94 (parameter-list)


State 157

  111 parameter-decl: parameter-constraint-set . parameter-default-value-opt
  117 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`=`"  shift, and go to state 222
    "`@`"  shift, and go to state 147

    $default  reduce using rule 98 (parameter-default-value-opt)

    parameter-default-value-opt  go to state 223
    concept-expression           go to state 224


State 158

  115 parameter-constraint-set: parameter-matched-type .

    $default  reduce using rule 115 (parameter-constraint-set)


State 159

  122 parameter-matched-type: basic-parameter-matched-type .
  123                       | basic-parameter-matched-type . "`...`"
  129 basic-parameter-matched-type: basic-parameter-matched-type . "`|`" basic-parameter-matched-type

    "`...`"  shift, and go to state 225
    "`|`"    shift, and go to state 226

    $default  reduce using rule 122 (parameter-matched-type)


State 160

  116 parameter-constraint-set: concept-expression .

    $default  reduce using rule 116 (parameter-constraint-set)


State 161

   58 fn-decl: fn-name "`(`" . parameter-list-opt "`)`"
   59        | fn-name "`(`" . parameter-list-opt "`)`" "`->`" type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 146
    "`@`"                shift, and go to state 147
    "`_`"                shift, and go to state 148
    "`=>`"               shift, and go to state 149
    "`::`"               shift, and go to state 10
    "const modifier"     shift, and go to state 150
    "mut modifier"       shift, and go to state 151

    $default  reduce using rule 92 (parameter-list-opt)

    identifier                    go to state 152
    qname                         go to state 153
    parameter-list-opt            go to state 227
    parameter-list                go to state 155
    parameter-decl                go to state 156
    parameter-constraint-set      go to state 157
    parameter-matched-type        go to state 158
    basic-parameter-matched-type  go to state 159
    concept-expression            go to state 160


State 162

   13 statement: fn-start-decl fn-decl "`=>`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    identifier               go to state 41
    qname                    go to state 42
    fn-start-decl            go to state 51
    syntax-expression        go to state 228
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 163

   35 finished-statement: fn-start-decl fn-decl braced-statements .

    $default  reduce using rule 35 (finished-statement)


State 164

   45 generic-statement: syntax-expression "`=`" syntax-expression .
  147 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  148                        | syntax-expression . "`.`" apostrophe-expression
  149                        | syntax-expression . INTEGER_INDEX
  151                        | syntax-expression . "`+`" syntax-expression
  152                        | syntax-expression . "`==`" syntax-expression
  153                        | syntax-expression . "`!=`" syntax-expression
  170 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 99
    "`==`"         shift, and go to state 101
    "`!=`"         shift, and go to state 102
    "`...`"        shift, and go to state 103
    "`.`"          shift, and go to state 104
    "`+`"          shift, and go to state 105

    $default  reduce using rule 45 (generic-statement)


State 165

  147 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  148                        | syntax-expression . "`.`" apostrophe-expression
  149                        | syntax-expression . INTEGER_INDEX
  151                        | syntax-expression . "`+`" syntax-expression
  152                        | syntax-expression . "`==`" syntax-expression
  152                        | syntax-expression "`==`" syntax-expression .
  153                        | syntax-expression . "`!=`" syntax-expression
  170 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 99
    "`.`"          shift, and go to state 104
    "`+`"          shift, and go to state 105

    $default  reduce using rule 152 (syntax-expression-wo-ii)


State 166

  147 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  148                        | syntax-expression . "`.`" apostrophe-expression
  149                        | syntax-expression . INTEGER_INDEX
  151                        | syntax-expression . "`+`" syntax-expression
  152                        | syntax-expression . "`==`" syntax-expression
  153                        | syntax-expression . "`!=`" syntax-expression
  153                        | syntax-expression "`!=`" syntax-expression .
  170 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 99
    "`.`"          shift, and go to state 104
    "`+`"          shift, and go to state 105

    $default  reduce using rule 153 (syntax-expression-wo-ii)


State 167

  147 syntax-expression-wo-ii: syntax-expression "`.`" identifier .

    $default  reduce using rule 147 (syntax-expression-wo-ii)


State 168

  148 syntax-expression-wo-ii: syntax-expression "`.`" apostrophe-expression .

    $default  reduce using rule 148 (syntax-expression-wo-ii)


State 169

  147 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  148                        | syntax-expression . "`.`" apostrophe-expression
  149                        | syntax-expression . INTEGER_INDEX
  151                        | syntax-expression . "`+`" syntax-expression
  151                        | syntax-expression "`+`" syntax-expression .
  152                        | syntax-expression . "`==`" syntax-expression
  153                        | syntax-expression . "`!=`" syntax-expression
  170 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 99
    "`.`"          shift, and go to state 104

    $default  reduce using rule 151 (syntax-expression-wo-ii)


State 170

  165 call-expression: apostrophe-expression "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 229


State 171

  164 call-expression: call-expression "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 230


State 172

  166 call-expression: lambda-expression "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 231


State 173

   75 argument-list: argument-list "," argument .

    $default  reduce using rule 75 (argument-list)


State 174

   71 expression-list: expression-list "," syntax-expression .
  147 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  148                        | syntax-expression . "`.`" apostrophe-expression
  149                        | syntax-expression . INTEGER_INDEX
  151                        | syntax-expression . "`+`" syntax-expression
  152                        | syntax-expression . "`==`" syntax-expression
  153                        | syntax-expression . "`!=`" syntax-expression
  170 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 99
    "`==`"         shift, and go to state 101
    "`!=`"         shift, and go to state 102
    "`...`"        shift, and go to state 103
    "`.`"          shift, and go to state 104
    "`+`"          shift, and go to state 105

    $default  reduce using rule 71 (expression-list)


State 175

   10 statement: EXTERN VAR identifier "`:`" . type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 134
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 135
    "`[`"                shift, and go to state 136
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26

    identifier             go to state 41
    qname                  go to state 137
    fn-start-decl          go to state 51
    apostrophe-expression  go to state 138
    call-expression        go to state 139
    lambda-expression      go to state 140
    type-expr              go to state 232


State 176

  161 new-expression: "`new`" qname "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 233


State 177

  162 new-expression: "`new`" apostrophe-expression "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 234


State 178

   48 infunction-statement: "`continue`" .

    $default  reduce using rule 48 (infunction-statement)


State 179

   47 infunction-statement: "`break`" .

    $default  reduce using rule 47 (infunction-statement)


State 180

   36 finished-statement: STRUCT . qname braced-statements
   37                   | STRUCT . qname "`(`" parameter-list-opt "`)`" braced-statements

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 10

    identifier  go to state 41
    qname       go to state 235


State 181

   28 finished-infunction-statement-any: infunction-statement-any . "`;`"
   39 infunction-statement-set: infunction-statement-any .

    "`;`"  shift, and go to state 236

    $default  reduce using rule 39 (infunction-statement-set)


State 182

   24 infunction-statement-any: finished-infunction-statement-any . infunction-statement
   26 finished-infunction-statement-any: finished-infunction-statement-any . "`;`"
   27                                  | finished-infunction-statement-any . finished-statement
   40 infunction-statement-set: finished-infunction-statement-any .

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`;`"                shift, and go to state 237
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    LET                  shift, and go to state 16
    "`new`"              shift, and go to state 18
    "`while`"            shift, and go to state 19
    "`for`"              shift, and go to state 20
    "`if`"               shift, and go to state 21
    "`continue`"         shift, and go to state 178
    "`break`"            shift, and go to state 179
    "`return`"           shift, and go to state 22
    USING                shift, and go to state 23
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    ENUM                 shift, and go to state 27
    STRUCT               shift, and go to state 180
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    $default  reduce using rule 40 (infunction-statement-set)

    let-decl                      go to state 36
    let-decl-start                go to state 37
    let-decl-start-with-opt-type  go to state 38
    finished-statement            go to state 238
    generic-statement             go to state 185
    infunction-statement          go to state 239
    identifier                    go to state 41
    qname                         go to state 42
    fn-start-decl                 go to state 187
    syntax-expression             go to state 44
    syntax-expression-wo-ii       go to state 45
    apostrophe-expression         go to state 46
    new-expression                go to state 47
    call-expression               go to state 48
    lambda-expression             go to state 49
    compound-expression           go to state 50


State 183

   25 finished-infunction-statement-any: finished-statement .

    $default  reduce using rule 25 (finished-infunction-statement-any)


State 184

   29 braced-statements: "`{`" infunction-statement-set . "`}`"

    "`}`"  shift, and go to state 240


State 185

   46 infunction-statement: generic-statement .

    $default  reduce using rule 46 (infunction-statement)


State 186

   23 infunction-statement-any: infunction-statement .

    $default  reduce using rule 23 (infunction-statement-any)


State 187

   35 finished-statement: fn-start-decl . fn-decl braced-statements
  167 lambda-expression: fn-start-decl . "`(`" parameter-list-opt "`)`" braced-statements
  168                  | fn-start-decl . "`(`" parameter-list-opt "`)`" "`->`" type-expr braced-statements

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 10
    "`(`"       shift, and go to state 94
    "`new`"     shift, and go to state 95

    identifier  go to state 41
    qname       go to state 96
    fn-name     go to state 97
    fn-decl     go to state 241


State 188

   31 finished-statement: "`while`" syntax-expression "`;`" syntax-expression . braced-statements
  147 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  148                        | syntax-expression . "`.`" apostrophe-expression
  149                        | syntax-expression . INTEGER_INDEX
  151                        | syntax-expression . "`+`" syntax-expression
  152                        | syntax-expression . "`==`" syntax-expression
  153                        | syntax-expression . "`!=`" syntax-expression
  170 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 99
    "`==`"         shift, and go to state 101
    "`!=`"         shift, and go to state 102
    "`...`"        shift, and go to state 103
    "`{`"          shift, and go to state 123
    "`.`"          shift, and go to state 104
    "`+`"          shift, and go to state 105

    braced-statements  go to state 242


State 189

   32 finished-statement: "`for`" syntax-expression "`in`" syntax-expression . braced-statements
  147 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  148                        | syntax-expression . "`.`" apostrophe-expression
  149                        | syntax-expression . INTEGER_INDEX
  151                        | syntax-expression . "`+`" syntax-expression
  152                        | syntax-expression . "`==`" syntax-expression
  153                        | syntax-expression . "`!=`" syntax-expression
  170 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 99
    "`==`"         shift, and go to state 101
    "`!=`"         shift, and go to state 102
    "`...`"        shift, and go to state 103
    "`{`"          shift, and go to state 123
    "`.`"          shift, and go to state 104
    "`+`"          shift, and go to state 105

    braced-statements  go to state 243


State 190

   34 finished-statement: "`if`" syntax-expression braced-statements "`else`" . braced-statements

    "`{`"  shift, and go to state 123

    braced-statements  go to state 244


State 191

   68 using-decl: qname "`=>`" syntax-expression .
  147 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  148                        | syntax-expression . "`.`" apostrophe-expression
  149                        | syntax-expression . INTEGER_INDEX
  151                        | syntax-expression . "`+`" syntax-expression
  152                        | syntax-expression . "`==`" syntax-expression
  153                        | syntax-expression . "`!=`" syntax-expression
  170 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 99
    "`==`"         shift, and go to state 101
    "`!=`"         shift, and go to state 102
    "`...`"        shift, and go to state 103
    "`.`"          shift, and go to state 104
    "`+`"          shift, and go to state 105

    $default  reduce using rule 68 (using-decl)


State 192

   69 using-decl: qname "`(`" parameter-list-opt . "`)`" "`=>`" syntax-expression

    "`)`"  shift, and go to state 245


State 193

   65 case-decl: identifier .

    $default  reduce using rule 65 (case-decl)


State 194

   60 enum-decl: qname "`{`" case-list-opt . "`}`"

    "`}`"  shift, and go to state 246


State 195

   62 case-list-opt: case-list .
   64 case-list: case-list . "," case-decl

    ","  shift, and go to state 247

    $default  reduce using rule 62 (case-list-opt)


State 196

   63 case-list: case-decl .

    $default  reduce using rule 63 (case-list)


State 197

   66 struct-decl: qname "`=>`" "`(`" . field-list-opt "`)`"

    IDENTIFIER  shift, and go to state 2

    $default  reduce using rule 80 (field-list-opt)

    identifier      go to state 248
    field-list-opt  go to state 249
    field-list      go to state 250
    field           go to state 251


State 198

   37 finished-statement: STRUCT qname "`(`" parameter-list-opt . "`)`" braced-statements
   67 struct-decl: qname "`(`" parameter-list-opt . "`)`" "`=>`" "`(`" field-list-opt "`)`"

    "`)`"  shift, and go to state 252


State 199

  175 type-expr: "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 253


State 200

  174 type-expr: "`[`" type-expr . "`]`"
  176          | type-expr . "`[`" INTEGER "`]`"
  177          | type-expr . "`|`" type-expr
  178          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 201
    "`[`"   shift, and go to state 202
    "`]`"   shift, and go to state 254
    "`|`"   shift, and go to state 203


State 201

  178 type-expr: type-expr "`->`" . type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 134
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 135
    "`[`"                shift, and go to state 136
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26

    identifier             go to state 41
    qname                  go to state 137
    fn-start-decl          go to state 51
    apostrophe-expression  go to state 138
    call-expression        go to state 139
    lambda-expression      go to state 140
    type-expr              go to state 255


State 202

  176 type-expr: type-expr "`[`" . INTEGER "`]`"

    INTEGER  shift, and go to state 256


State 203

  177 type-expr: type-expr "`|`" . type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 134
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 135
    "`[`"                shift, and go to state 136
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26

    identifier             go to state 41
    qname                  go to state 137
    fn-start-decl          go to state 51
    apostrophe-expression  go to state 138
    call-expression        go to state 139
    lambda-expression      go to state 140
    type-expr              go to state 257


State 204

  163 call-expression: qname "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 163 (call-expression)


State 205

  107 parameter-decl: INTERNAL_IDENTIFIER "`=>`" . parameter-value-constraint-set

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`@`"                shift, and go to state 147
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    identifier                      go to state 41
    qname                           go to state 42
    fn-start-decl                   go to state 51
    parameter-value-constraint-set  go to state 258
    parameter-matched-value         go to state 210
    concept-expression              go to state 211
    syntax-expression               go to state 212
    syntax-expression-wo-ii         go to state 45
    apostrophe-expression           go to state 46
    new-expression                  go to state 47
    call-expression                 go to state 48
    lambda-expression               go to state 49
    compound-expression             go to state 53


State 206

  108 parameter-decl: INTERNAL_IDENTIFIER "`...`" . "`:`" parameter-constraint-set
  109               | INTERNAL_IDENTIFIER "`...`" . "`:`" "const modifier" parameter-constraint-set
  110               | INTERNAL_IDENTIFIER "`...`" . "`:`" "mut modifier" parameter-constraint-set
  125 parameter-matched-type: INTERNAL_IDENTIFIER "`...`" .

    "`:`"  shift, and go to state 259

    $default  reduce using rule 125 (parameter-matched-type)


State 207

  104 parameter-decl: INTERNAL_IDENTIFIER "`:`" . parameter-constraint-set parameter-default-value-opt
  105               | INTERNAL_IDENTIFIER "`:`" . "const modifier" parameter-constraint-set parameter-default-value-opt
  106               | INTERNAL_IDENTIFIER "`:`" . "mut modifier" parameter-constraint-set parameter-default-value-opt

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 213
    "`@`"                shift, and go to state 147
    "`_`"                shift, and go to state 148
    "`::`"               shift, and go to state 10
    "const modifier"     shift, and go to state 260
    "mut modifier"       shift, and go to state 261

    identifier                    go to state 41
    qname                         go to state 153
    parameter-constraint-set      go to state 262
    parameter-matched-type        go to state 158
    basic-parameter-matched-type  go to state 159
    concept-expression            go to state 160


State 208

   53 qname: qname . "`::`" identifier
  130 concept-expression: "`@`" qname .

    "`::`"  shift, and go to state 92

    $default  reduce using rule 130 (concept-expression)


State 209

  114 parameter-decl: "`=>`" parameter-value-constraint-set .
  120 parameter-value-constraint-set: parameter-value-constraint-set . concept-expression

    "`@`"  shift, and go to state 147

    $default  reduce using rule 114 (parameter-decl)

    concept-expression  go to state 263


State 210

  118 parameter-value-constraint-set: parameter-matched-value .

    $default  reduce using rule 118 (parameter-value-constraint-set)


State 211

  119 parameter-value-constraint-set: concept-expression .

    $default  reduce using rule 119 (parameter-value-constraint-set)


State 212

  121 parameter-matched-value: syntax-expression .
  147 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  148                        | syntax-expression . "`.`" apostrophe-expression
  149                        | syntax-expression . INTEGER_INDEX
  151                        | syntax-expression . "`+`" syntax-expression
  152                        | syntax-expression . "`==`" syntax-expression
  153                        | syntax-expression . "`!=`" syntax-expression
  170 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 99
    "`==`"         shift, and go to state 101
    "`!=`"         shift, and go to state 102
    "`...`"        shift, and go to state 103
    "`.`"          shift, and go to state 104
    "`+`"          shift, and go to state 105

    $default  reduce using rule 121 (parameter-matched-value)


State 213

  124 parameter-matched-type: INTERNAL_IDENTIFIER .
  125                       | INTERNAL_IDENTIFIER . "`...`"

    "`...`"  shift, and go to state 264

    $default  reduce using rule 124 (parameter-matched-type)


State 214

  112 parameter-decl: "const modifier" parameter-constraint-set . parameter-default-value-opt
  117 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`=`"  shift, and go to state 222
    "`@`"  shift, and go to state 147

    $default  reduce using rule 98 (parameter-default-value-opt)

    parameter-default-value-opt  go to state 265
    concept-expression           go to state 224


State 215

  113 parameter-decl: "mut modifier" parameter-constraint-set . parameter-default-value-opt
  117 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`=`"  shift, and go to state 222
    "`@`"  shift, and go to state 147

    $default  reduce using rule 98 (parameter-default-value-opt)

    parameter-default-value-opt  go to state 266
    concept-expression           go to state 224


State 216

   50 internal-identifier: INTERNAL_IDENTIFIER .

    $default  reduce using rule 50 (internal-identifier)


State 217

   97 internal-identifier-opt: internal-identifier .

    $default  reduce using rule 97 (internal-identifier-opt)


State 218

  100 parameter-decl: identifier internal-identifier-opt . "`:`" parameter-constraint-set parameter-default-value-opt
  101               | identifier internal-identifier-opt . "`:`" "const modifier" parameter-constraint-set parameter-default-value-opt
  102               | identifier internal-identifier-opt . "`:`" "mut modifier" parameter-constraint-set parameter-default-value-opt
  103               | identifier internal-identifier-opt . "`=>`" parameter-value-constraint-set

    "`=>`"  shift, and go to state 267
    "`:`"   shift, and go to state 268


State 219

  128 basic-parameter-matched-type: qname "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    $default  reduce using rule 72 (argument-list-opt)

    identifier               go to state 55
    qname                    go to state 42
    fn-start-decl            go to state 51
    argument-list-opt        go to state 269
    argument-list            go to state 145
    argument                 go to state 57
    argument-name            go to state 58
    syntax-expression        go to state 59
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 220

  167 lambda-expression: fn-start-decl "`(`" parameter-list-opt "`)`" . braced-statements
  168                  | fn-start-decl "`(`" parameter-list-opt "`)`" . "`->`" type-expr braced-statements

    "`->`"  shift, and go to state 270
    "`{`"   shift, and go to state 123

    braced-statements  go to state 271


State 221

   95 parameter-list: parameter-list "," . parameter-decl

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 146
    "`@`"                shift, and go to state 147
    "`_`"                shift, and go to state 148
    "`=>`"               shift, and go to state 149
    "`::`"               shift, and go to state 10
    "const modifier"     shift, and go to state 150
    "mut modifier"       shift, and go to state 151

    identifier                    go to state 152
    qname                         go to state 153
    parameter-decl                go to state 272
    parameter-constraint-set      go to state 157
    parameter-matched-type        go to state 158
    basic-parameter-matched-type  go to state 159
    concept-expression            go to state 160


State 222

   99 parameter-default-value-opt: "`=`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    identifier               go to state 41
    qname                    go to state 42
    fn-start-decl            go to state 51
    syntax-expression        go to state 273
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 223

  111 parameter-decl: parameter-constraint-set parameter-default-value-opt .

    $default  reduce using rule 111 (parameter-decl)


State 224

  117 parameter-constraint-set: parameter-constraint-set concept-expression .

    $default  reduce using rule 117 (parameter-constraint-set)


State 225

  123 parameter-matched-type: basic-parameter-matched-type "`...`" .

    $default  reduce using rule 123 (parameter-matched-type)


State 226

  129 basic-parameter-matched-type: basic-parameter-matched-type "`|`" . basic-parameter-matched-type

    IDENTIFIER  shift, and go to state 2
    "`_`"       shift, and go to state 148
    "`::`"      shift, and go to state 10

    identifier                    go to state 41
    qname                         go to state 153
    basic-parameter-matched-type  go to state 274


State 227

   58 fn-decl: fn-name "`(`" parameter-list-opt . "`)`"
   59        | fn-name "`(`" parameter-list-opt . "`)`" "`->`" type-expr

    "`)`"  shift, and go to state 275


State 228

   13 statement: fn-start-decl fn-decl "`=>`" syntax-expression .
  147 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  148                        | syntax-expression . "`.`" apostrophe-expression
  149                        | syntax-expression . INTEGER_INDEX
  151                        | syntax-expression . "`+`" syntax-expression
  152                        | syntax-expression . "`==`" syntax-expression
  153                        | syntax-expression . "`!=`" syntax-expression
  170 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 99
    "`==`"         shift, and go to state 101
    "`!=`"         shift, and go to state 102
    "`...`"        shift, and go to state 103
    "`.`"          shift, and go to state 104
    "`+`"          shift, and go to state 105

    $default  reduce using rule 13 (statement)


State 229

  165 call-expression: apostrophe-expression "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 165 (call-expression)


State 230

  164 call-expression: call-expression "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 164 (call-expression)


State 231

  166 call-expression: lambda-expression "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 166 (call-expression)


State 232

   10 statement: EXTERN VAR identifier "`:`" type-expr .
  176 type-expr: type-expr . "`[`" INTEGER "`]`"
  177          | type-expr . "`|`" type-expr
  178          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 201
    "`[`"   shift, and go to state 202
    "`|`"   shift, and go to state 203

    $default  reduce using rule 10 (statement)


State 233

  161 new-expression: "`new`" qname "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 161 (new-expression)


State 234

  162 new-expression: "`new`" apostrophe-expression "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 162 (new-expression)


State 235

   36 finished-statement: STRUCT qname . braced-statements
   37                   | STRUCT qname . "`(`" parameter-list-opt "`)`" braced-statements
   53 qname: qname . "`::`" identifier

    "`::`"  shift, and go to state 92
    "`(`"   shift, and go to state 276
    "`{`"   shift, and go to state 123

    braced-statements  go to state 133


State 236

   28 finished-infunction-statement-any: infunction-statement-any "`;`" .

    $default  reduce using rule 28 (finished-infunction-statement-any)


State 237

   26 finished-infunction-statement-any: finished-infunction-statement-any "`;`" .

    $default  reduce using rule 26 (finished-infunction-statement-any)


State 238

   27 finished-infunction-statement-any: finished-infunction-statement-any finished-statement .

    $default  reduce using rule 27 (finished-infunction-statement-any)


State 239

   24 infunction-statement-any: finished-infunction-statement-any infunction-statement .

    $default  reduce using rule 24 (infunction-statement-any)


State 240

   29 braced-statements: "`{`" infunction-statement-set "`}`" .

    $default  reduce using rule 29 (braced-statements)


State 241

   35 finished-statement: fn-start-decl fn-decl . braced-statements

    "`{`"  shift, and go to state 123

    braced-statements  go to state 163


State 242

   31 finished-statement: "`while`" syntax-expression "`;`" syntax-expression braced-statements .

    $default  reduce using rule 31 (finished-statement)


State 243

   32 finished-statement: "`for`" syntax-expression "`in`" syntax-expression braced-statements .

    $default  reduce using rule 32 (finished-statement)


State 244

   34 finished-statement: "`if`" syntax-expression braced-statements "`else`" braced-statements .

    $default  reduce using rule 34 (finished-statement)


State 245

   69 using-decl: qname "`(`" parameter-list-opt "`)`" . "`=>`" syntax-expression

    "`=>`"  shift, and go to state 277


State 246

   60 enum-decl: qname "`{`" case-list-opt "`}`" .

    $default  reduce using rule 60 (enum-decl)


State 247

   64 case-list: case-list "," . case-decl

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 193
    case-decl   go to state 278


State 248

   86 field: identifier . "`:`" field-type-expr field-default-value-opt
   87      | identifier . "`=>`" field-type-expr field-default-value-opt

    "`=>`"  shift, and go to state 279
    "`:`"   shift, and go to state 280


State 249

   66 struct-decl: qname "`=>`" "`(`" field-list-opt . "`)`"

    "`)`"  shift, and go to state 281


State 250

   81 field-list-opt: field-list .
   83 field-list: field-list . "," field

    ","  shift, and go to state 282

    $default  reduce using rule 81 (field-list-opt)


State 251

   82 field-list: field .

    $default  reduce using rule 82 (field-list)


State 252

   37 finished-statement: STRUCT qname "`(`" parameter-list-opt "`)`" . braced-statements
   67 struct-decl: qname "`(`" parameter-list-opt "`)`" . "`=>`" "`(`" field-list-opt "`)`"

    "`=>`"  shift, and go to state 283
    "`{`"   shift, and go to state 123

    braced-statements  go to state 284


State 253

  175 type-expr: "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 175 (type-expr)


State 254

  174 type-expr: "`[`" type-expr "`]`" .

    $default  reduce using rule 174 (type-expr)


State 255

  176 type-expr: type-expr . "`[`" INTEGER "`]`"
  177          | type-expr . "`|`" type-expr
  178          | type-expr . "`->`" type-expr
  178          | type-expr "`->`" type-expr .

    $default  reduce using rule 178 (type-expr)


State 256

  176 type-expr: type-expr "`[`" INTEGER . "`]`"

    "`]`"  shift, and go to state 285


State 257

  176 type-expr: type-expr . "`[`" INTEGER "`]`"
  177          | type-expr . "`|`" type-expr
  177          | type-expr "`|`" type-expr .
  178          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 201
    "`[`"   shift, and go to state 202

    $default  reduce using rule 177 (type-expr)


State 258

  107 parameter-decl: INTERNAL_IDENTIFIER "`=>`" parameter-value-constraint-set .
  120 parameter-value-constraint-set: parameter-value-constraint-set . concept-expression

    "`@`"  shift, and go to state 147

    $default  reduce using rule 107 (parameter-decl)

    concept-expression  go to state 263


State 259

  108 parameter-decl: INTERNAL_IDENTIFIER "`...`" "`:`" . parameter-constraint-set
  109               | INTERNAL_IDENTIFIER "`...`" "`:`" . "const modifier" parameter-constraint-set
  110               | INTERNAL_IDENTIFIER "`...`" "`:`" . "mut modifier" parameter-constraint-set

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 213
    "`@`"                shift, and go to state 147
    "`_`"                shift, and go to state 148
    "`::`"               shift, and go to state 10
    "const modifier"     shift, and go to state 286
    "mut modifier"       shift, and go to state 287

    identifier                    go to state 41
    qname                         go to state 153
    parameter-constraint-set      go to state 288
    parameter-matched-type        go to state 158
    basic-parameter-matched-type  go to state 159
    concept-expression            go to state 160


State 260

  105 parameter-decl: INTERNAL_IDENTIFIER "`:`" "const modifier" . parameter-constraint-set parameter-default-value-opt

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 213
    "`@`"                shift, and go to state 147
    "`_`"                shift, and go to state 148
    "`::`"               shift, and go to state 10

    identifier                    go to state 41
    qname                         go to state 153
    parameter-constraint-set      go to state 289
    parameter-matched-type        go to state 158
    basic-parameter-matched-type  go to state 159
    concept-expression            go to state 160


State 261

  106 parameter-decl: INTERNAL_IDENTIFIER "`:`" "mut modifier" . parameter-constraint-set parameter-default-value-opt

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 213
    "`@`"                shift, and go to state 147
    "`_`"                shift, and go to state 148
    "`::`"               shift, and go to state 10

    identifier                    go to state 41
    qname                         go to state 153
    parameter-constraint-set      go to state 290
    parameter-matched-type        go to state 158
    basic-parameter-matched-type  go to state 159
    concept-expression            go to state 160


State 262

  104 parameter-decl: INTERNAL_IDENTIFIER "`:`" parameter-constraint-set . parameter-default-value-opt
  117 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`=`"  shift, and go to state 222
    "`@`"  shift, and go to state 147

    $default  reduce using rule 98 (parameter-default-value-opt)

    parameter-default-value-opt  go to state 291
    concept-expression           go to state 224


State 263

  120 parameter-value-constraint-set: parameter-value-constraint-set concept-expression .

    $default  reduce using rule 120 (parameter-value-constraint-set)


State 264

  125 parameter-matched-type: INTERNAL_IDENTIFIER "`...`" .

    $default  reduce using rule 125 (parameter-matched-type)


State 265

  112 parameter-decl: "const modifier" parameter-constraint-set parameter-default-value-opt .

    $default  reduce using rule 112 (parameter-decl)


State 266

  113 parameter-decl: "mut modifier" parameter-constraint-set parameter-default-value-opt .

    $default  reduce using rule 113 (parameter-decl)


State 267

  103 parameter-decl: identifier internal-identifier-opt "`=>`" . parameter-value-constraint-set

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`@`"                shift, and go to state 147
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    identifier                      go to state 41
    qname                           go to state 42
    fn-start-decl                   go to state 51
    parameter-value-constraint-set  go to state 292
    parameter-matched-value         go to state 210
    concept-expression              go to state 211
    syntax-expression               go to state 212
    syntax-expression-wo-ii         go to state 45
    apostrophe-expression           go to state 46
    new-expression                  go to state 47
    call-expression                 go to state 48
    lambda-expression               go to state 49
    compound-expression             go to state 53


State 268

  100 parameter-decl: identifier internal-identifier-opt "`:`" . parameter-constraint-set parameter-default-value-opt
  101               | identifier internal-identifier-opt "`:`" . "const modifier" parameter-constraint-set parameter-default-value-opt
  102               | identifier internal-identifier-opt "`:`" . "mut modifier" parameter-constraint-set parameter-default-value-opt

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 213
    "`@`"                shift, and go to state 147
    "`_`"                shift, and go to state 148
    "`::`"               shift, and go to state 10
    "const modifier"     shift, and go to state 293
    "mut modifier"       shift, and go to state 294

    identifier                    go to state 41
    qname                         go to state 153
    parameter-constraint-set      go to state 295
    parameter-matched-type        go to state 158
    basic-parameter-matched-type  go to state 159
    concept-expression            go to state 160


State 269

  128 basic-parameter-matched-type: qname "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 296


State 270

  168 lambda-expression: fn-start-decl "`(`" parameter-list-opt "`)`" "`->`" . type-expr braced-statements

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 134
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 135
    "`[`"                shift, and go to state 136
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26

    identifier             go to state 41
    qname                  go to state 137
    fn-start-decl          go to state 51
    apostrophe-expression  go to state 138
    call-expression        go to state 139
    lambda-expression      go to state 140
    type-expr              go to state 297


State 271

  167 lambda-expression: fn-start-decl "`(`" parameter-list-opt "`)`" braced-statements .

    $default  reduce using rule 167 (lambda-expression)


State 272

   95 parameter-list: parameter-list "," parameter-decl .

    $default  reduce using rule 95 (parameter-list)


State 273

   99 parameter-default-value-opt: "`=`" syntax-expression .
  147 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  148                        | syntax-expression . "`.`" apostrophe-expression
  149                        | syntax-expression . INTEGER_INDEX
  151                        | syntax-expression . "`+`" syntax-expression
  152                        | syntax-expression . "`==`" syntax-expression
  153                        | syntax-expression . "`!=`" syntax-expression
  170 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 99
    "`==`"         shift, and go to state 101
    "`!=`"         shift, and go to state 102
    "`...`"        shift, and go to state 103
    "`.`"          shift, and go to state 104
    "`+`"          shift, and go to state 105

    $default  reduce using rule 99 (parameter-default-value-opt)


State 274

  129 basic-parameter-matched-type: basic-parameter-matched-type . "`|`" basic-parameter-matched-type
  129                             | basic-parameter-matched-type "`|`" basic-parameter-matched-type .

    $default  reduce using rule 129 (basic-parameter-matched-type)


State 275

   58 fn-decl: fn-name "`(`" parameter-list-opt "`)`" .
   59        | fn-name "`(`" parameter-list-opt "`)`" . "`->`" type-expr

    "`->`"  shift, and go to state 298

    $default  reduce using rule 58 (fn-decl)


State 276

   37 finished-statement: STRUCT qname "`(`" . parameter-list-opt "`)`" braced-statements

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 146
    "`@`"                shift, and go to state 147
    "`_`"                shift, and go to state 148
    "`=>`"               shift, and go to state 149
    "`::`"               shift, and go to state 10
    "const modifier"     shift, and go to state 150
    "mut modifier"       shift, and go to state 151

    $default  reduce using rule 92 (parameter-list-opt)

    identifier                    go to state 152
    qname                         go to state 153
    parameter-list-opt            go to state 299
    parameter-list                go to state 155
    parameter-decl                go to state 156
    parameter-constraint-set      go to state 157
    parameter-matched-type        go to state 158
    basic-parameter-matched-type  go to state 159
    concept-expression            go to state 160


State 277

   69 using-decl: qname "`(`" parameter-list-opt "`)`" "`=>`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    identifier               go to state 41
    qname                    go to state 42
    fn-start-decl            go to state 51
    syntax-expression        go to state 300
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 278

   64 case-list: case-list "," case-decl .

    $default  reduce using rule 64 (case-list)


State 279

   87 field: identifier "`=>`" . field-type-expr field-default-value-opt

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 301
    "`::`"               shift, and go to state 10

    identifier       go to state 41
    qname            go to state 302
    field-type-expr  go to state 303


State 280

   86 field: identifier "`:`" . field-type-expr field-default-value-opt

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 301
    "`::`"               shift, and go to state 10

    identifier       go to state 41
    qname            go to state 302
    field-type-expr  go to state 304


State 281

   66 struct-decl: qname "`=>`" "`(`" field-list-opt "`)`" .

    $default  reduce using rule 66 (struct-decl)


State 282

   83 field-list: field-list "," . field

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 248
    field       go to state 305


State 283

   67 struct-decl: qname "`(`" parameter-list-opt "`)`" "`=>`" . "`(`" field-list-opt "`)`"

    "`(`"  shift, and go to state 306


State 284

   37 finished-statement: STRUCT qname "`(`" parameter-list-opt "`)`" braced-statements .

    $default  reduce using rule 37 (finished-statement)


State 285

  176 type-expr: type-expr "`[`" INTEGER "`]`" .

    $default  reduce using rule 176 (type-expr)


State 286

  109 parameter-decl: INTERNAL_IDENTIFIER "`...`" "`:`" "const modifier" . parameter-constraint-set

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 213
    "`@`"                shift, and go to state 147
    "`_`"                shift, and go to state 148
    "`::`"               shift, and go to state 10

    identifier                    go to state 41
    qname                         go to state 153
    parameter-constraint-set      go to state 307
    parameter-matched-type        go to state 158
    basic-parameter-matched-type  go to state 159
    concept-expression            go to state 160


State 287

  110 parameter-decl: INTERNAL_IDENTIFIER "`...`" "`:`" "mut modifier" . parameter-constraint-set

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 213
    "`@`"                shift, and go to state 147
    "`_`"                shift, and go to state 148
    "`::`"               shift, and go to state 10

    identifier                    go to state 41
    qname                         go to state 153
    parameter-constraint-set      go to state 308
    parameter-matched-type        go to state 158
    basic-parameter-matched-type  go to state 159
    concept-expression            go to state 160


State 288

  108 parameter-decl: INTERNAL_IDENTIFIER "`...`" "`:`" parameter-constraint-set .
  117 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`@`"  shift, and go to state 147

    $default  reduce using rule 108 (parameter-decl)

    concept-expression  go to state 224


State 289

  105 parameter-decl: INTERNAL_IDENTIFIER "`:`" "const modifier" parameter-constraint-set . parameter-default-value-opt
  117 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`=`"  shift, and go to state 222
    "`@`"  shift, and go to state 147

    $default  reduce using rule 98 (parameter-default-value-opt)

    parameter-default-value-opt  go to state 309
    concept-expression           go to state 224


State 290

  106 parameter-decl: INTERNAL_IDENTIFIER "`:`" "mut modifier" parameter-constraint-set . parameter-default-value-opt
  117 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`=`"  shift, and go to state 222
    "`@`"  shift, and go to state 147

    $default  reduce using rule 98 (parameter-default-value-opt)

    parameter-default-value-opt  go to state 310
    concept-expression           go to state 224


State 291

  104 parameter-decl: INTERNAL_IDENTIFIER "`:`" parameter-constraint-set parameter-default-value-opt .

    $default  reduce using rule 104 (parameter-decl)


State 292

  103 parameter-decl: identifier internal-identifier-opt "`=>`" parameter-value-constraint-set .
  120 parameter-value-constraint-set: parameter-value-constraint-set . concept-expression

    "`@`"  shift, and go to state 147

    $default  reduce using rule 103 (parameter-decl)

    concept-expression  go to state 263


State 293

  101 parameter-decl: identifier internal-identifier-opt "`:`" "const modifier" . parameter-constraint-set parameter-default-value-opt

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 213
    "`@`"                shift, and go to state 147
    "`_`"                shift, and go to state 148
    "`::`"               shift, and go to state 10

    identifier                    go to state 41
    qname                         go to state 153
    parameter-constraint-set      go to state 311
    parameter-matched-type        go to state 158
    basic-parameter-matched-type  go to state 159
    concept-expression            go to state 160


State 294

  102 parameter-decl: identifier internal-identifier-opt "`:`" "mut modifier" . parameter-constraint-set parameter-default-value-opt

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 213
    "`@`"                shift, and go to state 147
    "`_`"                shift, and go to state 148
    "`::`"               shift, and go to state 10

    identifier                    go to state 41
    qname                         go to state 153
    parameter-constraint-set      go to state 312
    parameter-matched-type        go to state 158
    basic-parameter-matched-type  go to state 159
    concept-expression            go to state 160


State 295

  100 parameter-decl: identifier internal-identifier-opt "`:`" parameter-constraint-set . parameter-default-value-opt
  117 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`=`"  shift, and go to state 222
    "`@`"  shift, and go to state 147

    $default  reduce using rule 98 (parameter-default-value-opt)

    parameter-default-value-opt  go to state 313
    concept-expression           go to state 224


State 296

  128 basic-parameter-matched-type: qname "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 128 (basic-parameter-matched-type)


State 297

  168 lambda-expression: fn-start-decl "`(`" parameter-list-opt "`)`" "`->`" type-expr . braced-statements
  176 type-expr: type-expr . "`[`" INTEGER "`]`"
  177          | type-expr . "`|`" type-expr
  178          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 201
    "`{`"   shift, and go to state 123
    "`[`"   shift, and go to state 202
    "`|`"   shift, and go to state 203

    braced-statements  go to state 314


State 298

   59 fn-decl: fn-name "`(`" parameter-list-opt "`)`" "`->`" . type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 134
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 135
    "`[`"                shift, and go to state 136
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26

    identifier             go to state 41
    qname                  go to state 137
    fn-start-decl          go to state 51
    apostrophe-expression  go to state 138
    call-expression        go to state 139
    lambda-expression      go to state 140
    type-expr              go to state 315


State 299

   37 finished-statement: STRUCT qname "`(`" parameter-list-opt . "`)`" braced-statements

    "`)`"  shift, and go to state 316


State 300

   69 using-decl: qname "`(`" parameter-list-opt "`)`" "`=>`" syntax-expression .
  147 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  148                        | syntax-expression . "`.`" apostrophe-expression
  149                        | syntax-expression . INTEGER_INDEX
  151                        | syntax-expression . "`+`" syntax-expression
  152                        | syntax-expression . "`==`" syntax-expression
  153                        | syntax-expression . "`!=`" syntax-expression
  170 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 99
    "`==`"         shift, and go to state 101
    "`!=`"         shift, and go to state 102
    "`...`"        shift, and go to state 103
    "`.`"          shift, and go to state 104
    "`+`"          shift, and go to state 105

    $default  reduce using rule 69 (using-decl)


State 301

   90 field-type-expr: INTERNAL_IDENTIFIER .

    $default  reduce using rule 90 (field-type-expr)


State 302

   53 qname: qname . "`::`" identifier
   88 field-type-expr: qname .
   89                | qname . "`(`" argument-list-opt "`)`"

    "`::`"  shift, and go to state 92
    "`(`"   shift, and go to state 317

    $default  reduce using rule 88 (field-type-expr)


State 303

   87 field: identifier "`=>`" field-type-expr . field-default-value-opt
   91 field-type-expr: field-type-expr . "`|`" field-type-expr

    "`=`"  shift, and go to state 318
    "`|`"  shift, and go to state 319

    $default  reduce using rule 84 (field-default-value-opt)

    field-default-value-opt  go to state 320


State 304

   86 field: identifier "`:`" field-type-expr . field-default-value-opt
   91 field-type-expr: field-type-expr . "`|`" field-type-expr

    "`=`"  shift, and go to state 318
    "`|`"  shift, and go to state 319

    $default  reduce using rule 84 (field-default-value-opt)

    field-default-value-opt  go to state 321


State 305

   83 field-list: field-list "," field .

    $default  reduce using rule 83 (field-list)


State 306

   67 struct-decl: qname "`(`" parameter-list-opt "`)`" "`=>`" "`(`" . field-list-opt "`)`"

    IDENTIFIER  shift, and go to state 2

    $default  reduce using rule 80 (field-list-opt)

    identifier      go to state 248
    field-list-opt  go to state 322
    field-list      go to state 250
    field           go to state 251


State 307

  109 parameter-decl: INTERNAL_IDENTIFIER "`...`" "`:`" "const modifier" parameter-constraint-set .
  117 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`@`"  shift, and go to state 147

    $default  reduce using rule 109 (parameter-decl)

    concept-expression  go to state 224


State 308

  110 parameter-decl: INTERNAL_IDENTIFIER "`...`" "`:`" "mut modifier" parameter-constraint-set .
  117 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`@`"  shift, and go to state 147

    $default  reduce using rule 110 (parameter-decl)

    concept-expression  go to state 224


State 309

  105 parameter-decl: INTERNAL_IDENTIFIER "`:`" "const modifier" parameter-constraint-set parameter-default-value-opt .

    $default  reduce using rule 105 (parameter-decl)


State 310

  106 parameter-decl: INTERNAL_IDENTIFIER "`:`" "mut modifier" parameter-constraint-set parameter-default-value-opt .

    $default  reduce using rule 106 (parameter-decl)


State 311

  101 parameter-decl: identifier internal-identifier-opt "`:`" "const modifier" parameter-constraint-set . parameter-default-value-opt
  117 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`=`"  shift, and go to state 222
    "`@`"  shift, and go to state 147

    $default  reduce using rule 98 (parameter-default-value-opt)

    parameter-default-value-opt  go to state 323
    concept-expression           go to state 224


State 312

  102 parameter-decl: identifier internal-identifier-opt "`:`" "mut modifier" parameter-constraint-set . parameter-default-value-opt
  117 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`=`"  shift, and go to state 222
    "`@`"  shift, and go to state 147

    $default  reduce using rule 98 (parameter-default-value-opt)

    parameter-default-value-opt  go to state 324
    concept-expression           go to state 224


State 313

  100 parameter-decl: identifier internal-identifier-opt "`:`" parameter-constraint-set parameter-default-value-opt .

    $default  reduce using rule 100 (parameter-decl)


State 314

  168 lambda-expression: fn-start-decl "`(`" parameter-list-opt "`)`" "`->`" type-expr braced-statements .

    $default  reduce using rule 168 (lambda-expression)


State 315

   59 fn-decl: fn-name "`(`" parameter-list-opt "`)`" "`->`" type-expr .
  176 type-expr: type-expr . "`[`" INTEGER "`]`"
  177          | type-expr . "`|`" type-expr
  178          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 201
    "`[`"   shift, and go to state 202
    "`|`"   shift, and go to state 203

    $default  reduce using rule 59 (fn-decl)


State 316

   37 finished-statement: STRUCT qname "`(`" parameter-list-opt "`)`" . braced-statements

    "`{`"  shift, and go to state 123

    braced-statements  go to state 284


State 317

   89 field-type-expr: qname "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    $default  reduce using rule 72 (argument-list-opt)

    identifier               go to state 55
    qname                    go to state 42
    fn-start-decl            go to state 51
    argument-list-opt        go to state 325
    argument-list            go to state 145
    argument                 go to state 57
    argument-name            go to state 58
    syntax-expression        go to state 59
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 318

   85 field-default-value-opt: "`=`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`[`"                shift, and go to state 12
    "`[[`"               shift, and go to state 13
    "`.`"                shift, and go to state 14
    "`!`"                shift, and go to state 15
    "`new`"              shift, and go to state 18
    INLINE               shift, and go to state 25
    "`fn`"               shift, and go to state 26
    "nil"                shift, and go to state 29
    "true"               shift, and go to state 30
    "false"              shift, and go to state 31

    identifier               go to state 41
    qname                    go to state 42
    fn-start-decl            go to state 51
    syntax-expression        go to state 326
    syntax-expression-wo-ii  go to state 45
    apostrophe-expression    go to state 46
    new-expression           go to state 47
    call-expression          go to state 48
    lambda-expression        go to state 49
    compound-expression      go to state 53


State 319

   91 field-type-expr: field-type-expr "`|`" . field-type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 301
    "`::`"               shift, and go to state 10

    identifier       go to state 41
    qname            go to state 302
    field-type-expr  go to state 327


State 320

   87 field: identifier "`=>`" field-type-expr field-default-value-opt .

    $default  reduce using rule 87 (field)


State 321

   86 field: identifier "`:`" field-type-expr field-default-value-opt .

    $default  reduce using rule 86 (field)


State 322

   67 struct-decl: qname "`(`" parameter-list-opt "`)`" "`=>`" "`(`" field-list-opt . "`)`"

    "`)`"  shift, and go to state 328


State 323

  101 parameter-decl: identifier internal-identifier-opt "`:`" "const modifier" parameter-constraint-set parameter-default-value-opt .

    $default  reduce using rule 101 (parameter-decl)


State 324

  102 parameter-decl: identifier internal-identifier-opt "`:`" "mut modifier" parameter-constraint-set parameter-default-value-opt .

    $default  reduce using rule 102 (parameter-decl)


State 325

   89 field-type-expr: qname "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 329


State 326

   85 field-default-value-opt: "`=`" syntax-expression .
  147 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  148                        | syntax-expression . "`.`" apostrophe-expression
  149                        | syntax-expression . INTEGER_INDEX
  151                        | syntax-expression . "`+`" syntax-expression
  152                        | syntax-expression . "`==`" syntax-expression
  153                        | syntax-expression . "`!=`" syntax-expression
  170 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 99
    "`==`"         shift, and go to state 101
    "`!=`"         shift, and go to state 102
    "`...`"        shift, and go to state 103
    "`.`"          shift, and go to state 104
    "`+`"          shift, and go to state 105

    $default  reduce using rule 85 (field-default-value-opt)


State 327

   91 field-type-expr: field-type-expr . "`|`" field-type-expr
   91                | field-type-expr "`|`" field-type-expr .

    $default  reduce using rule 91 (field-type-expr)


State 328

   67 struct-decl: qname "`(`" parameter-list-opt "`)`" "`=>`" "`(`" field-list-opt "`)`" .

    $default  reduce using rule 67 (struct-decl)


State 329

   89 field-type-expr: qname "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 89 (field-type-expr)
