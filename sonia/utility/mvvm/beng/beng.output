Terminals unused in grammar

    COMMENT_BEGIN
    COMMENT_END
    OPERATOR_TERM
    "`_`"
    "`->*`"
    "`~>`"
    "`.*`"
    "`++`"
    "`--`"
    "`<<`"
    "`>>`"
    "`<=`"
    "`>=`"
    "`==`"
    "`!=`"
    "`&&`"
    "`+=`"
    "`-=`"
    "`*=`"
    "`/=`"
    "`%=`"
    "`<<=`"
    "`>>=`"
    "`&=`"
    "`|=`"
    "`^=`"
    "`<`"
    "`>`"
    "`+`"
    "`-`"
    "`*`"
    "`/`"
    "`%`"
    "`&`"
    "`|`"
    "`!`"
    "`~`"
    "`^`"
    "`$`"
    "`?`"
    "`#`"
    NEW
    FOR
    VOID_
    AUTO
    CONST_
    USING
    THROW
    DELETE_
    SIZEOF
    RETURN
    PRIVATE
    TEMPLATE
    NAMESPACE
    LOWEST
    "`=`"
    "`::`"


Grammar

    0 $accept: begin "end of file"

    1 begin: declaration_any "end of file"

    2 declaration_any: %empty
    3                | declaration_any opt-decl

    4 opt-decl: "`;`"
    5         | EXTERN VAR identifier "`:`" type-expr "`;`"
    6         | EXTERN FN qname "`(`" parameter-list-opt "`)`" "`;`"
    7         | EXTERN FN qname "`(`" parameter-list-opt "`)`" "`->`" type-expr "`;`"
    8         | enum-decl
    9         | type-decl
   10         | fn-decl
   11         | LET identifier ASSIGN expression "`;`"
   12         | compound-expression "`;`"

   13 infunction_declaration_any: %empty
   14                           | infunction_declaration_any opt-infunction-decl

   15 opt-infunction-decl: "`;`"
   16                    | LET identifier ASSIGN expression "`;`"
   17                    | compound-expression "`;`"

   18 identifier: IDENTIFIER

   19 qname: DBLCOLON identifier
   20      | identifier
   21      | qname DBLCOLON identifier

   22 fn-decl: FN qname "`(`" parameter-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   23        | FN qname "`(`" parameter-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

   24 enum-decl: ENUM qname "`{`" case-list-opt "`}`"

   25 case-list-opt: %empty
   26              | case-list

   27 case-list: case-decl
   28          | case-list "," case-decl

   29 case-decl: identifier

   30 type-decl: TYPE qname type-extension-any "`{`" parameter-list-opt "`}`"

   31 type-extension-any: %empty
   32                   | EXTENDS type-extension-list

   33 type-extension-list: qname
   34                    | type-extension-list "," qname

   35 parameter-list-opt: %empty
   36                   | parameter-list

   37 parameter-list: parameter-decl
   38               | parameter-list "," parameter-decl

   39 parameter-decl: identifier "`:`" type-expr
   40               | identifier "`:`" type-expr ASSIGN expression
   41               | type-expr
   42               | type-expr ASSIGN expression

   43 type-expr: BOOL
   44          | INT
   45          | FLOAT
   46          | STRING_WORD
   47          | qname
   48          | "`[`" type-expr "`]`"
   49          | "`(`" opt-type-list "`)`"
   50          | type-expr "`[`" INTEGER "`]`"
   51          | type-expr "`||`" type-expr
   52          | type-expr "`->`" type-expr

   53 opt-type-list: %empty
   54              | type-expr
   55              | opt-type-list "," type-expr

   56 compound-expression: qname "`(`" opt-named-expr-list-any "`)`"
   57                    | expression ASSIGN expression

   58 expression: INTEGER
   59           | DECIMAL
   60           | STRING
   61           | "`.`" identifier
   62           | qname
   63           | "`(`" expression "`)`"
   64           | "`[`" expression-list-any "`]`"
   65           | compound-expression

   66 expression-list-any: %empty
   67                    | expression
   68                    | expression-list-any "," expression

   69 opt-named-expr-list-any: %empty
   70                        | opt-named-expr-list

   71 opt-named-expr-list: opt-named-expr
   72                    | opt-named-expr-list "," opt-named-expr

   73 opt-named-expr: identifier "`:`" expression
   74               | expression


Terminals, with rules where they appear

    "end of file" (0) 0 1
    error (256)
    COMMENT_BEGIN (258)
    COMMENT_END (259)
    STRING <sonia::string_view> (260) 60
    IDENTIFIER <sonia::lang::beng::annotated_string_view> (261) 18
    DECIMAL <sonia::decimal> (262) 59
    INTEGER <int> (263) 50 58
    OPERATOR_TERM <sonia::string_view> (264)
    "`_`" (265)
    "`->*`" (266)
    "`->`" (267) 7 23 52
    "`~>`" (268)
    "`.*`" (269)
    "`++`" (270)
    "`--`" (271)
    "`<<`" (272)
    "`>>`" (273)
    "`<=`" (274)
    "`>=`" (275)
    "`==`" (276)
    "`!=`" (277)
    "`&&`" (278)
    "`||`" (279) 51
    "`+=`" (280)
    "`-=`" (281)
    "`*=`" (282)
    "`/=`" (283)
    "`%=`" (284)
    "`<<=`" (285)
    "`>>=`" (286)
    "`&=`" (287)
    "`|=`" (288)
    "`^=`" (289)
    "`:`" (290) 5 39 40 73
    "`(`" (291) 6 7 22 23 49 56 63
    "`)`" (292) 6 7 22 23 49 56 63
    "`{`" (293) 22 23 24 30
    "`}`" (294) 22 23 24 30
    "`[`" (295) 48 50 64
    "`]`" (296) 48 50 64
    "`<`" (297)
    "`>`" (298)
    "`;`" (299) 4 5 6 7 11 12 15 16 17
    "`.`" (300) 61
    "`+`" (301)
    "`-`" (302)
    "`*`" (303)
    "`/`" (304)
    "`%`" (305)
    "`&`" (306)
    "`|`" (307)
    "`!`" (308)
    "`~`" (309)
    "`^`" (310)
    "," (311) 28 34 38 55 68 72
    "`$`" (312)
    "`?`" (313)
    "`#`" (314)
    LET (315) 11 16
    VAR (316) 5
    NEW (317)
    FOR (318)
    VOID_ (319)
    AUTO (320)
    CONST_ (321)
    USING (322)
    THROW (323)
    DELETE_ (324)
    SIZEOF (325)
    RETURN (326)
    EXTERN (327) 5 6 7
    PRIVATE (328)
    TEMPLATE (329)
    NAMESPACE (330)
    LOWEST (331)
    ASSIGN (332) 11 16 40 42 57
    "`=`" (333)
    DBLCOLON (334) 19 21
    "`::`" (335)
    FN (336) 6 7 22 23
    ENUM (337) 24
    TYPE (338) 30
    EXTENDS (339) 32
    BOOL (340) 43
    INT (341) 44
    FLOAT (342) 45
    STRING_WORD (343) 46


Nonterminals, with rules where they appear

    $accept (89)
        on left: 0
    begin (90)
        on left: 1
        on right: 0
    declaration_any <std::vector<declaration_t>> (91)
        on left: 2 3
        on right: 1 3
    opt-decl <declaration_t> (92)
        on left: 4 5 6 7 8 9 10 11 12
        on right: 3
    infunction_declaration_any <std::vector<infunction_declaration_t>> (93)
        on left: 13 14
        on right: 14 22 23
    opt-infunction-decl <infunction_declaration_t> (94)
        on left: 15 16 17
        on right: 14
    identifier <sonia::lang::beng::annotated_identifier> (95)
        on left: 18
        on right: 5 11 16 19 20 21 29 39 40 61 73
    qname <sonia::lang::beng::qname> (96)
        on left: 19 20 21
        on right: 6 7 21 22 23 24 30 33 34 47 56 62
    fn-decl <fn_decl_t> (97)
        on left: 22 23
        on right: 10
    enum-decl <enum_decl> (98)
        on left: 24
        on right: 8
    case-list-opt <std::vector<sonia::lang::identifier>> (99)
        on left: 25 26
        on right: 24
    case-list <std::vector<sonia::lang::identifier>> (100)
        on left: 27 28
        on right: 26 28
    case-decl <sonia::lang::identifier> (101)
        on left: 29
        on right: 27 28
    type-decl <type_decl> (102)
        on left: 30
        on right: 9
    type-extension-any <extension_list_t> (103)
        on left: 31 32
        on right: 30
    type-extension-list <extension_list_t> (104)
        on left: 33 34
        on right: 32 34
    parameter-list-opt <parameter_list_t> (105)
        on left: 35 36
        on right: 6 7 22 23 30
    parameter-list <parameter_list_t> (106)
        on left: 37 38
        on right: 36 38
    parameter-decl <parameter_t> (107)
        on left: 39 40 41 42
        on right: 37 38
    type-expr <beng_generic_type> (108)
        on left: 43 44 45 46 47 48 49 50 51 52
        on right: 5 7 23 39 40 41 42 48 50 51 52 54 55
    opt-type-list <beng_tuple_t> (109)
        on left: 53 54 55
        on right: 49 55
    compound-expression <expression_t> (110)
        on left: 56 57
        on right: 12 17 65
    expression <expression_t> (111)
        on left: 58 59 60 61 62 63 64 65
        on right: 11 16 40 42 57 63 67 68 73 74
    expression-list-any <expression_list_t> (112)
        on left: 66 67 68
        on right: 64 68
    opt-named-expr-list-any <named_expression_term_list_t> (113)
        on left: 69 70
        on right: 56
    opt-named-expr-list <named_expression_term_list_t> (114)
        on left: 71 72
        on right: 70 72
    opt-named-expr <named_expression_term_t> (115)
        on left: 73 74
        on right: 71 72


State 0

    0 $accept: . begin "end of file"

    $default  reduce using rule 2 (declaration_any)

    begin            go to state 1
    declaration_any  go to state 2


State 1

    0 $accept: begin . "end of file"

    "end of file"  shift, and go to state 3


State 2

    1 begin: declaration_any . "end of file"
    3 declaration_any: declaration_any . opt-decl

    "end of file"  shift, and go to state 4
    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    DECIMAL        shift, and go to state 7
    INTEGER        shift, and go to state 8
    "`(`"          shift, and go to state 9
    "`[`"          shift, and go to state 10
    "`;`"          shift, and go to state 11
    "`.`"          shift, and go to state 12
    LET            shift, and go to state 13
    EXTERN         shift, and go to state 14
    DBLCOLON       shift, and go to state 15
    FN             shift, and go to state 16
    ENUM           shift, and go to state 17
    TYPE           shift, and go to state 18

    opt-decl             go to state 19
    identifier           go to state 20
    qname                go to state 21
    fn-decl              go to state 22
    enum-decl            go to state 23
    type-decl            go to state 24
    compound-expression  go to state 25
    expression           go to state 26


State 3

    0 $accept: begin "end of file" .

    $default  accept


State 4

    1 begin: declaration_any "end of file" .

    $default  reduce using rule 1 (begin)


State 5

   60 expression: STRING .

    $default  reduce using rule 60 (expression)


State 6

   18 identifier: IDENTIFIER .

    $default  reduce using rule 18 (identifier)


State 7

   59 expression: DECIMAL .

    $default  reduce using rule 59 (expression)


State 8

   58 expression: INTEGER .

    $default  reduce using rule 58 (expression)


State 9

   63 expression: "`(`" . expression "`)`"

    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    DECIMAL     shift, and go to state 7
    INTEGER     shift, and go to state 8
    "`(`"       shift, and go to state 9
    "`[`"       shift, and go to state 10
    "`.`"       shift, and go to state 12
    DBLCOLON    shift, and go to state 15

    identifier           go to state 20
    qname                go to state 21
    compound-expression  go to state 27
    expression           go to state 28


State 10

   64 expression: "`[`" . expression-list-any "`]`"

    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    DECIMAL     shift, and go to state 7
    INTEGER     shift, and go to state 8
    "`(`"       shift, and go to state 9
    "`[`"       shift, and go to state 10
    "`.`"       shift, and go to state 12
    DBLCOLON    shift, and go to state 15

    $default  reduce using rule 66 (expression-list-any)

    identifier           go to state 20
    qname                go to state 21
    compound-expression  go to state 27
    expression           go to state 29
    expression-list-any  go to state 30


State 11

    4 opt-decl: "`;`" .

    $default  reduce using rule 4 (opt-decl)


State 12

   61 expression: "`.`" . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 31


State 13

   11 opt-decl: LET . identifier ASSIGN expression "`;`"

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 32


State 14

    5 opt-decl: EXTERN . VAR identifier "`:`" type-expr "`;`"
    6         | EXTERN . FN qname "`(`" parameter-list-opt "`)`" "`;`"
    7         | EXTERN . FN qname "`(`" parameter-list-opt "`)`" "`->`" type-expr "`;`"

    VAR  shift, and go to state 33
    FN   shift, and go to state 34


State 15

   19 qname: DBLCOLON . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 35


State 16

   22 fn-decl: FN . qname "`(`" parameter-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   23        | FN . qname "`(`" parameter-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 15

    identifier  go to state 20
    qname       go to state 36


State 17

   24 enum-decl: ENUM . qname "`{`" case-list-opt "`}`"

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 15

    identifier  go to state 20
    qname       go to state 37


State 18

   30 type-decl: TYPE . qname type-extension-any "`{`" parameter-list-opt "`}`"

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 15

    identifier  go to state 20
    qname       go to state 38


State 19

    3 declaration_any: declaration_any opt-decl .

    $default  reduce using rule 3 (declaration_any)


State 20

   20 qname: identifier .

    $default  reduce using rule 20 (qname)


State 21

   21 qname: qname . DBLCOLON identifier
   56 compound-expression: qname . "`(`" opt-named-expr-list-any "`)`"
   62 expression: qname .

    "`(`"     shift, and go to state 39
    DBLCOLON  shift, and go to state 40

    $default  reduce using rule 62 (expression)


State 22

   10 opt-decl: fn-decl .

    $default  reduce using rule 10 (opt-decl)


State 23

    8 opt-decl: enum-decl .

    $default  reduce using rule 8 (opt-decl)


State 24

    9 opt-decl: type-decl .

    $default  reduce using rule 9 (opt-decl)


State 25

   12 opt-decl: compound-expression . "`;`"
   65 expression: compound-expression .

    "`;`"  shift, and go to state 41

    $default  reduce using rule 65 (expression)


State 26

   57 compound-expression: expression . ASSIGN expression

    ASSIGN  shift, and go to state 42


State 27

   65 expression: compound-expression .

    $default  reduce using rule 65 (expression)


State 28

   57 compound-expression: expression . ASSIGN expression
   63 expression: "`(`" expression . "`)`"

    "`)`"   shift, and go to state 43
    ASSIGN  shift, and go to state 42


State 29

   57 compound-expression: expression . ASSIGN expression
   67 expression-list-any: expression .

    ASSIGN  shift, and go to state 42

    $default  reduce using rule 67 (expression-list-any)


State 30

   64 expression: "`[`" expression-list-any . "`]`"
   68 expression-list-any: expression-list-any . "," expression

    "`]`"  shift, and go to state 44
    ","    shift, and go to state 45


State 31

   61 expression: "`.`" identifier .

    $default  reduce using rule 61 (expression)


State 32

   11 opt-decl: LET identifier . ASSIGN expression "`;`"

    ASSIGN  shift, and go to state 46


State 33

    5 opt-decl: EXTERN VAR . identifier "`:`" type-expr "`;`"

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 47


State 34

    6 opt-decl: EXTERN FN . qname "`(`" parameter-list-opt "`)`" "`;`"
    7         | EXTERN FN . qname "`(`" parameter-list-opt "`)`" "`->`" type-expr "`;`"

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 15

    identifier  go to state 20
    qname       go to state 48


State 35

   19 qname: DBLCOLON identifier .

    $default  reduce using rule 19 (qname)


State 36

   21 qname: qname . DBLCOLON identifier
   22 fn-decl: FN qname . "`(`" parameter-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   23        | FN qname . "`(`" parameter-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`(`"     shift, and go to state 49
    DBLCOLON  shift, and go to state 40


State 37

   21 qname: qname . DBLCOLON identifier
   24 enum-decl: ENUM qname . "`{`" case-list-opt "`}`"

    "`{`"     shift, and go to state 50
    DBLCOLON  shift, and go to state 40


State 38

   21 qname: qname . DBLCOLON identifier
   30 type-decl: TYPE qname . type-extension-any "`{`" parameter-list-opt "`}`"

    DBLCOLON  shift, and go to state 40
    EXTENDS   shift, and go to state 51

    $default  reduce using rule 31 (type-extension-any)

    type-extension-any  go to state 52


State 39

   56 compound-expression: qname "`(`" . opt-named-expr-list-any "`)`"

    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    DECIMAL     shift, and go to state 7
    INTEGER     shift, and go to state 8
    "`(`"       shift, and go to state 9
    "`[`"       shift, and go to state 10
    "`.`"       shift, and go to state 12
    DBLCOLON    shift, and go to state 15

    $default  reduce using rule 69 (opt-named-expr-list-any)

    identifier               go to state 53
    qname                    go to state 21
    compound-expression      go to state 27
    expression               go to state 54
    opt-named-expr-list-any  go to state 55
    opt-named-expr-list      go to state 56
    opt-named-expr           go to state 57


State 40

   21 qname: qname DBLCOLON . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 58


State 41

   12 opt-decl: compound-expression "`;`" .

    $default  reduce using rule 12 (opt-decl)


State 42

   57 compound-expression: expression ASSIGN . expression

    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    DECIMAL     shift, and go to state 7
    INTEGER     shift, and go to state 8
    "`(`"       shift, and go to state 9
    "`[`"       shift, and go to state 10
    "`.`"       shift, and go to state 12
    DBLCOLON    shift, and go to state 15

    identifier           go to state 20
    qname                go to state 21
    compound-expression  go to state 27
    expression           go to state 59


State 43

   63 expression: "`(`" expression "`)`" .

    $default  reduce using rule 63 (expression)


State 44

   64 expression: "`[`" expression-list-any "`]`" .

    $default  reduce using rule 64 (expression)


State 45

   68 expression-list-any: expression-list-any "," . expression

    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    DECIMAL     shift, and go to state 7
    INTEGER     shift, and go to state 8
    "`(`"       shift, and go to state 9
    "`[`"       shift, and go to state 10
    "`.`"       shift, and go to state 12
    DBLCOLON    shift, and go to state 15

    identifier           go to state 20
    qname                go to state 21
    compound-expression  go to state 27
    expression           go to state 60


State 46

   11 opt-decl: LET identifier ASSIGN . expression "`;`"

    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    DECIMAL     shift, and go to state 7
    INTEGER     shift, and go to state 8
    "`(`"       shift, and go to state 9
    "`[`"       shift, and go to state 10
    "`.`"       shift, and go to state 12
    DBLCOLON    shift, and go to state 15

    identifier           go to state 20
    qname                go to state 21
    compound-expression  go to state 27
    expression           go to state 61


State 47

    5 opt-decl: EXTERN VAR identifier . "`:`" type-expr "`;`"

    "`:`"  shift, and go to state 62


State 48

    6 opt-decl: EXTERN FN qname . "`(`" parameter-list-opt "`)`" "`;`"
    7         | EXTERN FN qname . "`(`" parameter-list-opt "`)`" "`->`" type-expr "`;`"
   21 qname: qname . DBLCOLON identifier

    "`(`"     shift, and go to state 63
    DBLCOLON  shift, and go to state 40


State 49

   22 fn-decl: FN qname "`(`" . parameter-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   23        | FN qname "`(`" . parameter-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    IDENTIFIER   shift, and go to state 6
    "`(`"        shift, and go to state 64
    "`[`"        shift, and go to state 65
    DBLCOLON     shift, and go to state 15
    BOOL         shift, and go to state 66
    INT          shift, and go to state 67
    FLOAT        shift, and go to state 68
    STRING_WORD  shift, and go to state 69

    $default  reduce using rule 35 (parameter-list-opt)

    identifier          go to state 70
    qname               go to state 71
    parameter-list-opt  go to state 72
    parameter-list      go to state 73
    parameter-decl      go to state 74
    type-expr           go to state 75


State 50

   24 enum-decl: ENUM qname "`{`" . case-list-opt "`}`"

    IDENTIFIER  shift, and go to state 6

    $default  reduce using rule 25 (case-list-opt)

    identifier     go to state 76
    case-list-opt  go to state 77
    case-list      go to state 78
    case-decl      go to state 79


State 51

   32 type-extension-any: EXTENDS . type-extension-list

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 15

    identifier           go to state 20
    qname                go to state 80
    type-extension-list  go to state 81


State 52

   30 type-decl: TYPE qname type-extension-any . "`{`" parameter-list-opt "`}`"

    "`{`"  shift, and go to state 82


State 53

   20 qname: identifier .
   73 opt-named-expr: identifier . "`:`" expression

    "`:`"  shift, and go to state 83

    $default  reduce using rule 20 (qname)


State 54

   57 compound-expression: expression . ASSIGN expression
   74 opt-named-expr: expression .

    ASSIGN  shift, and go to state 42

    $default  reduce using rule 74 (opt-named-expr)


State 55

   56 compound-expression: qname "`(`" opt-named-expr-list-any . "`)`"

    "`)`"  shift, and go to state 84


State 56

   70 opt-named-expr-list-any: opt-named-expr-list .
   72 opt-named-expr-list: opt-named-expr-list . "," opt-named-expr

    ","  shift, and go to state 85

    $default  reduce using rule 70 (opt-named-expr-list-any)


State 57

   71 opt-named-expr-list: opt-named-expr .

    $default  reduce using rule 71 (opt-named-expr-list)


State 58

   21 qname: qname DBLCOLON identifier .

    $default  reduce using rule 21 (qname)


State 59

   57 compound-expression: expression . ASSIGN expression
   57                    | expression ASSIGN expression .

    ASSIGN  shift, and go to state 42

    $default  reduce using rule 57 (compound-expression)


State 60

   57 compound-expression: expression . ASSIGN expression
   68 expression-list-any: expression-list-any "," expression .

    ASSIGN  shift, and go to state 42

    $default  reduce using rule 68 (expression-list-any)


State 61

   11 opt-decl: LET identifier ASSIGN expression . "`;`"
   57 compound-expression: expression . ASSIGN expression

    "`;`"   shift, and go to state 86
    ASSIGN  shift, and go to state 42


State 62

    5 opt-decl: EXTERN VAR identifier "`:`" . type-expr "`;`"

    IDENTIFIER   shift, and go to state 6
    "`(`"        shift, and go to state 64
    "`[`"        shift, and go to state 65
    DBLCOLON     shift, and go to state 15
    BOOL         shift, and go to state 66
    INT          shift, and go to state 67
    FLOAT        shift, and go to state 68
    STRING_WORD  shift, and go to state 69

    identifier  go to state 20
    qname       go to state 71
    type-expr   go to state 87


State 63

    6 opt-decl: EXTERN FN qname "`(`" . parameter-list-opt "`)`" "`;`"
    7         | EXTERN FN qname "`(`" . parameter-list-opt "`)`" "`->`" type-expr "`;`"

    IDENTIFIER   shift, and go to state 6
    "`(`"        shift, and go to state 64
    "`[`"        shift, and go to state 65
    DBLCOLON     shift, and go to state 15
    BOOL         shift, and go to state 66
    INT          shift, and go to state 67
    FLOAT        shift, and go to state 68
    STRING_WORD  shift, and go to state 69

    $default  reduce using rule 35 (parameter-list-opt)

    identifier          go to state 70
    qname               go to state 71
    parameter-list-opt  go to state 88
    parameter-list      go to state 73
    parameter-decl      go to state 74
    type-expr           go to state 75


State 64

   49 type-expr: "`(`" . opt-type-list "`)`"

    IDENTIFIER   shift, and go to state 6
    "`(`"        shift, and go to state 64
    "`[`"        shift, and go to state 65
    DBLCOLON     shift, and go to state 15
    BOOL         shift, and go to state 66
    INT          shift, and go to state 67
    FLOAT        shift, and go to state 68
    STRING_WORD  shift, and go to state 69

    $default  reduce using rule 53 (opt-type-list)

    identifier     go to state 20
    qname          go to state 71
    type-expr      go to state 89
    opt-type-list  go to state 90


State 65

   48 type-expr: "`[`" . type-expr "`]`"

    IDENTIFIER   shift, and go to state 6
    "`(`"        shift, and go to state 64
    "`[`"        shift, and go to state 65
    DBLCOLON     shift, and go to state 15
    BOOL         shift, and go to state 66
    INT          shift, and go to state 67
    FLOAT        shift, and go to state 68
    STRING_WORD  shift, and go to state 69

    identifier  go to state 20
    qname       go to state 71
    type-expr   go to state 91


State 66

   43 type-expr: BOOL .

    $default  reduce using rule 43 (type-expr)


State 67

   44 type-expr: INT .

    $default  reduce using rule 44 (type-expr)


State 68

   45 type-expr: FLOAT .

    $default  reduce using rule 45 (type-expr)


State 69

   46 type-expr: STRING_WORD .

    $default  reduce using rule 46 (type-expr)


State 70

   20 qname: identifier .
   39 parameter-decl: identifier . "`:`" type-expr
   40               | identifier . "`:`" type-expr ASSIGN expression

    "`:`"  shift, and go to state 92

    $default  reduce using rule 20 (qname)


State 71

   21 qname: qname . DBLCOLON identifier
   47 type-expr: qname .

    DBLCOLON  shift, and go to state 40

    $default  reduce using rule 47 (type-expr)


State 72

   22 fn-decl: FN qname "`(`" parameter-list-opt . "`)`" "`{`" infunction_declaration_any "`}`"
   23        | FN qname "`(`" parameter-list-opt . "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`)`"  shift, and go to state 93


State 73

   36 parameter-list-opt: parameter-list .
   38 parameter-list: parameter-list . "," parameter-decl

    ","  shift, and go to state 94

    $default  reduce using rule 36 (parameter-list-opt)


State 74

   37 parameter-list: parameter-decl .

    $default  reduce using rule 37 (parameter-list)


State 75

   41 parameter-decl: type-expr .
   42               | type-expr . ASSIGN expression
   50 type-expr: type-expr . "`[`" INTEGER "`]`"
   51          | type-expr . "`||`" type-expr
   52          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 95
    "`||`"  shift, and go to state 96
    "`[`"   shift, and go to state 97
    ASSIGN  shift, and go to state 98

    $default  reduce using rule 41 (parameter-decl)


State 76

   29 case-decl: identifier .

    $default  reduce using rule 29 (case-decl)


State 77

   24 enum-decl: ENUM qname "`{`" case-list-opt . "`}`"

    "`}`"  shift, and go to state 99


State 78

   26 case-list-opt: case-list .
   28 case-list: case-list . "," case-decl

    ","  shift, and go to state 100

    $default  reduce using rule 26 (case-list-opt)


State 79

   27 case-list: case-decl .

    $default  reduce using rule 27 (case-list)


State 80

   21 qname: qname . DBLCOLON identifier
   33 type-extension-list: qname .

    DBLCOLON  shift, and go to state 40

    $default  reduce using rule 33 (type-extension-list)


State 81

   32 type-extension-any: EXTENDS type-extension-list .
   34 type-extension-list: type-extension-list . "," qname

    ","  shift, and go to state 101

    $default  reduce using rule 32 (type-extension-any)


State 82

   30 type-decl: TYPE qname type-extension-any "`{`" . parameter-list-opt "`}`"

    IDENTIFIER   shift, and go to state 6
    "`(`"        shift, and go to state 64
    "`[`"        shift, and go to state 65
    DBLCOLON     shift, and go to state 15
    BOOL         shift, and go to state 66
    INT          shift, and go to state 67
    FLOAT        shift, and go to state 68
    STRING_WORD  shift, and go to state 69

    $default  reduce using rule 35 (parameter-list-opt)

    identifier          go to state 70
    qname               go to state 71
    parameter-list-opt  go to state 102
    parameter-list      go to state 73
    parameter-decl      go to state 74
    type-expr           go to state 75


State 83

   73 opt-named-expr: identifier "`:`" . expression

    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    DECIMAL     shift, and go to state 7
    INTEGER     shift, and go to state 8
    "`(`"       shift, and go to state 9
    "`[`"       shift, and go to state 10
    "`.`"       shift, and go to state 12
    DBLCOLON    shift, and go to state 15

    identifier           go to state 20
    qname                go to state 21
    compound-expression  go to state 27
    expression           go to state 103


State 84

   56 compound-expression: qname "`(`" opt-named-expr-list-any "`)`" .

    $default  reduce using rule 56 (compound-expression)


State 85

   72 opt-named-expr-list: opt-named-expr-list "," . opt-named-expr

    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    DECIMAL     shift, and go to state 7
    INTEGER     shift, and go to state 8
    "`(`"       shift, and go to state 9
    "`[`"       shift, and go to state 10
    "`.`"       shift, and go to state 12
    DBLCOLON    shift, and go to state 15

    identifier           go to state 53
    qname                go to state 21
    compound-expression  go to state 27
    expression           go to state 54
    opt-named-expr       go to state 104


State 86

   11 opt-decl: LET identifier ASSIGN expression "`;`" .

    $default  reduce using rule 11 (opt-decl)


State 87

    5 opt-decl: EXTERN VAR identifier "`:`" type-expr . "`;`"
   50 type-expr: type-expr . "`[`" INTEGER "`]`"
   51          | type-expr . "`||`" type-expr
   52          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 95
    "`||`"  shift, and go to state 96
    "`[`"   shift, and go to state 97
    "`;`"   shift, and go to state 105


State 88

    6 opt-decl: EXTERN FN qname "`(`" parameter-list-opt . "`)`" "`;`"
    7         | EXTERN FN qname "`(`" parameter-list-opt . "`)`" "`->`" type-expr "`;`"

    "`)`"  shift, and go to state 106


State 89

   50 type-expr: type-expr . "`[`" INTEGER "`]`"
   51          | type-expr . "`||`" type-expr
   52          | type-expr . "`->`" type-expr
   54 opt-type-list: type-expr .

    "`->`"  shift, and go to state 95
    "`||`"  shift, and go to state 96
    "`[`"   shift, and go to state 97

    $default  reduce using rule 54 (opt-type-list)


State 90

   49 type-expr: "`(`" opt-type-list . "`)`"
   55 opt-type-list: opt-type-list . "," type-expr

    "`)`"  shift, and go to state 107
    ","    shift, and go to state 108


State 91

   48 type-expr: "`[`" type-expr . "`]`"
   50          | type-expr . "`[`" INTEGER "`]`"
   51          | type-expr . "`||`" type-expr
   52          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 95
    "`||`"  shift, and go to state 96
    "`[`"   shift, and go to state 97
    "`]`"   shift, and go to state 109


State 92

   39 parameter-decl: identifier "`:`" . type-expr
   40               | identifier "`:`" . type-expr ASSIGN expression

    IDENTIFIER   shift, and go to state 6
    "`(`"        shift, and go to state 64
    "`[`"        shift, and go to state 65
    DBLCOLON     shift, and go to state 15
    BOOL         shift, and go to state 66
    INT          shift, and go to state 67
    FLOAT        shift, and go to state 68
    STRING_WORD  shift, and go to state 69

    identifier  go to state 20
    qname       go to state 71
    type-expr   go to state 110


State 93

   22 fn-decl: FN qname "`(`" parameter-list-opt "`)`" . "`{`" infunction_declaration_any "`}`"
   23        | FN qname "`(`" parameter-list-opt "`)`" . "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`->`"  shift, and go to state 111
    "`{`"   shift, and go to state 112


State 94

   38 parameter-list: parameter-list "," . parameter-decl

    IDENTIFIER   shift, and go to state 6
    "`(`"        shift, and go to state 64
    "`[`"        shift, and go to state 65
    DBLCOLON     shift, and go to state 15
    BOOL         shift, and go to state 66
    INT          shift, and go to state 67
    FLOAT        shift, and go to state 68
    STRING_WORD  shift, and go to state 69

    identifier      go to state 70
    qname           go to state 71
    parameter-decl  go to state 113
    type-expr       go to state 75


State 95

   52 type-expr: type-expr "`->`" . type-expr

    IDENTIFIER   shift, and go to state 6
    "`(`"        shift, and go to state 64
    "`[`"        shift, and go to state 65
    DBLCOLON     shift, and go to state 15
    BOOL         shift, and go to state 66
    INT          shift, and go to state 67
    FLOAT        shift, and go to state 68
    STRING_WORD  shift, and go to state 69

    identifier  go to state 20
    qname       go to state 71
    type-expr   go to state 114


State 96

   51 type-expr: type-expr "`||`" . type-expr

    IDENTIFIER   shift, and go to state 6
    "`(`"        shift, and go to state 64
    "`[`"        shift, and go to state 65
    DBLCOLON     shift, and go to state 15
    BOOL         shift, and go to state 66
    INT          shift, and go to state 67
    FLOAT        shift, and go to state 68
    STRING_WORD  shift, and go to state 69

    identifier  go to state 20
    qname       go to state 71
    type-expr   go to state 115


State 97

   50 type-expr: type-expr "`[`" . INTEGER "`]`"

    INTEGER  shift, and go to state 116


State 98

   42 parameter-decl: type-expr ASSIGN . expression

    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    DECIMAL     shift, and go to state 7
    INTEGER     shift, and go to state 8
    "`(`"       shift, and go to state 9
    "`[`"       shift, and go to state 10
    "`.`"       shift, and go to state 12
    DBLCOLON    shift, and go to state 15

    identifier           go to state 20
    qname                go to state 21
    compound-expression  go to state 27
    expression           go to state 117


State 99

   24 enum-decl: ENUM qname "`{`" case-list-opt "`}`" .

    $default  reduce using rule 24 (enum-decl)


State 100

   28 case-list: case-list "," . case-decl

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 76
    case-decl   go to state 118


State 101

   34 type-extension-list: type-extension-list "," . qname

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 15

    identifier  go to state 20
    qname       go to state 119


State 102

   30 type-decl: TYPE qname type-extension-any "`{`" parameter-list-opt . "`}`"

    "`}`"  shift, and go to state 120


State 103

   57 compound-expression: expression . ASSIGN expression
   73 opt-named-expr: identifier "`:`" expression .

    ASSIGN  shift, and go to state 42

    $default  reduce using rule 73 (opt-named-expr)


State 104

   72 opt-named-expr-list: opt-named-expr-list "," opt-named-expr .

    $default  reduce using rule 72 (opt-named-expr-list)


State 105

    5 opt-decl: EXTERN VAR identifier "`:`" type-expr "`;`" .

    $default  reduce using rule 5 (opt-decl)


State 106

    6 opt-decl: EXTERN FN qname "`(`" parameter-list-opt "`)`" . "`;`"
    7         | EXTERN FN qname "`(`" parameter-list-opt "`)`" . "`->`" type-expr "`;`"

    "`->`"  shift, and go to state 121
    "`;`"   shift, and go to state 122


State 107

   49 type-expr: "`(`" opt-type-list "`)`" .

    $default  reduce using rule 49 (type-expr)


State 108

   55 opt-type-list: opt-type-list "," . type-expr

    IDENTIFIER   shift, and go to state 6
    "`(`"        shift, and go to state 64
    "`[`"        shift, and go to state 65
    DBLCOLON     shift, and go to state 15
    BOOL         shift, and go to state 66
    INT          shift, and go to state 67
    FLOAT        shift, and go to state 68
    STRING_WORD  shift, and go to state 69

    identifier  go to state 20
    qname       go to state 71
    type-expr   go to state 123


State 109

   48 type-expr: "`[`" type-expr "`]`" .

    $default  reduce using rule 48 (type-expr)


State 110

   39 parameter-decl: identifier "`:`" type-expr .
   40               | identifier "`:`" type-expr . ASSIGN expression
   50 type-expr: type-expr . "`[`" INTEGER "`]`"
   51          | type-expr . "`||`" type-expr
   52          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 95
    "`||`"  shift, and go to state 96
    "`[`"   shift, and go to state 97
    ASSIGN  shift, and go to state 124

    $default  reduce using rule 39 (parameter-decl)


State 111

   23 fn-decl: FN qname "`(`" parameter-list-opt "`)`" "`->`" . type-expr "`{`" infunction_declaration_any "`}`"

    IDENTIFIER   shift, and go to state 6
    "`(`"        shift, and go to state 64
    "`[`"        shift, and go to state 65
    DBLCOLON     shift, and go to state 15
    BOOL         shift, and go to state 66
    INT          shift, and go to state 67
    FLOAT        shift, and go to state 68
    STRING_WORD  shift, and go to state 69

    identifier  go to state 20
    qname       go to state 71
    type-expr   go to state 125


State 112

   22 fn-decl: FN qname "`(`" parameter-list-opt "`)`" "`{`" . infunction_declaration_any "`}`"

    $default  reduce using rule 13 (infunction_declaration_any)

    infunction_declaration_any  go to state 126


State 113

   38 parameter-list: parameter-list "," parameter-decl .

    $default  reduce using rule 38 (parameter-list)


State 114

   50 type-expr: type-expr . "`[`" INTEGER "`]`"
   51          | type-expr . "`||`" type-expr
   52          | type-expr . "`->`" type-expr
   52          | type-expr "`->`" type-expr .

    $default  reduce using rule 52 (type-expr)


State 115

   50 type-expr: type-expr . "`[`" INTEGER "`]`"
   51          | type-expr . "`||`" type-expr
   51          | type-expr "`||`" type-expr .
   52          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 95
    "`[`"   shift, and go to state 97

    $default  reduce using rule 51 (type-expr)


State 116

   50 type-expr: type-expr "`[`" INTEGER . "`]`"

    "`]`"  shift, and go to state 127


State 117

   42 parameter-decl: type-expr ASSIGN expression .
   57 compound-expression: expression . ASSIGN expression

    ASSIGN  shift, and go to state 42

    $default  reduce using rule 42 (parameter-decl)


State 118

   28 case-list: case-list "," case-decl .

    $default  reduce using rule 28 (case-list)


State 119

   21 qname: qname . DBLCOLON identifier
   34 type-extension-list: type-extension-list "," qname .

    DBLCOLON  shift, and go to state 40

    $default  reduce using rule 34 (type-extension-list)


State 120

   30 type-decl: TYPE qname type-extension-any "`{`" parameter-list-opt "`}`" .

    $default  reduce using rule 30 (type-decl)


State 121

    7 opt-decl: EXTERN FN qname "`(`" parameter-list-opt "`)`" "`->`" . type-expr "`;`"

    IDENTIFIER   shift, and go to state 6
    "`(`"        shift, and go to state 64
    "`[`"        shift, and go to state 65
    DBLCOLON     shift, and go to state 15
    BOOL         shift, and go to state 66
    INT          shift, and go to state 67
    FLOAT        shift, and go to state 68
    STRING_WORD  shift, and go to state 69

    identifier  go to state 20
    qname       go to state 71
    type-expr   go to state 128


State 122

    6 opt-decl: EXTERN FN qname "`(`" parameter-list-opt "`)`" "`;`" .

    $default  reduce using rule 6 (opt-decl)


State 123

   50 type-expr: type-expr . "`[`" INTEGER "`]`"
   51          | type-expr . "`||`" type-expr
   52          | type-expr . "`->`" type-expr
   55 opt-type-list: opt-type-list "," type-expr .

    "`->`"  shift, and go to state 95
    "`||`"  shift, and go to state 96
    "`[`"   shift, and go to state 97

    $default  reduce using rule 55 (opt-type-list)


State 124

   40 parameter-decl: identifier "`:`" type-expr ASSIGN . expression

    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    DECIMAL     shift, and go to state 7
    INTEGER     shift, and go to state 8
    "`(`"       shift, and go to state 9
    "`[`"       shift, and go to state 10
    "`.`"       shift, and go to state 12
    DBLCOLON    shift, and go to state 15

    identifier           go to state 20
    qname                go to state 21
    compound-expression  go to state 27
    expression           go to state 129


State 125

   23 fn-decl: FN qname "`(`" parameter-list-opt "`)`" "`->`" type-expr . "`{`" infunction_declaration_any "`}`"
   50 type-expr: type-expr . "`[`" INTEGER "`]`"
   51          | type-expr . "`||`" type-expr
   52          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 95
    "`||`"  shift, and go to state 96
    "`{`"   shift, and go to state 130
    "`[`"   shift, and go to state 97


State 126

   14 infunction_declaration_any: infunction_declaration_any . opt-infunction-decl
   22 fn-decl: FN qname "`(`" parameter-list-opt "`)`" "`{`" infunction_declaration_any . "`}`"

    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    DECIMAL     shift, and go to state 7
    INTEGER     shift, and go to state 8
    "`(`"       shift, and go to state 9
    "`}`"       shift, and go to state 131
    "`[`"       shift, and go to state 10
    "`;`"       shift, and go to state 132
    "`.`"       shift, and go to state 12
    LET         shift, and go to state 133
    DBLCOLON    shift, and go to state 15

    opt-infunction-decl  go to state 134
    identifier           go to state 20
    qname                go to state 21
    compound-expression  go to state 135
    expression           go to state 26


State 127

   50 type-expr: type-expr "`[`" INTEGER "`]`" .

    $default  reduce using rule 50 (type-expr)


State 128

    7 opt-decl: EXTERN FN qname "`(`" parameter-list-opt "`)`" "`->`" type-expr . "`;`"
   50 type-expr: type-expr . "`[`" INTEGER "`]`"
   51          | type-expr . "`||`" type-expr
   52          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 95
    "`||`"  shift, and go to state 96
    "`[`"   shift, and go to state 97
    "`;`"   shift, and go to state 136


State 129

   40 parameter-decl: identifier "`:`" type-expr ASSIGN expression .
   57 compound-expression: expression . ASSIGN expression

    ASSIGN  shift, and go to state 42

    $default  reduce using rule 40 (parameter-decl)


State 130

   23 fn-decl: FN qname "`(`" parameter-list-opt "`)`" "`->`" type-expr "`{`" . infunction_declaration_any "`}`"

    $default  reduce using rule 13 (infunction_declaration_any)

    infunction_declaration_any  go to state 137


State 131

   22 fn-decl: FN qname "`(`" parameter-list-opt "`)`" "`{`" infunction_declaration_any "`}`" .

    $default  reduce using rule 22 (fn-decl)


State 132

   15 opt-infunction-decl: "`;`" .

    $default  reduce using rule 15 (opt-infunction-decl)


State 133

   16 opt-infunction-decl: LET . identifier ASSIGN expression "`;`"

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 138


State 134

   14 infunction_declaration_any: infunction_declaration_any opt-infunction-decl .

    $default  reduce using rule 14 (infunction_declaration_any)


State 135

   17 opt-infunction-decl: compound-expression . "`;`"
   65 expression: compound-expression .

    "`;`"  shift, and go to state 139

    $default  reduce using rule 65 (expression)


State 136

    7 opt-decl: EXTERN FN qname "`(`" parameter-list-opt "`)`" "`->`" type-expr "`;`" .

    $default  reduce using rule 7 (opt-decl)


State 137

   14 infunction_declaration_any: infunction_declaration_any . opt-infunction-decl
   23 fn-decl: FN qname "`(`" parameter-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any . "`}`"

    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    DECIMAL     shift, and go to state 7
    INTEGER     shift, and go to state 8
    "`(`"       shift, and go to state 9
    "`}`"       shift, and go to state 140
    "`[`"       shift, and go to state 10
    "`;`"       shift, and go to state 132
    "`.`"       shift, and go to state 12
    LET         shift, and go to state 133
    DBLCOLON    shift, and go to state 15

    opt-infunction-decl  go to state 134
    identifier           go to state 20
    qname                go to state 21
    compound-expression  go to state 135
    expression           go to state 26


State 138

   16 opt-infunction-decl: LET identifier . ASSIGN expression "`;`"

    ASSIGN  shift, and go to state 141


State 139

   17 opt-infunction-decl: compound-expression "`;`" .

    $default  reduce using rule 17 (opt-infunction-decl)


State 140

   23 fn-decl: FN qname "`(`" parameter-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`" .

    $default  reduce using rule 23 (fn-decl)


State 141

   16 opt-infunction-decl: LET identifier ASSIGN . expression "`;`"

    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    DECIMAL     shift, and go to state 7
    INTEGER     shift, and go to state 8
    "`(`"       shift, and go to state 9
    "`[`"       shift, and go to state 10
    "`.`"       shift, and go to state 12
    DBLCOLON    shift, and go to state 15

    identifier           go to state 20
    qname                go to state 21
    compound-expression  go to state 27
    expression           go to state 142


State 142

   16 opt-infunction-decl: LET identifier ASSIGN expression . "`;`"
   57 compound-expression: expression . ASSIGN expression

    "`;`"   shift, and go to state 143
    ASSIGN  shift, and go to state 42


State 143

   16 opt-infunction-decl: LET identifier ASSIGN expression "`;`" .

    $default  reduce using rule 16 (opt-infunction-decl)
