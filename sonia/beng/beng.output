Terminals unused in grammar

    COMMENT_BEGIN
    COMMENT_END
    OPERATOR_TERM
    "`_`"
    "`->*`"
    "`~>`"
    "`.*`"
    "`++`"
    "`--`"
    "`<<`"
    "`>>`"
    "`<=`"
    "`>=`"
    "`==`"
    "`!=`"
    "`&&`"
    "`||`"
    "`+=`"
    "`-=`"
    "`*=`"
    "`/=`"
    "`%=`"
    "`<<=`"
    "`>>=`"
    "`&=`"
    "`|=`"
    "`^=`"
    "`<`"
    "`>`"
    "`+`"
    "`-`"
    "`*`"
    "`/`"
    "`%`"
    "`&`"
    "`!`"
    "`~`"
    "`^`"
    "`$`"
    "`?`"
    "`#`"
    NEW
    FOR
    VOID_
    AUTO
    CONST_
    USING
    THROW
    DELETE_
    SIZEOF
    PRIVATE
    TEMPLATE
    NAMESPACE
    LOWEST
    "`=`"
    "`::`"


Grammar

    0 $accept: begin "end of file"

    1 begin: declaration_any "end of file"

    2 declaration_any: %empty
    3                | declaration_any "`;`"
    4                | declaration_any enum-decl
    5                | declaration_any type-decl
    6                | declaration_any generic-decl

    7 generic-decl: EXTERN VAR identifier "`:`" type-expr "`;`"
    8             | EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" "`;`"
    9             | EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`;`"
   10             | fn-decl
   11             | LET identifier ASSIGN expression "`;`"
   12             | compound-expression "`;`"

   13 infunction_declaration_any: %empty
   14                           | infunction_declaration_any "`;`"
   15                           | infunction_declaration_any opt-infunction-decl

   16 opt-infunction-decl: LET identifier ASSIGN expression "`;`"
   17                    | RETURN expression "`;`"
   18                    | compound-expression "`;`"

   19 identifier: IDENTIFIER

   20 qname: DBLCOLON identifier
   21      | identifier
   22      | qname DBLCOLON identifier

   23 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   24        | FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

   25 enum-decl: ENUM qname "`{`" case-list-opt "`}`"

   26 case-list-opt: %empty
   27              | case-list

   28 case-list: case-decl
   29          | case-list "," case-decl

   30 case-decl: identifier

   31 type-decl: TYPE qname type-extension-any "`{`" parameter-woa-list-opt "`}`"

   32 type-extension-any: %empty
   33                   | EXTENDS type-extension-list

   34 type-extension-list: qname
   35                    | type-extension-list "," qname

   36 parameter-list-opt: %empty
   37                   | parameter-list

   38 parameter-list: parameter-decl
   39               | parameter-list "," parameter-decl

   40 parameter-decl: identifier "`:`" type-expr
   41               | type-expr

   42 parameter-woa-list-opt: %empty
   43                       | parameter-woa-list

   44 parameter-woa-list: parameter-woa-decl
   45                   | parameter-woa-list "," parameter-woa-decl

   46 parameter-woa-decl: parameter-decl
   47                   | parameter-decl ASSIGN expression

   48 type-expr: BOOL
   49          | INT
   50          | FLOAT
   51          | STRING_WORD
   52          | DECIMAL_WORD
   53          | qname
   54          | "`[`" type-expr "`]`"
   55          | "`(`" parameter-list-opt "`)`"
   56          | type-expr "`[`" INTEGER "`]`"
   57          | type-expr "`|`" type-expr
   58          | type-expr "`->`" type-expr

   59 compound-expression: expression "`(`" opt-named-expr-list-any "`)`"
   60                    | expression ASSIGN expression

   61 expression: INTEGER
   62           | DECIMAL
   63           | STRING
   64           | "`.`" identifier
   65           | qname
   66           | ARGIDENTIFIER
   67           | "`(`" expression "`)`"
   68           | "`[`" expression-list-any "`]`"
   69           | compound-expression

   70 expression-list-any: %empty
   71                    | expression
   72                    | expression-list-any "," expression

   73 opt-named-expr-list-any: %empty
   74                        | opt-named-expr-list

   75 opt-named-expr-list: opt-named-expr
   76                    | opt-named-expr-list "," opt-named-expr

   77 opt-named-expr: identifier "`:`" expression
   78               | expression


Terminals, with rules where they appear

    "end of file" (0) 0 1
    error (256)
    COMMENT_BEGIN (258)
    COMMENT_END (259)
    STRING <sonia::string_view> (260) 63
    IDENTIFIER <sonia::lang::beng::annotated_string_view> (261) 19
    ARGIDENTIFIER <sonia::lang::beng::annotated_string_view> (262) 66
    DECIMAL <sonia::decimal> (263) 62
    INTEGER <int> (264) 56 61
    OPERATOR_TERM <sonia::string_view> (265)
    "`_`" (266)
    "`->*`" (267)
    "`->`" (268) 9 24 58
    "`~>`" (269)
    "`.*`" (270)
    "`++`" (271)
    "`--`" (272)
    "`<<`" (273)
    "`>>`" (274)
    "`<=`" (275)
    "`>=`" (276)
    "`==`" (277)
    "`!=`" (278)
    "`&&`" (279)
    "`||`" (280)
    "`+=`" (281)
    "`-=`" (282)
    "`*=`" (283)
    "`/=`" (284)
    "`%=`" (285)
    "`<<=`" (286)
    "`>>=`" (287)
    "`&=`" (288)
    "`|=`" (289)
    "`^=`" (290)
    "`:`" (291) 7 40 77
    "`(`" (292) 8 9 23 24 55 59 67
    "`)`" (293) 8 9 23 24 55 59 67
    "`{`" (294) 23 24 25 31
    "`}`" (295) 23 24 25 31
    "`[`" (296) 54 56 68
    "`]`" (297) 54 56 68
    "`<`" (298)
    "`>`" (299)
    "`;`" (300) 3 7 8 9 11 12 14 16 17 18
    "`.`" (301) 64
    "`+`" (302)
    "`-`" (303)
    "`*`" (304)
    "`/`" (305)
    "`%`" (306)
    "`&`" (307)
    "`|`" (308) 57
    "`!`" (309)
    "`~`" (310)
    "`^`" (311)
    "," (312) 29 35 39 45 72 76
    "`$`" (313)
    "`?`" (314)
    "`#`" (315)
    LET (316) 11 16
    VAR (317) 7
    NEW (318)
    FOR (319)
    VOID_ (320)
    AUTO (321)
    CONST_ (322)
    USING (323)
    THROW (324)
    DELETE_ (325)
    SIZEOF (326)
    RETURN (327) 17
    EXTERN (328) 7 8 9
    PRIVATE (329)
    TEMPLATE (330)
    NAMESPACE (331)
    LOWEST (332)
    ASSIGN (333) 11 16 47 60
    "`=`" (334)
    DBLCOLON (335) 20 22
    "`::`" (336)
    FN (337) 8 9 23 24
    ENUM (338) 25
    TYPE (339) 31
    EXTENDS (340) 33
    BOOL (341) 48
    INT (342) 49
    FLOAT (343) 50
    STRING_WORD (344) 51
    DECIMAL_WORD (345) 52


Nonterminals, with rules where they appear

    $accept (91)
        on left: 0
    begin (92)
        on left: 1
        on right: 0
    declaration_any <declaration_set_t> (93)
        on left: 2 3 4 5 6
        on right: 1 3 4 5 6
    generic-decl <declaration_t> (94)
        on left: 7 8 9 10 11 12
        on right: 6
    infunction_declaration_any <std::vector<infunction_declaration_t>> (95)
        on left: 13 14 15
        on right: 14 15 23 24
    opt-infunction-decl <infunction_declaration_t> (96)
        on left: 16 17 18
        on right: 15
    identifier <sonia::lang::beng::annotated_identifier> (97)
        on left: 19
        on right: 7 11 16 20 21 22 30 40 64 77
    qname <sonia::lang::beng::annotated_qname> (98)
        on left: 20 21 22
        on right: 8 9 22 23 24 25 31 34 35 53 65
    fn-decl <fn_decl_t> (99)
        on left: 23 24
        on right: 10
    enum-decl <enum_decl> (100)
        on left: 25
        on right: 4
    case-list-opt <std::vector<sonia::lang::identifier>> (101)
        on left: 26 27
        on right: 25
    case-list <std::vector<sonia::lang::identifier>> (102)
        on left: 28 29
        on right: 27 29
    case-decl <sonia::lang::identifier> (103)
        on left: 30
        on right: 28 29
    type-decl <type_decl> (104)
        on left: 31
        on right: 5
    type-extension-any <extension_list_t> (105)
        on left: 32 33
        on right: 31
    type-extension-list <extension_list_t> (106)
        on left: 34 35
        on right: 33 35
    parameter-list-opt <parameter_list_t> (107)
        on left: 36 37
        on right: 55
    parameter-list <parameter_list_t> (108)
        on left: 38 39
        on right: 37 39
    parameter-decl <parameter_t> (109)
        on left: 40 41
        on right: 38 39 46 47
    parameter-woa-list-opt <parameter_woa_list_t> (110)
        on left: 42 43
        on right: 8 9 23 24 31
    parameter-woa-list <parameter_woa_list_t> (111)
        on left: 44 45
        on right: 43 45
    parameter-woa-decl <parameter_woa_t> (112)
        on left: 46 47
        on right: 44 45
    type-expr <beng_preliminary_type> (113)
        on left: 48 49 50 51 52 53 54 55 56 57 58
        on right: 7 9 24 40 41 54 56 57 58
    compound-expression <expression_t> (114)
        on left: 59 60
        on right: 12 18 69
    expression <expression_t> (115)
        on left: 61 62 63 64 65 66 67 68 69
        on right: 11 16 17 47 59 60 67 71 72 77 78
    expression-list-any <expression_list_t> (116)
        on left: 70 71 72
        on right: 68 72
    opt-named-expr-list-any <named_expression_term_list_t> (117)
        on left: 73 74
        on right: 59
    opt-named-expr-list <named_expression_term_list_t> (118)
        on left: 75 76
        on right: 74 76
    opt-named-expr <named_expression_term_t> (119)
        on left: 77 78
        on right: 75 76


State 0

    0 $accept: . begin "end of file"

    $default  reduce using rule 2 (declaration_any)

    begin            go to state 1
    declaration_any  go to state 2


State 1

    0 $accept: begin . "end of file"

    "end of file"  shift, and go to state 3


State 2

    1 begin: declaration_any . "end of file"
    3 declaration_any: declaration_any . "`;`"
    4                | declaration_any . enum-decl
    5                | declaration_any . type-decl
    6                | declaration_any . generic-decl

    "end of file"  shift, and go to state 4
    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    DECIMAL        shift, and go to state 8
    INTEGER        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`;`"          shift, and go to state 12
    "`.`"          shift, and go to state 13
    LET            shift, and go to state 14
    EXTERN         shift, and go to state 15
    DBLCOLON       shift, and go to state 16
    FN             shift, and go to state 17
    ENUM           shift, and go to state 18
    TYPE           shift, and go to state 19

    generic-decl         go to state 20
    identifier           go to state 21
    qname                go to state 22
    fn-decl              go to state 23
    enum-decl            go to state 24
    type-decl            go to state 25
    compound-expression  go to state 26
    expression           go to state 27


State 3

    0 $accept: begin "end of file" .

    $default  accept


State 4

    1 begin: declaration_any "end of file" .

    $default  reduce using rule 1 (begin)


State 5

   63 expression: STRING .

    $default  reduce using rule 63 (expression)


State 6

   19 identifier: IDENTIFIER .

    $default  reduce using rule 19 (identifier)


State 7

   66 expression: ARGIDENTIFIER .

    $default  reduce using rule 66 (expression)


State 8

   62 expression: DECIMAL .

    $default  reduce using rule 62 (expression)


State 9

   61 expression: INTEGER .

    $default  reduce using rule 61 (expression)


State 10

   67 expression: "`(`" . expression "`)`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    DECIMAL        shift, and go to state 8
    INTEGER        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    DBLCOLON       shift, and go to state 16

    identifier           go to state 21
    qname                go to state 22
    compound-expression  go to state 28
    expression           go to state 29


State 11

   68 expression: "`[`" . expression-list-any "`]`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    DECIMAL        shift, and go to state 8
    INTEGER        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    DBLCOLON       shift, and go to state 16

    $default  reduce using rule 70 (expression-list-any)

    identifier           go to state 21
    qname                go to state 22
    compound-expression  go to state 28
    expression           go to state 30
    expression-list-any  go to state 31


State 12

    3 declaration_any: declaration_any "`;`" .

    $default  reduce using rule 3 (declaration_any)


State 13

   64 expression: "`.`" . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 32


State 14

   11 generic-decl: LET . identifier ASSIGN expression "`;`"

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 33


State 15

    7 generic-decl: EXTERN . VAR identifier "`:`" type-expr "`;`"
    8             | EXTERN . FN qname "`(`" parameter-woa-list-opt "`)`" "`;`"
    9             | EXTERN . FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`;`"

    VAR  shift, and go to state 34
    FN   shift, and go to state 35


State 16

   20 qname: DBLCOLON . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 36


State 17

   23 fn-decl: FN . qname "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   24        | FN . qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 16

    identifier  go to state 21
    qname       go to state 37


State 18

   25 enum-decl: ENUM . qname "`{`" case-list-opt "`}`"

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 16

    identifier  go to state 21
    qname       go to state 38


State 19

   31 type-decl: TYPE . qname type-extension-any "`{`" parameter-woa-list-opt "`}`"

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 16

    identifier  go to state 21
    qname       go to state 39


State 20

    6 declaration_any: declaration_any generic-decl .

    $default  reduce using rule 6 (declaration_any)


State 21

   21 qname: identifier .

    $default  reduce using rule 21 (qname)


State 22

   22 qname: qname . DBLCOLON identifier
   65 expression: qname .

    DBLCOLON  shift, and go to state 40

    $default  reduce using rule 65 (expression)


State 23

   10 generic-decl: fn-decl .

    $default  reduce using rule 10 (generic-decl)


State 24

    4 declaration_any: declaration_any enum-decl .

    $default  reduce using rule 4 (declaration_any)


State 25

    5 declaration_any: declaration_any type-decl .

    $default  reduce using rule 5 (declaration_any)


State 26

   12 generic-decl: compound-expression . "`;`"
   69 expression: compound-expression .

    "`;`"  shift, and go to state 41

    $default  reduce using rule 69 (expression)


State 27

   59 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   60                    | expression . ASSIGN expression

    "`(`"   shift, and go to state 42
    ASSIGN  shift, and go to state 43


State 28

   69 expression: compound-expression .

    $default  reduce using rule 69 (expression)


State 29

   59 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   60                    | expression . ASSIGN expression
   67 expression: "`(`" expression . "`)`"

    "`(`"   shift, and go to state 42
    "`)`"   shift, and go to state 44
    ASSIGN  shift, and go to state 43


State 30

   59 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   60                    | expression . ASSIGN expression
   71 expression-list-any: expression .

    "`(`"   shift, and go to state 42
    ASSIGN  shift, and go to state 43

    $default  reduce using rule 71 (expression-list-any)


State 31

   68 expression: "`[`" expression-list-any . "`]`"
   72 expression-list-any: expression-list-any . "," expression

    "`]`"  shift, and go to state 45
    ","    shift, and go to state 46


State 32

   64 expression: "`.`" identifier .

    $default  reduce using rule 64 (expression)


State 33

   11 generic-decl: LET identifier . ASSIGN expression "`;`"

    ASSIGN  shift, and go to state 47


State 34

    7 generic-decl: EXTERN VAR . identifier "`:`" type-expr "`;`"

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 48


State 35

    8 generic-decl: EXTERN FN . qname "`(`" parameter-woa-list-opt "`)`" "`;`"
    9             | EXTERN FN . qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`;`"

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 16

    identifier  go to state 21
    qname       go to state 49


State 36

   20 qname: DBLCOLON identifier .

    $default  reduce using rule 20 (qname)


State 37

   22 qname: qname . DBLCOLON identifier
   23 fn-decl: FN qname . "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   24        | FN qname . "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`(`"     shift, and go to state 50
    DBLCOLON  shift, and go to state 40


State 38

   22 qname: qname . DBLCOLON identifier
   25 enum-decl: ENUM qname . "`{`" case-list-opt "`}`"

    "`{`"     shift, and go to state 51
    DBLCOLON  shift, and go to state 40


State 39

   22 qname: qname . DBLCOLON identifier
   31 type-decl: TYPE qname . type-extension-any "`{`" parameter-woa-list-opt "`}`"

    DBLCOLON  shift, and go to state 40
    EXTENDS   shift, and go to state 52

    $default  reduce using rule 32 (type-extension-any)

    type-extension-any  go to state 53


State 40

   22 qname: qname DBLCOLON . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 54


State 41

   12 generic-decl: compound-expression "`;`" .

    $default  reduce using rule 12 (generic-decl)


State 42

   59 compound-expression: expression "`(`" . opt-named-expr-list-any "`)`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    DECIMAL        shift, and go to state 8
    INTEGER        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    DBLCOLON       shift, and go to state 16

    $default  reduce using rule 73 (opt-named-expr-list-any)

    identifier               go to state 55
    qname                    go to state 22
    compound-expression      go to state 28
    expression               go to state 56
    opt-named-expr-list-any  go to state 57
    opt-named-expr-list      go to state 58
    opt-named-expr           go to state 59


State 43

   60 compound-expression: expression ASSIGN . expression

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    DECIMAL        shift, and go to state 8
    INTEGER        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    DBLCOLON       shift, and go to state 16

    identifier           go to state 21
    qname                go to state 22
    compound-expression  go to state 28
    expression           go to state 60


State 44

   67 expression: "`(`" expression "`)`" .

    $default  reduce using rule 67 (expression)


State 45

   68 expression: "`[`" expression-list-any "`]`" .

    $default  reduce using rule 68 (expression)


State 46

   72 expression-list-any: expression-list-any "," . expression

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    DECIMAL        shift, and go to state 8
    INTEGER        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    DBLCOLON       shift, and go to state 16

    identifier           go to state 21
    qname                go to state 22
    compound-expression  go to state 28
    expression           go to state 61


State 47

   11 generic-decl: LET identifier ASSIGN . expression "`;`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    DECIMAL        shift, and go to state 8
    INTEGER        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    DBLCOLON       shift, and go to state 16

    identifier           go to state 21
    qname                go to state 22
    compound-expression  go to state 28
    expression           go to state 62


State 48

    7 generic-decl: EXTERN VAR identifier . "`:`" type-expr "`;`"

    "`:`"  shift, and go to state 63


State 49

    8 generic-decl: EXTERN FN qname . "`(`" parameter-woa-list-opt "`)`" "`;`"
    9             | EXTERN FN qname . "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`;`"
   22 qname: qname . DBLCOLON identifier

    "`(`"     shift, and go to state 64
    DBLCOLON  shift, and go to state 40


State 50

   23 fn-decl: FN qname "`(`" . parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   24        | FN qname "`(`" . parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 65
    "`[`"         shift, and go to state 66
    DBLCOLON      shift, and go to state 16
    BOOL          shift, and go to state 67
    INT           shift, and go to state 68
    FLOAT         shift, and go to state 69
    STRING_WORD   shift, and go to state 70
    DECIMAL_WORD  shift, and go to state 71

    $default  reduce using rule 42 (parameter-woa-list-opt)

    identifier              go to state 72
    qname                   go to state 73
    parameter-decl          go to state 74
    parameter-woa-list-opt  go to state 75
    parameter-woa-list      go to state 76
    parameter-woa-decl      go to state 77
    type-expr               go to state 78


State 51

   25 enum-decl: ENUM qname "`{`" . case-list-opt "`}`"

    IDENTIFIER  shift, and go to state 6

    $default  reduce using rule 26 (case-list-opt)

    identifier     go to state 79
    case-list-opt  go to state 80
    case-list      go to state 81
    case-decl      go to state 82


State 52

   33 type-extension-any: EXTENDS . type-extension-list

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 16

    identifier           go to state 21
    qname                go to state 83
    type-extension-list  go to state 84


State 53

   31 type-decl: TYPE qname type-extension-any . "`{`" parameter-woa-list-opt "`}`"

    "`{`"  shift, and go to state 85


State 54

   22 qname: qname DBLCOLON identifier .

    $default  reduce using rule 22 (qname)


State 55

   21 qname: identifier .
   77 opt-named-expr: identifier . "`:`" expression

    "`:`"  shift, and go to state 86

    $default  reduce using rule 21 (qname)


State 56

   59 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   60                    | expression . ASSIGN expression
   78 opt-named-expr: expression .

    "`(`"   shift, and go to state 42
    ASSIGN  shift, and go to state 43

    $default  reduce using rule 78 (opt-named-expr)


State 57

   59 compound-expression: expression "`(`" opt-named-expr-list-any . "`)`"

    "`)`"  shift, and go to state 87


State 58

   74 opt-named-expr-list-any: opt-named-expr-list .
   76 opt-named-expr-list: opt-named-expr-list . "," opt-named-expr

    ","  shift, and go to state 88

    $default  reduce using rule 74 (opt-named-expr-list-any)


State 59

   75 opt-named-expr-list: opt-named-expr .

    $default  reduce using rule 75 (opt-named-expr-list)


State 60

   59 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   60                    | expression . ASSIGN expression
   60                    | expression ASSIGN expression .

    "`(`"   shift, and go to state 42
    ASSIGN  shift, and go to state 43

    $default  reduce using rule 60 (compound-expression)


State 61

   59 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   60                    | expression . ASSIGN expression
   72 expression-list-any: expression-list-any "," expression .

    "`(`"   shift, and go to state 42
    ASSIGN  shift, and go to state 43

    $default  reduce using rule 72 (expression-list-any)


State 62

   11 generic-decl: LET identifier ASSIGN expression . "`;`"
   59 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   60                    | expression . ASSIGN expression

    "`(`"   shift, and go to state 42
    "`;`"   shift, and go to state 89
    ASSIGN  shift, and go to state 43


State 63

    7 generic-decl: EXTERN VAR identifier "`:`" . type-expr "`;`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 65
    "`[`"         shift, and go to state 66
    DBLCOLON      shift, and go to state 16
    BOOL          shift, and go to state 67
    INT           shift, and go to state 68
    FLOAT         shift, and go to state 69
    STRING_WORD   shift, and go to state 70
    DECIMAL_WORD  shift, and go to state 71

    identifier  go to state 21
    qname       go to state 73
    type-expr   go to state 90


State 64

    8 generic-decl: EXTERN FN qname "`(`" . parameter-woa-list-opt "`)`" "`;`"
    9             | EXTERN FN qname "`(`" . parameter-woa-list-opt "`)`" "`->`" type-expr "`;`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 65
    "`[`"         shift, and go to state 66
    DBLCOLON      shift, and go to state 16
    BOOL          shift, and go to state 67
    INT           shift, and go to state 68
    FLOAT         shift, and go to state 69
    STRING_WORD   shift, and go to state 70
    DECIMAL_WORD  shift, and go to state 71

    $default  reduce using rule 42 (parameter-woa-list-opt)

    identifier              go to state 72
    qname                   go to state 73
    parameter-decl          go to state 74
    parameter-woa-list-opt  go to state 91
    parameter-woa-list      go to state 76
    parameter-woa-decl      go to state 77
    type-expr               go to state 78


State 65

   55 type-expr: "`(`" . parameter-list-opt "`)`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 65
    "`[`"         shift, and go to state 66
    DBLCOLON      shift, and go to state 16
    BOOL          shift, and go to state 67
    INT           shift, and go to state 68
    FLOAT         shift, and go to state 69
    STRING_WORD   shift, and go to state 70
    DECIMAL_WORD  shift, and go to state 71

    $default  reduce using rule 36 (parameter-list-opt)

    identifier          go to state 72
    qname               go to state 73
    parameter-list-opt  go to state 92
    parameter-list      go to state 93
    parameter-decl      go to state 94
    type-expr           go to state 78


State 66

   54 type-expr: "`[`" . type-expr "`]`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 65
    "`[`"         shift, and go to state 66
    DBLCOLON      shift, and go to state 16
    BOOL          shift, and go to state 67
    INT           shift, and go to state 68
    FLOAT         shift, and go to state 69
    STRING_WORD   shift, and go to state 70
    DECIMAL_WORD  shift, and go to state 71

    identifier  go to state 21
    qname       go to state 73
    type-expr   go to state 95


State 67

   48 type-expr: BOOL .

    $default  reduce using rule 48 (type-expr)


State 68

   49 type-expr: INT .

    $default  reduce using rule 49 (type-expr)


State 69

   50 type-expr: FLOAT .

    $default  reduce using rule 50 (type-expr)


State 70

   51 type-expr: STRING_WORD .

    $default  reduce using rule 51 (type-expr)


State 71

   52 type-expr: DECIMAL_WORD .

    $default  reduce using rule 52 (type-expr)


State 72

   21 qname: identifier .
   40 parameter-decl: identifier . "`:`" type-expr

    "`:`"  shift, and go to state 96

    $default  reduce using rule 21 (qname)


State 73

   22 qname: qname . DBLCOLON identifier
   53 type-expr: qname .

    DBLCOLON  shift, and go to state 40

    $default  reduce using rule 53 (type-expr)


State 74

   46 parameter-woa-decl: parameter-decl .
   47                   | parameter-decl . ASSIGN expression

    ASSIGN  shift, and go to state 97

    $default  reduce using rule 46 (parameter-woa-decl)


State 75

   23 fn-decl: FN qname "`(`" parameter-woa-list-opt . "`)`" "`{`" infunction_declaration_any "`}`"
   24        | FN qname "`(`" parameter-woa-list-opt . "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`)`"  shift, and go to state 98


State 76

   43 parameter-woa-list-opt: parameter-woa-list .
   45 parameter-woa-list: parameter-woa-list . "," parameter-woa-decl

    ","  shift, and go to state 99

    $default  reduce using rule 43 (parameter-woa-list-opt)


State 77

   44 parameter-woa-list: parameter-woa-decl .

    $default  reduce using rule 44 (parameter-woa-list)


State 78

   41 parameter-decl: type-expr .
   56 type-expr: type-expr . "`[`" INTEGER "`]`"
   57          | type-expr . "`|`" type-expr
   58          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 100
    "`[`"   shift, and go to state 101
    "`|`"   shift, and go to state 102

    $default  reduce using rule 41 (parameter-decl)


State 79

   30 case-decl: identifier .

    $default  reduce using rule 30 (case-decl)


State 80

   25 enum-decl: ENUM qname "`{`" case-list-opt . "`}`"

    "`}`"  shift, and go to state 103


State 81

   27 case-list-opt: case-list .
   29 case-list: case-list . "," case-decl

    ","  shift, and go to state 104

    $default  reduce using rule 27 (case-list-opt)


State 82

   28 case-list: case-decl .

    $default  reduce using rule 28 (case-list)


State 83

   22 qname: qname . DBLCOLON identifier
   34 type-extension-list: qname .

    DBLCOLON  shift, and go to state 40

    $default  reduce using rule 34 (type-extension-list)


State 84

   33 type-extension-any: EXTENDS type-extension-list .
   35 type-extension-list: type-extension-list . "," qname

    ","  shift, and go to state 105

    $default  reduce using rule 33 (type-extension-any)


State 85

   31 type-decl: TYPE qname type-extension-any "`{`" . parameter-woa-list-opt "`}`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 65
    "`[`"         shift, and go to state 66
    DBLCOLON      shift, and go to state 16
    BOOL          shift, and go to state 67
    INT           shift, and go to state 68
    FLOAT         shift, and go to state 69
    STRING_WORD   shift, and go to state 70
    DECIMAL_WORD  shift, and go to state 71

    $default  reduce using rule 42 (parameter-woa-list-opt)

    identifier              go to state 72
    qname                   go to state 73
    parameter-decl          go to state 74
    parameter-woa-list-opt  go to state 106
    parameter-woa-list      go to state 76
    parameter-woa-decl      go to state 77
    type-expr               go to state 78


State 86

   77 opt-named-expr: identifier "`:`" . expression

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    DECIMAL        shift, and go to state 8
    INTEGER        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    DBLCOLON       shift, and go to state 16

    identifier           go to state 21
    qname                go to state 22
    compound-expression  go to state 28
    expression           go to state 107


State 87

   59 compound-expression: expression "`(`" opt-named-expr-list-any "`)`" .

    $default  reduce using rule 59 (compound-expression)


State 88

   76 opt-named-expr-list: opt-named-expr-list "," . opt-named-expr

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    DECIMAL        shift, and go to state 8
    INTEGER        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    DBLCOLON       shift, and go to state 16

    identifier           go to state 55
    qname                go to state 22
    compound-expression  go to state 28
    expression           go to state 56
    opt-named-expr       go to state 108


State 89

   11 generic-decl: LET identifier ASSIGN expression "`;`" .

    $default  reduce using rule 11 (generic-decl)


State 90

    7 generic-decl: EXTERN VAR identifier "`:`" type-expr . "`;`"
   56 type-expr: type-expr . "`[`" INTEGER "`]`"
   57          | type-expr . "`|`" type-expr
   58          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 100
    "`[`"   shift, and go to state 101
    "`;`"   shift, and go to state 109
    "`|`"   shift, and go to state 102


State 91

    8 generic-decl: EXTERN FN qname "`(`" parameter-woa-list-opt . "`)`" "`;`"
    9             | EXTERN FN qname "`(`" parameter-woa-list-opt . "`)`" "`->`" type-expr "`;`"

    "`)`"  shift, and go to state 110


State 92

   55 type-expr: "`(`" parameter-list-opt . "`)`"

    "`)`"  shift, and go to state 111


State 93

   37 parameter-list-opt: parameter-list .
   39 parameter-list: parameter-list . "," parameter-decl

    ","  shift, and go to state 112

    $default  reduce using rule 37 (parameter-list-opt)


State 94

   38 parameter-list: parameter-decl .

    $default  reduce using rule 38 (parameter-list)


State 95

   54 type-expr: "`[`" type-expr . "`]`"
   56          | type-expr . "`[`" INTEGER "`]`"
   57          | type-expr . "`|`" type-expr
   58          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 100
    "`[`"   shift, and go to state 101
    "`]`"   shift, and go to state 113
    "`|`"   shift, and go to state 102


State 96

   40 parameter-decl: identifier "`:`" . type-expr

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 65
    "`[`"         shift, and go to state 66
    DBLCOLON      shift, and go to state 16
    BOOL          shift, and go to state 67
    INT           shift, and go to state 68
    FLOAT         shift, and go to state 69
    STRING_WORD   shift, and go to state 70
    DECIMAL_WORD  shift, and go to state 71

    identifier  go to state 21
    qname       go to state 73
    type-expr   go to state 114


State 97

   47 parameter-woa-decl: parameter-decl ASSIGN . expression

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    DECIMAL        shift, and go to state 8
    INTEGER        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    DBLCOLON       shift, and go to state 16

    identifier           go to state 21
    qname                go to state 22
    compound-expression  go to state 28
    expression           go to state 115


State 98

   23 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" . "`{`" infunction_declaration_any "`}`"
   24        | FN qname "`(`" parameter-woa-list-opt "`)`" . "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`->`"  shift, and go to state 116
    "`{`"   shift, and go to state 117


State 99

   45 parameter-woa-list: parameter-woa-list "," . parameter-woa-decl

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 65
    "`[`"         shift, and go to state 66
    DBLCOLON      shift, and go to state 16
    BOOL          shift, and go to state 67
    INT           shift, and go to state 68
    FLOAT         shift, and go to state 69
    STRING_WORD   shift, and go to state 70
    DECIMAL_WORD  shift, and go to state 71

    identifier          go to state 72
    qname               go to state 73
    parameter-decl      go to state 74
    parameter-woa-decl  go to state 118
    type-expr           go to state 78


State 100

   58 type-expr: type-expr "`->`" . type-expr

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 65
    "`[`"         shift, and go to state 66
    DBLCOLON      shift, and go to state 16
    BOOL          shift, and go to state 67
    INT           shift, and go to state 68
    FLOAT         shift, and go to state 69
    STRING_WORD   shift, and go to state 70
    DECIMAL_WORD  shift, and go to state 71

    identifier  go to state 21
    qname       go to state 73
    type-expr   go to state 119


State 101

   56 type-expr: type-expr "`[`" . INTEGER "`]`"

    INTEGER  shift, and go to state 120


State 102

   57 type-expr: type-expr "`|`" . type-expr

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 65
    "`[`"         shift, and go to state 66
    DBLCOLON      shift, and go to state 16
    BOOL          shift, and go to state 67
    INT           shift, and go to state 68
    FLOAT         shift, and go to state 69
    STRING_WORD   shift, and go to state 70
    DECIMAL_WORD  shift, and go to state 71

    identifier  go to state 21
    qname       go to state 73
    type-expr   go to state 121


State 103

   25 enum-decl: ENUM qname "`{`" case-list-opt "`}`" .

    $default  reduce using rule 25 (enum-decl)


State 104

   29 case-list: case-list "," . case-decl

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 79
    case-decl   go to state 122


State 105

   35 type-extension-list: type-extension-list "," . qname

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 16

    identifier  go to state 21
    qname       go to state 123


State 106

   31 type-decl: TYPE qname type-extension-any "`{`" parameter-woa-list-opt . "`}`"

    "`}`"  shift, and go to state 124


State 107

   59 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   60                    | expression . ASSIGN expression
   77 opt-named-expr: identifier "`:`" expression .

    "`(`"   shift, and go to state 42
    ASSIGN  shift, and go to state 43

    $default  reduce using rule 77 (opt-named-expr)


State 108

   76 opt-named-expr-list: opt-named-expr-list "," opt-named-expr .

    $default  reduce using rule 76 (opt-named-expr-list)


State 109

    7 generic-decl: EXTERN VAR identifier "`:`" type-expr "`;`" .

    $default  reduce using rule 7 (generic-decl)


State 110

    8 generic-decl: EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" . "`;`"
    9             | EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" . "`->`" type-expr "`;`"

    "`->`"  shift, and go to state 125
    "`;`"   shift, and go to state 126


State 111

   55 type-expr: "`(`" parameter-list-opt "`)`" .

    $default  reduce using rule 55 (type-expr)


State 112

   39 parameter-list: parameter-list "," . parameter-decl

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 65
    "`[`"         shift, and go to state 66
    DBLCOLON      shift, and go to state 16
    BOOL          shift, and go to state 67
    INT           shift, and go to state 68
    FLOAT         shift, and go to state 69
    STRING_WORD   shift, and go to state 70
    DECIMAL_WORD  shift, and go to state 71

    identifier      go to state 72
    qname           go to state 73
    parameter-decl  go to state 127
    type-expr       go to state 78


State 113

   54 type-expr: "`[`" type-expr "`]`" .

    $default  reduce using rule 54 (type-expr)


State 114

   40 parameter-decl: identifier "`:`" type-expr .
   56 type-expr: type-expr . "`[`" INTEGER "`]`"
   57          | type-expr . "`|`" type-expr
   58          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 100
    "`[`"   shift, and go to state 101
    "`|`"   shift, and go to state 102

    $default  reduce using rule 40 (parameter-decl)


State 115

   47 parameter-woa-decl: parameter-decl ASSIGN expression .
   59 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   60                    | expression . ASSIGN expression

    "`(`"   shift, and go to state 42
    ASSIGN  shift, and go to state 43

    $default  reduce using rule 47 (parameter-woa-decl)


State 116

   24 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" . type-expr "`{`" infunction_declaration_any "`}`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 65
    "`[`"         shift, and go to state 66
    DBLCOLON      shift, and go to state 16
    BOOL          shift, and go to state 67
    INT           shift, and go to state 68
    FLOAT         shift, and go to state 69
    STRING_WORD   shift, and go to state 70
    DECIMAL_WORD  shift, and go to state 71

    identifier  go to state 21
    qname       go to state 73
    type-expr   go to state 128


State 117

   23 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`{`" . infunction_declaration_any "`}`"

    $default  reduce using rule 13 (infunction_declaration_any)

    infunction_declaration_any  go to state 129


State 118

   45 parameter-woa-list: parameter-woa-list "," parameter-woa-decl .

    $default  reduce using rule 45 (parameter-woa-list)


State 119

   56 type-expr: type-expr . "`[`" INTEGER "`]`"
   57          | type-expr . "`|`" type-expr
   58          | type-expr . "`->`" type-expr
   58          | type-expr "`->`" type-expr .

    $default  reduce using rule 58 (type-expr)


State 120

   56 type-expr: type-expr "`[`" INTEGER . "`]`"

    "`]`"  shift, and go to state 130


State 121

   56 type-expr: type-expr . "`[`" INTEGER "`]`"
   57          | type-expr . "`|`" type-expr
   57          | type-expr "`|`" type-expr .
   58          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 100
    "`[`"   shift, and go to state 101

    $default  reduce using rule 57 (type-expr)


State 122

   29 case-list: case-list "," case-decl .

    $default  reduce using rule 29 (case-list)


State 123

   22 qname: qname . DBLCOLON identifier
   35 type-extension-list: type-extension-list "," qname .

    DBLCOLON  shift, and go to state 40

    $default  reduce using rule 35 (type-extension-list)


State 124

   31 type-decl: TYPE qname type-extension-any "`{`" parameter-woa-list-opt "`}`" .

    $default  reduce using rule 31 (type-decl)


State 125

    9 generic-decl: EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" . type-expr "`;`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 65
    "`[`"         shift, and go to state 66
    DBLCOLON      shift, and go to state 16
    BOOL          shift, and go to state 67
    INT           shift, and go to state 68
    FLOAT         shift, and go to state 69
    STRING_WORD   shift, and go to state 70
    DECIMAL_WORD  shift, and go to state 71

    identifier  go to state 21
    qname       go to state 73
    type-expr   go to state 131


State 126

    8 generic-decl: EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" "`;`" .

    $default  reduce using rule 8 (generic-decl)


State 127

   39 parameter-list: parameter-list "," parameter-decl .

    $default  reduce using rule 39 (parameter-list)


State 128

   24 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr . "`{`" infunction_declaration_any "`}`"
   56 type-expr: type-expr . "`[`" INTEGER "`]`"
   57          | type-expr . "`|`" type-expr
   58          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 100
    "`{`"   shift, and go to state 132
    "`[`"   shift, and go to state 101
    "`|`"   shift, and go to state 102


State 129

   14 infunction_declaration_any: infunction_declaration_any . "`;`"
   15                           | infunction_declaration_any . opt-infunction-decl
   23 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any . "`}`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    DECIMAL        shift, and go to state 8
    INTEGER        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`}`"          shift, and go to state 133
    "`[`"          shift, and go to state 11
    "`;`"          shift, and go to state 134
    "`.`"          shift, and go to state 13
    LET            shift, and go to state 135
    RETURN         shift, and go to state 136
    DBLCOLON       shift, and go to state 16

    opt-infunction-decl  go to state 137
    identifier           go to state 21
    qname                go to state 22
    compound-expression  go to state 138
    expression           go to state 27


State 130

   56 type-expr: type-expr "`[`" INTEGER "`]`" .

    $default  reduce using rule 56 (type-expr)


State 131

    9 generic-decl: EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr . "`;`"
   56 type-expr: type-expr . "`[`" INTEGER "`]`"
   57          | type-expr . "`|`" type-expr
   58          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 100
    "`[`"   shift, and go to state 101
    "`;`"   shift, and go to state 139
    "`|`"   shift, and go to state 102


State 132

   24 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" . infunction_declaration_any "`}`"

    $default  reduce using rule 13 (infunction_declaration_any)

    infunction_declaration_any  go to state 140


State 133

   23 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`" .

    $default  reduce using rule 23 (fn-decl)


State 134

   14 infunction_declaration_any: infunction_declaration_any "`;`" .

    $default  reduce using rule 14 (infunction_declaration_any)


State 135

   16 opt-infunction-decl: LET . identifier ASSIGN expression "`;`"

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 141


State 136

   17 opt-infunction-decl: RETURN . expression "`;`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    DECIMAL        shift, and go to state 8
    INTEGER        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    DBLCOLON       shift, and go to state 16

    identifier           go to state 21
    qname                go to state 22
    compound-expression  go to state 28
    expression           go to state 142


State 137

   15 infunction_declaration_any: infunction_declaration_any opt-infunction-decl .

    $default  reduce using rule 15 (infunction_declaration_any)


State 138

   18 opt-infunction-decl: compound-expression . "`;`"
   69 expression: compound-expression .

    "`;`"  shift, and go to state 143

    $default  reduce using rule 69 (expression)


State 139

    9 generic-decl: EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`;`" .

    $default  reduce using rule 9 (generic-decl)


State 140

   14 infunction_declaration_any: infunction_declaration_any . "`;`"
   15                           | infunction_declaration_any . opt-infunction-decl
   24 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any . "`}`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    DECIMAL        shift, and go to state 8
    INTEGER        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`}`"          shift, and go to state 144
    "`[`"          shift, and go to state 11
    "`;`"          shift, and go to state 134
    "`.`"          shift, and go to state 13
    LET            shift, and go to state 135
    RETURN         shift, and go to state 136
    DBLCOLON       shift, and go to state 16

    opt-infunction-decl  go to state 137
    identifier           go to state 21
    qname                go to state 22
    compound-expression  go to state 138
    expression           go to state 27


State 141

   16 opt-infunction-decl: LET identifier . ASSIGN expression "`;`"

    ASSIGN  shift, and go to state 145


State 142

   17 opt-infunction-decl: RETURN expression . "`;`"
   59 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   60                    | expression . ASSIGN expression

    "`(`"   shift, and go to state 42
    "`;`"   shift, and go to state 146
    ASSIGN  shift, and go to state 43


State 143

   18 opt-infunction-decl: compound-expression "`;`" .

    $default  reduce using rule 18 (opt-infunction-decl)


State 144

   24 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`" .

    $default  reduce using rule 24 (fn-decl)


State 145

   16 opt-infunction-decl: LET identifier ASSIGN . expression "`;`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    DECIMAL        shift, and go to state 8
    INTEGER        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    DBLCOLON       shift, and go to state 16

    identifier           go to state 21
    qname                go to state 22
    compound-expression  go to state 28
    expression           go to state 147


State 146

   17 opt-infunction-decl: RETURN expression "`;`" .

    $default  reduce using rule 17 (opt-infunction-decl)


State 147

   16 opt-infunction-decl: LET identifier ASSIGN expression . "`;`"
   59 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   60                    | expression . ASSIGN expression

    "`(`"   shift, and go to state 42
    "`;`"   shift, and go to state 148
    ASSIGN  shift, and go to state 43


State 148

   16 opt-infunction-decl: LET identifier ASSIGN expression "`;`" .

    $default  reduce using rule 16 (opt-infunction-decl)
