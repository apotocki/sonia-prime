Nonterminals useless in grammar

    type-decl
    type-extension-any
    type-extension-list
    parameter-woa-list-opt
    parameter-woa-list
    parameter-woa-decl
    expression-list-any


Terminals unused in grammar

    COMMENT_BEGIN
    COMMENT_END
    OPERATOR_TERM
    "`->*`"
    "`~>`"
    "`.*`"
    "`++`"
    "`--`"
    "`<<`"
    "`>>`"
    "`<=`"
    "`>=`"
    "`&&`"
    "`||`"
    "`..`"
    "`+=`"
    "`-=`"
    "`*=`"
    "`/=`"
    "`%=`"
    "`<<=`"
    "`>>=`"
    "`&=`"
    "`|=`"
    "`^=`"
    "`<`"
    "`>`"
    "`.`"
    "`-`"
    "`*`"
    "`/`"
    "`%`"
    "`&`"
    "`~`"
    "`^`"
    "`$`"
    "`?`"
    "`#`"
    FOR
    VOID_
    AUTO
    CONST_
    USING
    THROW
    DELETE_
    SIZEOF
    LOWEST
    TYPE
    EXTENDS


Rules useless in grammar

  103 type-decl: TYPE qname type-extension-any "`{`" parameter-woa-list-opt "`}`"

  104 type-extension-any: %empty
  105                   | EXTENDS type-extension-list

  106 type-extension-list: qname
  107                    | type-extension-list "," qname

  108 parameter-woa-list-opt: %empty
  109                       | parameter-woa-list

  110 parameter-woa-list: parameter-woa-decl
  111                   | parameter-woa-list "," parameter-woa-decl

  112 parameter-woa-decl: parameter-decl
  113                   | parameter-decl "`=`" syntax-expression

  114 expression-list-any: %empty
  115                    | syntax-expression
  116                    | expression-list-any "," syntax-expression


Grammar

    0 $accept: begin "end of file"

    1 begin: statement_any "end of file"

    2 statement_any: %empty
    3              | statement_any "`;`"
    4              | statement_any statement

    5 statement: EXTERN VAR identifier "`:`" type-expr "`;`"
    6          | EXTERN "`fn`" fn-decl "`;`"
    7          | INCLUDE STRING
    8          | enum-decl
    9          | fn-start-decl fn-decl "`{`" infunction-statement-any "`}`"
   10          | fn-start-decl fn-decl "`=>`" syntax-expression "`;`"
   11          | generic-statement

   12 let-decl: let-decl-start-with-opt-type "`;`"
   13         | let-decl-start-with-opt-type "`=`" syntax-expression "`;`"

   14 let-decl-start: LET identifier
   15               | LET "weak modifier" identifier

   16 let-decl-start-with-opt-type: let-decl-start
   17                             | let-decl-start "`:`" type-expr

   18 infunction-statement-any: %empty
   19                         | infunction-statement-any "`;`"
   20                         | infunction-statement-any infunction-statement

   21 generic-statement: let-decl
   22                  | RETURN syntax-expression "`;`"
   23                  | WHILE syntax-expression "`{`" infunction-statement-any "`}`"
   24                  | IF syntax-expression "`{`" infunction-statement-any "`}`"
   25                  | compound-expression "`;`"

   26 infunction-statement: generic-statement
   27                     | "break"
   28                     | "continue"

   29 identifier: IDENTIFIER

   30 qname: "`::`" identifier
   31      | identifier
   32      | qname "`::`" identifier

   33 fn-start-decl: "`fn`"
   34              | INLINE "`fn`"

   35 fn-decl: qname "`(`" parameter-list-opt "`)`"
   36        | qname "`(`" parameter-list-opt "`)`" "`->`" syntax-expression

   37 enum-decl: ENUM qname "`{`" case-list-opt "`}`"

   38 case-list-opt: %empty
   39              | case-list

   40 case-list: case-decl
   41          | case-list "," case-decl

   42 case-decl: identifier

   43 field-list-opt: %empty
   44               | field-list

   45 field-list: field-decl
   46           | field-list "," field-decl

   47 field-decl: IDENTIFIER "`:`" type-expr
   48           | type-expr

   49 parameter-name-decl: IDENTIFIER INTERNAL_IDENTIFIER "`:`"
   50                    | IDENTIFIER "`:`"
   51                    | INTERNAL_IDENTIFIER "`:`"

   52 parameter-constraint-modifier: TYPENAME
   53                              | "const modifier"

   54 parameter-constraint-modifier-opt: parameter-constraint-modifier
   55                                  | %empty

   56 parameter-constraint-set: syntax-expression-wo-ii
   57                         | INTERNAL_IDENTIFIER
   58                         | concept-expression
   59                         | parameter-constraint-set INTERNAL_IDENTIFIER
   60                         | parameter-constraint-set concept-expression

   61 concept-expression: "`@`" qname

   62 syntax-expression-wo-ii: "true"
   63                        | "false"
   64                        | INTEGER
   65                        | DECIMAL
   66                        | STRING
   67                        | RESERVED_IDENTIFIER
   68                        | qname
   69                        | "`(`" syntax-expression "`)`"
   70                        | "`!`" syntax-expression
   71                        | syntax-expression "`...`"
   72                        | syntax-expression "`+`" syntax-expression
   73                        | syntax-expression "`==`" syntax-expression
   74                        | syntax-expression "`!=`" syntax-expression
   75                        | compound-expression

   76 syntax-expression: INTERNAL_IDENTIFIER
   77                  | syntax-expression-wo-ii

   78 parameter-decl: parameter-name-decl parameter-constraint-modifier-opt parameter-constraint-set
   79               | parameter-constraint-modifier parameter-constraint-set
   80               | parameter-constraint-set
   81               | "`_`"

   82 parameter-list-opt: %empty
   83                   | parameter-list

   84 parameter-list: parameter-decl
   85               | parameter-list "," parameter-decl

   86 type-expr: qname
   87          | qname "`(`" opt-named-expr-list-any "`)`"
   88          | INTERNAL_IDENTIFIER
   89          | INTERNAL_IDENTIFIER "`(`" opt-named-expr-list-any "`)`"
   90          | "`[`" type-expr "`]`"
   91          | "`(`" field-list-opt "`)`"
   92          | type-expr "`[`" INTEGER "`]`"
   93          | type-expr "`|`" type-expr
   94          | type-expr "`->`" type-expr

   95 compound-expression: syntax-expression "`(`" opt-named-expr-list-any "`)`"
   96                    | syntax-expression "`=`" syntax-expression

   97 opt-named-expr-list-any: %empty
   98                        | opt-named-expr-list

   99 opt-named-expr-list: opt-named-expr
  100                    | opt-named-expr-list "," opt-named-expr

  101 opt-named-expr: IDENTIFIER "`:`" syntax-expression
  102               | syntax-expression


Terminals, with rules where they appear

    "end of file" (0) 0 1
    error (256)
    COMMENT_BEGIN (258)
    COMMENT_END (259)
    STRING <sonia::lang::bang::annotated_string_view> (260) 7 66
    IDENTIFIER <sonia::lang::bang::annotated_string_view> (261) 29 47 49 50 101
    INTERNAL_IDENTIFIER <sonia::lang::bang::annotated_string_view> (262) 49 51 57 59 76 88 89
    RESERVED_IDENTIFIER <sonia::lang::bang::annotated_string_view> (263) 67
    INTEGER <sonia::lang::bang::annotated_integer> (264) 64 92
    DECIMAL <sonia::lang::bang::annotated_decimal> (265) 65
    OPERATOR_TERM <sonia::string_view> (266)
    "`=`" <sonia::lang::lex::resource_location> (267) 13 96
    "`@`" (268) 61
    "`_`" (269) 81
    "`->*`" (270)
    "`->`" (271) 36 94
    "`=>`" (272) 10
    "`~>`" (273)
    "`.*`" (274)
    "`++`" (275)
    "`--`" (276)
    "`<<`" (277)
    "`>>`" (278)
    "`<=`" (279)
    "`>=`" (280)
    "`==`" <sonia::lang::lex::resource_location> (281) 73
    "`!=`" <sonia::lang::lex::resource_location> (282) 74
    "`&&`" <sonia::lang::lex::resource_location> (283)
    "`||`" <sonia::lang::lex::resource_location> (284)
    "`..`" <sonia::lang::lex::resource_location> (285)
    "`...`" <sonia::lang::lex::resource_location> (286) 71
    "`+=`" (287)
    "`-=`" (288)
    "`*=`" (289)
    "`/=`" (290)
    "`%=`" (291)
    "`<<=`" (292)
    "`>>=`" (293)
    "`&=`" (294)
    "`|=`" (295)
    "`^=`" (296)
    "`:`" (297) 5 17 47 49 50 51 101
    "`::`" (298) 30 32
    "`(`" <sonia::lang::lex::resource_location> (299) 35 36 69 87 89 91 95
    "`)`" (300) 35 36 69 87 89 91 95
    "`{`" <sonia::lang::lex::resource_location> (301) 9 23 24 37
    "`}`" (302) 9 23 24 37
    "`[`" <sonia::lang::lex::resource_location> (303) 90 92
    "`]`" (304) 90 92
    "`<`" (305)
    "`>`" (306)
    "`;`" (307) 3 5 6 10 12 13 19 22 25
    "`.`" <sonia::lang::lex::resource_location> (308)
    "`+`" <sonia::lang::lex::resource_location> (309) 72
    "`-`" (310)
    "`*`" (311)
    "`/`" (312)
    "`%`" (313)
    "`&`" (314)
    "`|`" (315) 93
    "`!`" <sonia::lang::lex::resource_location> (316) 70
    "`~`" (317)
    "`^`" (318)
    "," (319) 41 46 85 100
    "`$`" (320)
    "`?`" (321)
    "`#`" (322)
    LET (323) 14 15
    VAR (324) 5
    EXTERN (325) 5 6
    "continue" <sonia::lang::lex::resource_location> (326) 28
    "break" <sonia::lang::lex::resource_location> (327) 27
    RETURN (328) 22
    FOR (329)
    VOID_ (330)
    AUTO (331)
    CONST_ (332)
    USING (333)
    THROW (334)
    DELETE_ (335)
    SIZEOF (336)
    LOWEST (337)
    INCLUDE (338) 7
    INLINE (339) 34
    "`fn`" <sonia::lang::lex::resource_location> (340) 6 33 34
    ENUM (341) 37
    TYPE (342)
    EXTENDS (343)
    TYPENAME (344) 52
    "weak modifier" (345) 15
    "const modifier" (346) 53
    WHILE (347) 23
    IF (348) 24
    "true" <annotated_bool> (349) 62
    "false" <annotated_bool> (350) 63


Nonterminals, with rules where they appear

    $accept (96)
        on left: 0
    begin (97)
        on left: 1
        on right: 0
    statement_any <declaration_set_t> (98)
        on left: 2 3 4
        on right: 1 3 4
    statement <declaration> (99)
        on left: 5 6 7 8 9 10 11
        on right: 4
    let-decl <let_statement_decl_t> (100)
        on left: 12 13
        on right: 21
    let-decl-start <let_statement_decl_t> (101)
        on left: 14 15
        on right: 16 17
    let-decl-start-with-opt-type <let_statement_decl_t> (102)
        on left: 16 17
        on right: 12 13
    infunction-statement-any <infunction_declaration_set_t> (103)
        on left: 18 19 20
        on right: 9 19 20 23 24
    generic-statement <generic_statement> (104)
        on left: 21 22 23 24 25
        on right: 11 26
    infunction-statement <infunction_declaration> (105)
        on left: 26 27 28
        on right: 20
    identifier <sonia::lang::bang::annotated_identifier> (106)
        on left: 29
        on right: 5 14 15 30 31 32 42
    qname <sonia::lang::bang::annotated_qname> (107)
        on left: 30 31 32
        on right: 32 35 36 37 61 68 86 87
    fn-start-decl <fn_kind> (108)
        on left: 33 34
        on right: 9 10
    fn-decl <fn_pure_t> (109)
        on left: 35 36
        on right: 6 9 10
    enum-decl <enum_decl> (110)
        on left: 37
        on right: 8
    case-list-opt <std::vector<sonia::lang::bang::identifier>> (111)
        on left: 38 39
        on right: 37
    case-list <std::vector<sonia::lang::bang::identifier>> (112)
        on left: 40 41
        on right: 39 41
    case-decl <sonia::lang::bang::identifier> (113)
        on left: 42
        on right: 40 41
    field-list-opt <field_list_t> (114)
        on left: 43 44
        on right: 91
    field-list <field_list_t> (115)
        on left: 45 46
        on right: 44 46
    field-decl <field_t> (116)
        on left: 47 48
        on right: 45 46
    parameter-name-decl <parameter_name> (117)
        on left: 49 50 51
        on right: 78
    parameter-constraint-modifier <parameter_constraint_modifier_t> (118)
        on left: 52 53
        on right: 54 79
    parameter-constraint-modifier-opt <parameter_constraint_modifier_t> (119)
        on left: 54 55
        on right: 78
    parameter-constraint-set <parameter_constraint_set_t> (120)
        on left: 56 57 58 59 60
        on right: 59 60 78 79 80
    concept-expression <syntax_expression_t> (121)
        on left: 61
        on right: 58 60
    syntax-expression-wo-ii <syntax_expression_t> (122)
        on left: 62 63 64 65 66 67 68 69 70 71 72 73 74 75
        on right: 56 77
    syntax-expression <syntax_expression_t> (123)
        on left: 76 77
        on right: 10 13 22 23 24 36 69 70 71 72 73 74 95 96 101 102
    parameter-decl <parameter_t> (124)
        on left: 78 79 80 81
        on right: 84 85
    parameter-list-opt <parameter_woa_list_t> (125)
        on left: 82 83
        on right: 35 36
    parameter-list <parameter_woa_list_t> (126)
        on left: 84 85
        on right: 83 85
    type-expr <bang_preliminary_type> (127)
        on left: 86 87 88 89 90 91 92 93 94
        on right: 5 17 47 48 90 92 93 94
    compound-expression <syntax_expression_t> (128)
        on left: 95 96
        on right: 25 75
    opt-named-expr-list-any <named_expression_term_list_t> (129)
        on left: 97 98
        on right: 87 89 95
    opt-named-expr-list <named_expression_term_list_t> (130)
        on left: 99 100
        on right: 98 100
    opt-named-expr <named_expression_term_t> (131)
        on left: 101 102
        on right: 99 100


State 0

    0 $accept: . begin "end of file"

    $default  reduce using rule 2 (statement_any)

    begin          go to state 1
    statement_any  go to state 2


State 1

    0 $accept: begin . "end of file"

    "end of file"  shift, and go to state 3


State 2

    1 begin: statement_any . "end of file"
    3 statement_any: statement_any . "`;`"
    4              | statement_any . statement

    "end of file"        shift, and go to state 4
    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`;`"                shift, and go to state 13
    "`!`"                shift, and go to state 14
    LET                  shift, and go to state 15
    EXTERN               shift, and go to state 16
    RETURN               shift, and go to state 17
    INCLUDE              shift, and go to state 18
    INLINE               shift, and go to state 19
    "`fn`"               shift, and go to state 20
    ENUM                 shift, and go to state 21
    WHILE                shift, and go to state 22
    IF                   shift, and go to state 23
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    statement                     go to state 26
    let-decl                      go to state 27
    let-decl-start                go to state 28
    let-decl-start-with-opt-type  go to state 29
    generic-statement             go to state 30
    identifier                    go to state 31
    qname                         go to state 32
    fn-start-decl                 go to state 33
    enum-decl                     go to state 34
    syntax-expression-wo-ii       go to state 35
    syntax-expression             go to state 36
    compound-expression           go to state 37


State 3

    0 $accept: begin "end of file" .

    $default  accept


State 4

    1 begin: statement_any "end of file" .

    $default  reduce using rule 1 (begin)


State 5

   66 syntax-expression-wo-ii: STRING .

    $default  reduce using rule 66 (syntax-expression-wo-ii)


State 6

   29 identifier: IDENTIFIER .

    $default  reduce using rule 29 (identifier)


State 7

   76 syntax-expression: INTERNAL_IDENTIFIER .

    $default  reduce using rule 76 (syntax-expression)


State 8

   67 syntax-expression-wo-ii: RESERVED_IDENTIFIER .

    $default  reduce using rule 67 (syntax-expression-wo-ii)


State 9

   64 syntax-expression-wo-ii: INTEGER .

    $default  reduce using rule 64 (syntax-expression-wo-ii)


State 10

   65 syntax-expression-wo-ii: DECIMAL .

    $default  reduce using rule 65 (syntax-expression-wo-ii)


State 11

   30 qname: "`::`" . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 38


State 12

   69 syntax-expression-wo-ii: "`(`" . syntax-expression "`)`"

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 31
    qname                    go to state 32
    syntax-expression-wo-ii  go to state 35
    syntax-expression        go to state 39
    compound-expression      go to state 40


State 13

    3 statement_any: statement_any "`;`" .

    $default  reduce using rule 3 (statement_any)


State 14

   70 syntax-expression-wo-ii: "`!`" . syntax-expression

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 31
    qname                    go to state 32
    syntax-expression-wo-ii  go to state 35
    syntax-expression        go to state 41
    compound-expression      go to state 40


State 15

   14 let-decl-start: LET . identifier
   15               | LET . "weak modifier" identifier

    IDENTIFIER       shift, and go to state 6
    "weak modifier"  shift, and go to state 42

    identifier  go to state 43


State 16

    5 statement: EXTERN . VAR identifier "`:`" type-expr "`;`"
    6          | EXTERN . "`fn`" fn-decl "`;`"

    VAR     shift, and go to state 44
    "`fn`"  shift, and go to state 45


State 17

   22 generic-statement: RETURN . syntax-expression "`;`"

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 31
    qname                    go to state 32
    syntax-expression-wo-ii  go to state 35
    syntax-expression        go to state 46
    compound-expression      go to state 40


State 18

    7 statement: INCLUDE . STRING

    STRING  shift, and go to state 47


State 19

   34 fn-start-decl: INLINE . "`fn`"

    "`fn`"  shift, and go to state 48


State 20

   33 fn-start-decl: "`fn`" .

    $default  reduce using rule 33 (fn-start-decl)


State 21

   37 enum-decl: ENUM . qname "`{`" case-list-opt "`}`"

    IDENTIFIER  shift, and go to state 6
    "`::`"      shift, and go to state 11

    identifier  go to state 31
    qname       go to state 49


State 22

   23 generic-statement: WHILE . syntax-expression "`{`" infunction-statement-any "`}`"

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 31
    qname                    go to state 32
    syntax-expression-wo-ii  go to state 35
    syntax-expression        go to state 50
    compound-expression      go to state 40


State 23

   24 generic-statement: IF . syntax-expression "`{`" infunction-statement-any "`}`"

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 31
    qname                    go to state 32
    syntax-expression-wo-ii  go to state 35
    syntax-expression        go to state 51
    compound-expression      go to state 40


State 24

   62 syntax-expression-wo-ii: "true" .

    $default  reduce using rule 62 (syntax-expression-wo-ii)


State 25

   63 syntax-expression-wo-ii: "false" .

    $default  reduce using rule 63 (syntax-expression-wo-ii)


State 26

    4 statement_any: statement_any statement .

    $default  reduce using rule 4 (statement_any)


State 27

   21 generic-statement: let-decl .

    $default  reduce using rule 21 (generic-statement)


State 28

   16 let-decl-start-with-opt-type: let-decl-start .
   17                             | let-decl-start . "`:`" type-expr

    "`:`"  shift, and go to state 52

    $default  reduce using rule 16 (let-decl-start-with-opt-type)


State 29

   12 let-decl: let-decl-start-with-opt-type . "`;`"
   13         | let-decl-start-with-opt-type . "`=`" syntax-expression "`;`"

    "`=`"  shift, and go to state 53
    "`;`"  shift, and go to state 54


State 30

   11 statement: generic-statement .

    $default  reduce using rule 11 (statement)


State 31

   31 qname: identifier .

    $default  reduce using rule 31 (qname)


State 32

   32 qname: qname . "`::`" identifier
   68 syntax-expression-wo-ii: qname .

    "`::`"  shift, and go to state 55

    $default  reduce using rule 68 (syntax-expression-wo-ii)


State 33

    9 statement: fn-start-decl . fn-decl "`{`" infunction-statement-any "`}`"
   10          | fn-start-decl . fn-decl "`=>`" syntax-expression "`;`"

    IDENTIFIER  shift, and go to state 6
    "`::`"      shift, and go to state 11

    identifier  go to state 31
    qname       go to state 56
    fn-decl     go to state 57


State 34

    8 statement: enum-decl .

    $default  reduce using rule 8 (statement)


State 35

   77 syntax-expression: syntax-expression-wo-ii .

    $default  reduce using rule 77 (syntax-expression)


State 36

   71 syntax-expression-wo-ii: syntax-expression . "`...`"
   72                        | syntax-expression . "`+`" syntax-expression
   73                        | syntax-expression . "`==`" syntax-expression
   74                        | syntax-expression . "`!=`" syntax-expression
   95 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
   96                    | syntax-expression . "`=`" syntax-expression

    "`=`"    shift, and go to state 58
    "`==`"   shift, and go to state 59
    "`!=`"   shift, and go to state 60
    "`...`"  shift, and go to state 61
    "`(`"    shift, and go to state 62
    "`+`"    shift, and go to state 63


State 37

   25 generic-statement: compound-expression . "`;`"
   75 syntax-expression-wo-ii: compound-expression .

    "`;`"  shift, and go to state 64

    $default  reduce using rule 75 (syntax-expression-wo-ii)


State 38

   30 qname: "`::`" identifier .

    $default  reduce using rule 30 (qname)


State 39

   69 syntax-expression-wo-ii: "`(`" syntax-expression . "`)`"
   71                        | syntax-expression . "`...`"
   72                        | syntax-expression . "`+`" syntax-expression
   73                        | syntax-expression . "`==`" syntax-expression
   74                        | syntax-expression . "`!=`" syntax-expression
   95 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
   96                    | syntax-expression . "`=`" syntax-expression

    "`=`"    shift, and go to state 58
    "`==`"   shift, and go to state 59
    "`!=`"   shift, and go to state 60
    "`...`"  shift, and go to state 61
    "`(`"    shift, and go to state 62
    "`)`"    shift, and go to state 65
    "`+`"    shift, and go to state 63


State 40

   75 syntax-expression-wo-ii: compound-expression .

    $default  reduce using rule 75 (syntax-expression-wo-ii)


State 41

   70 syntax-expression-wo-ii: "`!`" syntax-expression .
   71                        | syntax-expression . "`...`"
   72                        | syntax-expression . "`+`" syntax-expression
   73                        | syntax-expression . "`==`" syntax-expression
   74                        | syntax-expression . "`!=`" syntax-expression
   95 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
   96                    | syntax-expression . "`=`" syntax-expression

    "`(`"  shift, and go to state 62

    $default  reduce using rule 70 (syntax-expression-wo-ii)


State 42

   15 let-decl-start: LET "weak modifier" . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 66


State 43

   14 let-decl-start: LET identifier .

    $default  reduce using rule 14 (let-decl-start)


State 44

    5 statement: EXTERN VAR . identifier "`:`" type-expr "`;`"

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 67


State 45

    6 statement: EXTERN "`fn`" . fn-decl "`;`"

    IDENTIFIER  shift, and go to state 6
    "`::`"      shift, and go to state 11

    identifier  go to state 31
    qname       go to state 56
    fn-decl     go to state 68


State 46

   22 generic-statement: RETURN syntax-expression . "`;`"
   71 syntax-expression-wo-ii: syntax-expression . "`...`"
   72                        | syntax-expression . "`+`" syntax-expression
   73                        | syntax-expression . "`==`" syntax-expression
   74                        | syntax-expression . "`!=`" syntax-expression
   95 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
   96                    | syntax-expression . "`=`" syntax-expression

    "`=`"    shift, and go to state 58
    "`==`"   shift, and go to state 59
    "`!=`"   shift, and go to state 60
    "`...`"  shift, and go to state 61
    "`(`"    shift, and go to state 62
    "`;`"    shift, and go to state 69
    "`+`"    shift, and go to state 63


State 47

    7 statement: INCLUDE STRING .

    $default  reduce using rule 7 (statement)


State 48

   34 fn-start-decl: INLINE "`fn`" .

    $default  reduce using rule 34 (fn-start-decl)


State 49

   32 qname: qname . "`::`" identifier
   37 enum-decl: ENUM qname . "`{`" case-list-opt "`}`"

    "`::`"  shift, and go to state 55
    "`{`"   shift, and go to state 70


State 50

   23 generic-statement: WHILE syntax-expression . "`{`" infunction-statement-any "`}`"
   71 syntax-expression-wo-ii: syntax-expression . "`...`"
   72                        | syntax-expression . "`+`" syntax-expression
   73                        | syntax-expression . "`==`" syntax-expression
   74                        | syntax-expression . "`!=`" syntax-expression
   95 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
   96                    | syntax-expression . "`=`" syntax-expression

    "`=`"    shift, and go to state 58
    "`==`"   shift, and go to state 59
    "`!=`"   shift, and go to state 60
    "`...`"  shift, and go to state 61
    "`(`"    shift, and go to state 62
    "`{`"    shift, and go to state 71
    "`+`"    shift, and go to state 63


State 51

   24 generic-statement: IF syntax-expression . "`{`" infunction-statement-any "`}`"
   71 syntax-expression-wo-ii: syntax-expression . "`...`"
   72                        | syntax-expression . "`+`" syntax-expression
   73                        | syntax-expression . "`==`" syntax-expression
   74                        | syntax-expression . "`!=`" syntax-expression
   95 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
   96                    | syntax-expression . "`=`" syntax-expression

    "`=`"    shift, and go to state 58
    "`==`"   shift, and go to state 59
    "`!=`"   shift, and go to state 60
    "`...`"  shift, and go to state 61
    "`(`"    shift, and go to state 62
    "`{`"    shift, and go to state 72
    "`+`"    shift, and go to state 63


State 52

   17 let-decl-start-with-opt-type: let-decl-start "`:`" . type-expr

    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 73
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 74
    "`[`"                shift, and go to state 75

    identifier  go to state 31
    qname       go to state 76
    type-expr   go to state 77


State 53

   13 let-decl: let-decl-start-with-opt-type "`=`" . syntax-expression "`;`"

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 31
    qname                    go to state 32
    syntax-expression-wo-ii  go to state 35
    syntax-expression        go to state 78
    compound-expression      go to state 40


State 54

   12 let-decl: let-decl-start-with-opt-type "`;`" .

    $default  reduce using rule 12 (let-decl)


State 55

   32 qname: qname "`::`" . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 79


State 56

   32 qname: qname . "`::`" identifier
   35 fn-decl: qname . "`(`" parameter-list-opt "`)`"
   36        | qname . "`(`" parameter-list-opt "`)`" "`->`" syntax-expression

    "`::`"  shift, and go to state 55
    "`(`"   shift, and go to state 80


State 57

    9 statement: fn-start-decl fn-decl . "`{`" infunction-statement-any "`}`"
   10          | fn-start-decl fn-decl . "`=>`" syntax-expression "`;`"

    "`=>`"  shift, and go to state 81
    "`{`"   shift, and go to state 82


State 58

   96 compound-expression: syntax-expression "`=`" . syntax-expression

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 31
    qname                    go to state 32
    syntax-expression-wo-ii  go to state 35
    syntax-expression        go to state 83
    compound-expression      go to state 40


State 59

   73 syntax-expression-wo-ii: syntax-expression "`==`" . syntax-expression

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 31
    qname                    go to state 32
    syntax-expression-wo-ii  go to state 35
    syntax-expression        go to state 84
    compound-expression      go to state 40


State 60

   74 syntax-expression-wo-ii: syntax-expression "`!=`" . syntax-expression

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 31
    qname                    go to state 32
    syntax-expression-wo-ii  go to state 35
    syntax-expression        go to state 85
    compound-expression      go to state 40


State 61

   71 syntax-expression-wo-ii: syntax-expression "`...`" .

    $default  reduce using rule 71 (syntax-expression-wo-ii)


State 62

   95 compound-expression: syntax-expression "`(`" . opt-named-expr-list-any "`)`"

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 86
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    $default  reduce using rule 97 (opt-named-expr-list-any)

    identifier               go to state 31
    qname                    go to state 32
    syntax-expression-wo-ii  go to state 35
    syntax-expression        go to state 87
    compound-expression      go to state 40
    opt-named-expr-list-any  go to state 88
    opt-named-expr-list      go to state 89
    opt-named-expr           go to state 90


State 63

   72 syntax-expression-wo-ii: syntax-expression "`+`" . syntax-expression

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 31
    qname                    go to state 32
    syntax-expression-wo-ii  go to state 35
    syntax-expression        go to state 91
    compound-expression      go to state 40


State 64

   25 generic-statement: compound-expression "`;`" .

    $default  reduce using rule 25 (generic-statement)


State 65

   69 syntax-expression-wo-ii: "`(`" syntax-expression "`)`" .

    $default  reduce using rule 69 (syntax-expression-wo-ii)


State 66

   15 let-decl-start: LET "weak modifier" identifier .

    $default  reduce using rule 15 (let-decl-start)


State 67

    5 statement: EXTERN VAR identifier . "`:`" type-expr "`;`"

    "`:`"  shift, and go to state 92


State 68

    6 statement: EXTERN "`fn`" fn-decl . "`;`"

    "`;`"  shift, and go to state 93


State 69

   22 generic-statement: RETURN syntax-expression "`;`" .

    $default  reduce using rule 22 (generic-statement)


State 70

   37 enum-decl: ENUM qname "`{`" . case-list-opt "`}`"

    IDENTIFIER  shift, and go to state 6

    $default  reduce using rule 38 (case-list-opt)

    identifier     go to state 94
    case-list-opt  go to state 95
    case-list      go to state 96
    case-decl      go to state 97


State 71

   23 generic-statement: WHILE syntax-expression "`{`" . infunction-statement-any "`}`"

    $default  reduce using rule 18 (infunction-statement-any)

    infunction-statement-any  go to state 98


State 72

   24 generic-statement: IF syntax-expression "`{`" . infunction-statement-any "`}`"

    $default  reduce using rule 18 (infunction-statement-any)

    infunction-statement-any  go to state 99


State 73

   88 type-expr: INTERNAL_IDENTIFIER .
   89          | INTERNAL_IDENTIFIER . "`(`" opt-named-expr-list-any "`)`"

    "`(`"  shift, and go to state 100

    $default  reduce using rule 88 (type-expr)


State 74

   91 type-expr: "`(`" . field-list-opt "`)`"

    IDENTIFIER           shift, and go to state 101
    INTERNAL_IDENTIFIER  shift, and go to state 73
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 74
    "`[`"                shift, and go to state 75

    $default  reduce using rule 43 (field-list-opt)

    identifier      go to state 31
    qname           go to state 76
    field-list-opt  go to state 102
    field-list      go to state 103
    field-decl      go to state 104
    type-expr       go to state 105


State 75

   90 type-expr: "`[`" . type-expr "`]`"

    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 73
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 74
    "`[`"                shift, and go to state 75

    identifier  go to state 31
    qname       go to state 76
    type-expr   go to state 106


State 76

   32 qname: qname . "`::`" identifier
   86 type-expr: qname .
   87          | qname . "`(`" opt-named-expr-list-any "`)`"

    "`::`"  shift, and go to state 55
    "`(`"   shift, and go to state 107

    $default  reduce using rule 86 (type-expr)


State 77

   17 let-decl-start-with-opt-type: let-decl-start "`:`" type-expr .
   92 type-expr: type-expr . "`[`" INTEGER "`]`"
   93          | type-expr . "`|`" type-expr
   94          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 108
    "`[`"   shift, and go to state 109
    "`|`"   shift, and go to state 110

    $default  reduce using rule 17 (let-decl-start-with-opt-type)


State 78

   13 let-decl: let-decl-start-with-opt-type "`=`" syntax-expression . "`;`"
   71 syntax-expression-wo-ii: syntax-expression . "`...`"
   72                        | syntax-expression . "`+`" syntax-expression
   73                        | syntax-expression . "`==`" syntax-expression
   74                        | syntax-expression . "`!=`" syntax-expression
   95 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
   96                    | syntax-expression . "`=`" syntax-expression

    "`=`"    shift, and go to state 58
    "`==`"   shift, and go to state 59
    "`!=`"   shift, and go to state 60
    "`...`"  shift, and go to state 61
    "`(`"    shift, and go to state 62
    "`;`"    shift, and go to state 111
    "`+`"    shift, and go to state 63


State 79

   32 qname: qname "`::`" identifier .

    $default  reduce using rule 32 (qname)


State 80

   35 fn-decl: qname "`(`" . parameter-list-opt "`)`"
   36        | qname "`(`" . parameter-list-opt "`)`" "`->`" syntax-expression

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 112
    INTERNAL_IDENTIFIER  shift, and go to state 113
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`@`"                shift, and go to state 114
    "`_`"                shift, and go to state 115
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    TYPENAME             shift, and go to state 116
    "const modifier"     shift, and go to state 117
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    $default  reduce using rule 82 (parameter-list-opt)

    identifier                     go to state 31
    qname                          go to state 32
    parameter-name-decl            go to state 118
    parameter-constraint-modifier  go to state 119
    parameter-constraint-set       go to state 120
    concept-expression             go to state 121
    syntax-expression-wo-ii        go to state 122
    syntax-expression              go to state 36
    parameter-decl                 go to state 123
    parameter-list-opt             go to state 124
    parameter-list                 go to state 125
    compound-expression            go to state 40


State 81

   10 statement: fn-start-decl fn-decl "`=>`" . syntax-expression "`;`"

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 31
    qname                    go to state 32
    syntax-expression-wo-ii  go to state 35
    syntax-expression        go to state 126
    compound-expression      go to state 40


State 82

    9 statement: fn-start-decl fn-decl "`{`" . infunction-statement-any "`}`"

    $default  reduce using rule 18 (infunction-statement-any)

    infunction-statement-any  go to state 127


State 83

   71 syntax-expression-wo-ii: syntax-expression . "`...`"
   72                        | syntax-expression . "`+`" syntax-expression
   73                        | syntax-expression . "`==`" syntax-expression
   74                        | syntax-expression . "`!=`" syntax-expression
   95 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
   96                    | syntax-expression . "`=`" syntax-expression
   96                    | syntax-expression "`=`" syntax-expression .

    "`=`"   shift, and go to state 58
    "`==`"  shift, and go to state 59
    "`!=`"  shift, and go to state 60
    "`(`"   shift, and go to state 62
    "`+`"   shift, and go to state 63

    $default  reduce using rule 96 (compound-expression)


State 84

   71 syntax-expression-wo-ii: syntax-expression . "`...`"
   72                        | syntax-expression . "`+`" syntax-expression
   73                        | syntax-expression . "`==`" syntax-expression
   73                        | syntax-expression "`==`" syntax-expression .
   74                        | syntax-expression . "`!=`" syntax-expression
   95 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
   96                    | syntax-expression . "`=`" syntax-expression

    "`(`"  shift, and go to state 62
    "`+`"  shift, and go to state 63

    $default  reduce using rule 73 (syntax-expression-wo-ii)


State 85

   71 syntax-expression-wo-ii: syntax-expression . "`...`"
   72                        | syntax-expression . "`+`" syntax-expression
   73                        | syntax-expression . "`==`" syntax-expression
   74                        | syntax-expression . "`!=`" syntax-expression
   74                        | syntax-expression "`!=`" syntax-expression .
   95 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
   96                    | syntax-expression . "`=`" syntax-expression

    "`(`"  shift, and go to state 62
    "`+`"  shift, and go to state 63

    $default  reduce using rule 74 (syntax-expression-wo-ii)


State 86

   29 identifier: IDENTIFIER .
  101 opt-named-expr: IDENTIFIER . "`:`" syntax-expression

    "`:`"  shift, and go to state 128

    $default  reduce using rule 29 (identifier)


State 87

   71 syntax-expression-wo-ii: syntax-expression . "`...`"
   72                        | syntax-expression . "`+`" syntax-expression
   73                        | syntax-expression . "`==`" syntax-expression
   74                        | syntax-expression . "`!=`" syntax-expression
   95 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
   96                    | syntax-expression . "`=`" syntax-expression
  102 opt-named-expr: syntax-expression .

    "`=`"    shift, and go to state 58
    "`==`"   shift, and go to state 59
    "`!=`"   shift, and go to state 60
    "`...`"  shift, and go to state 61
    "`(`"    shift, and go to state 62
    "`+`"    shift, and go to state 63

    $default  reduce using rule 102 (opt-named-expr)


State 88

   95 compound-expression: syntax-expression "`(`" opt-named-expr-list-any . "`)`"

    "`)`"  shift, and go to state 129


State 89

   98 opt-named-expr-list-any: opt-named-expr-list .
  100 opt-named-expr-list: opt-named-expr-list . "," opt-named-expr

    ","  shift, and go to state 130

    $default  reduce using rule 98 (opt-named-expr-list-any)


State 90

   99 opt-named-expr-list: opt-named-expr .

    $default  reduce using rule 99 (opt-named-expr-list)


State 91

   71 syntax-expression-wo-ii: syntax-expression . "`...`"
   72                        | syntax-expression . "`+`" syntax-expression
   72                        | syntax-expression "`+`" syntax-expression .
   73                        | syntax-expression . "`==`" syntax-expression
   74                        | syntax-expression . "`!=`" syntax-expression
   95 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
   96                    | syntax-expression . "`=`" syntax-expression

    "`(`"  shift, and go to state 62

    $default  reduce using rule 72 (syntax-expression-wo-ii)


State 92

    5 statement: EXTERN VAR identifier "`:`" . type-expr "`;`"

    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 73
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 74
    "`[`"                shift, and go to state 75

    identifier  go to state 31
    qname       go to state 76
    type-expr   go to state 131


State 93

    6 statement: EXTERN "`fn`" fn-decl "`;`" .

    $default  reduce using rule 6 (statement)


State 94

   42 case-decl: identifier .

    $default  reduce using rule 42 (case-decl)


State 95

   37 enum-decl: ENUM qname "`{`" case-list-opt . "`}`"

    "`}`"  shift, and go to state 132


State 96

   39 case-list-opt: case-list .
   41 case-list: case-list . "," case-decl

    ","  shift, and go to state 133

    $default  reduce using rule 39 (case-list-opt)


State 97

   40 case-list: case-decl .

    $default  reduce using rule 40 (case-list)


State 98

   19 infunction-statement-any: infunction-statement-any . "`;`"
   20                         | infunction-statement-any . infunction-statement
   23 generic-statement: WHILE syntax-expression "`{`" infunction-statement-any . "`}`"

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`}`"                shift, and go to state 134
    "`;`"                shift, and go to state 135
    "`!`"                shift, and go to state 14
    LET                  shift, and go to state 15
    "continue"           shift, and go to state 136
    "break"              shift, and go to state 137
    RETURN               shift, and go to state 17
    WHILE                shift, and go to state 22
    IF                   shift, and go to state 23
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    let-decl                      go to state 27
    let-decl-start                go to state 28
    let-decl-start-with-opt-type  go to state 29
    generic-statement             go to state 138
    infunction-statement          go to state 139
    identifier                    go to state 31
    qname                         go to state 32
    syntax-expression-wo-ii       go to state 35
    syntax-expression             go to state 36
    compound-expression           go to state 37


State 99

   19 infunction-statement-any: infunction-statement-any . "`;`"
   20                         | infunction-statement-any . infunction-statement
   24 generic-statement: IF syntax-expression "`{`" infunction-statement-any . "`}`"

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`}`"                shift, and go to state 140
    "`;`"                shift, and go to state 135
    "`!`"                shift, and go to state 14
    LET                  shift, and go to state 15
    "continue"           shift, and go to state 136
    "break"              shift, and go to state 137
    RETURN               shift, and go to state 17
    WHILE                shift, and go to state 22
    IF                   shift, and go to state 23
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    let-decl                      go to state 27
    let-decl-start                go to state 28
    let-decl-start-with-opt-type  go to state 29
    generic-statement             go to state 138
    infunction-statement          go to state 139
    identifier                    go to state 31
    qname                         go to state 32
    syntax-expression-wo-ii       go to state 35
    syntax-expression             go to state 36
    compound-expression           go to state 37


State 100

   89 type-expr: INTERNAL_IDENTIFIER "`(`" . opt-named-expr-list-any "`)`"

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 86
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    $default  reduce using rule 97 (opt-named-expr-list-any)

    identifier               go to state 31
    qname                    go to state 32
    syntax-expression-wo-ii  go to state 35
    syntax-expression        go to state 87
    compound-expression      go to state 40
    opt-named-expr-list-any  go to state 141
    opt-named-expr-list      go to state 89
    opt-named-expr           go to state 90


State 101

   29 identifier: IDENTIFIER .
   47 field-decl: IDENTIFIER . "`:`" type-expr

    "`:`"  shift, and go to state 142

    $default  reduce using rule 29 (identifier)


State 102

   91 type-expr: "`(`" field-list-opt . "`)`"

    "`)`"  shift, and go to state 143


State 103

   44 field-list-opt: field-list .
   46 field-list: field-list . "," field-decl

    ","  shift, and go to state 144

    $default  reduce using rule 44 (field-list-opt)


State 104

   45 field-list: field-decl .

    $default  reduce using rule 45 (field-list)


State 105

   48 field-decl: type-expr .
   92 type-expr: type-expr . "`[`" INTEGER "`]`"
   93          | type-expr . "`|`" type-expr
   94          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 108
    "`[`"   shift, and go to state 109
    "`|`"   shift, and go to state 110

    $default  reduce using rule 48 (field-decl)


State 106

   90 type-expr: "`[`" type-expr . "`]`"
   92          | type-expr . "`[`" INTEGER "`]`"
   93          | type-expr . "`|`" type-expr
   94          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 108
    "`[`"   shift, and go to state 109
    "`]`"   shift, and go to state 145
    "`|`"   shift, and go to state 110


State 107

   87 type-expr: qname "`(`" . opt-named-expr-list-any "`)`"

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 86
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    $default  reduce using rule 97 (opt-named-expr-list-any)

    identifier               go to state 31
    qname                    go to state 32
    syntax-expression-wo-ii  go to state 35
    syntax-expression        go to state 87
    compound-expression      go to state 40
    opt-named-expr-list-any  go to state 146
    opt-named-expr-list      go to state 89
    opt-named-expr           go to state 90


State 108

   94 type-expr: type-expr "`->`" . type-expr

    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 73
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 74
    "`[`"                shift, and go to state 75

    identifier  go to state 31
    qname       go to state 76
    type-expr   go to state 147


State 109

   92 type-expr: type-expr "`[`" . INTEGER "`]`"

    INTEGER  shift, and go to state 148


State 110

   93 type-expr: type-expr "`|`" . type-expr

    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 73
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 74
    "`[`"                shift, and go to state 75

    identifier  go to state 31
    qname       go to state 76
    type-expr   go to state 149


State 111

   13 let-decl: let-decl-start-with-opt-type "`=`" syntax-expression "`;`" .

    $default  reduce using rule 13 (let-decl)


State 112

   29 identifier: IDENTIFIER .
   49 parameter-name-decl: IDENTIFIER . INTERNAL_IDENTIFIER "`:`"
   50                    | IDENTIFIER . "`:`"

    INTERNAL_IDENTIFIER  shift, and go to state 150
    "`:`"                shift, and go to state 151

    $default  reduce using rule 29 (identifier)


State 113

   51 parameter-name-decl: INTERNAL_IDENTIFIER . "`:`"
   57 parameter-constraint-set: INTERNAL_IDENTIFIER .
   76 syntax-expression: INTERNAL_IDENTIFIER .

    "`:`"  shift, and go to state 152

    INTERNAL_IDENTIFIER  reduce using rule 57 (parameter-constraint-set)
    "`@`"                reduce using rule 57 (parameter-constraint-set)
    "`)`"                reduce using rule 57 (parameter-constraint-set)
    ","                  reduce using rule 57 (parameter-constraint-set)
    $default             reduce using rule 76 (syntax-expression)


State 114

   61 concept-expression: "`@`" . qname

    IDENTIFIER  shift, and go to state 6
    "`::`"      shift, and go to state 11

    identifier  go to state 31
    qname       go to state 153


State 115

   81 parameter-decl: "`_`" .

    $default  reduce using rule 81 (parameter-decl)


State 116

   52 parameter-constraint-modifier: TYPENAME .

    $default  reduce using rule 52 (parameter-constraint-modifier)


State 117

   53 parameter-constraint-modifier: "const modifier" .

    $default  reduce using rule 53 (parameter-constraint-modifier)


State 118

   78 parameter-decl: parameter-name-decl . parameter-constraint-modifier-opt parameter-constraint-set

    TYPENAME          shift, and go to state 116
    "const modifier"  shift, and go to state 117

    $default  reduce using rule 55 (parameter-constraint-modifier-opt)

    parameter-constraint-modifier      go to state 154
    parameter-constraint-modifier-opt  go to state 155


State 119

   79 parameter-decl: parameter-constraint-modifier . parameter-constraint-set

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 156
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`@`"                shift, and go to state 114
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier                go to state 31
    qname                     go to state 32
    parameter-constraint-set  go to state 157
    concept-expression        go to state 121
    syntax-expression-wo-ii   go to state 122
    syntax-expression         go to state 36
    compound-expression       go to state 40


State 120

   59 parameter-constraint-set: parameter-constraint-set . INTERNAL_IDENTIFIER
   60                         | parameter-constraint-set . concept-expression
   80 parameter-decl: parameter-constraint-set .

    INTERNAL_IDENTIFIER  shift, and go to state 158
    "`@`"                shift, and go to state 114

    $default  reduce using rule 80 (parameter-decl)

    concept-expression  go to state 159


State 121

   58 parameter-constraint-set: concept-expression .

    $default  reduce using rule 58 (parameter-constraint-set)


State 122

   56 parameter-constraint-set: syntax-expression-wo-ii .
   77 syntax-expression: syntax-expression-wo-ii .

    INTERNAL_IDENTIFIER  reduce using rule 56 (parameter-constraint-set)
    "`@`"                reduce using rule 56 (parameter-constraint-set)
    "`)`"                reduce using rule 56 (parameter-constraint-set)
    ","                  reduce using rule 56 (parameter-constraint-set)
    $default             reduce using rule 77 (syntax-expression)


State 123

   84 parameter-list: parameter-decl .

    $default  reduce using rule 84 (parameter-list)


State 124

   35 fn-decl: qname "`(`" parameter-list-opt . "`)`"
   36        | qname "`(`" parameter-list-opt . "`)`" "`->`" syntax-expression

    "`)`"  shift, and go to state 160


State 125

   83 parameter-list-opt: parameter-list .
   85 parameter-list: parameter-list . "," parameter-decl

    ","  shift, and go to state 161

    $default  reduce using rule 83 (parameter-list-opt)


State 126

   10 statement: fn-start-decl fn-decl "`=>`" syntax-expression . "`;`"
   71 syntax-expression-wo-ii: syntax-expression . "`...`"
   72                        | syntax-expression . "`+`" syntax-expression
   73                        | syntax-expression . "`==`" syntax-expression
   74                        | syntax-expression . "`!=`" syntax-expression
   95 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
   96                    | syntax-expression . "`=`" syntax-expression

    "`=`"    shift, and go to state 58
    "`==`"   shift, and go to state 59
    "`!=`"   shift, and go to state 60
    "`...`"  shift, and go to state 61
    "`(`"    shift, and go to state 62
    "`;`"    shift, and go to state 162
    "`+`"    shift, and go to state 63


State 127

    9 statement: fn-start-decl fn-decl "`{`" infunction-statement-any . "`}`"
   19 infunction-statement-any: infunction-statement-any . "`;`"
   20                         | infunction-statement-any . infunction-statement

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`}`"                shift, and go to state 163
    "`;`"                shift, and go to state 135
    "`!`"                shift, and go to state 14
    LET                  shift, and go to state 15
    "continue"           shift, and go to state 136
    "break"              shift, and go to state 137
    RETURN               shift, and go to state 17
    WHILE                shift, and go to state 22
    IF                   shift, and go to state 23
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    let-decl                      go to state 27
    let-decl-start                go to state 28
    let-decl-start-with-opt-type  go to state 29
    generic-statement             go to state 138
    infunction-statement          go to state 139
    identifier                    go to state 31
    qname                         go to state 32
    syntax-expression-wo-ii       go to state 35
    syntax-expression             go to state 36
    compound-expression           go to state 37


State 128

  101 opt-named-expr: IDENTIFIER "`:`" . syntax-expression

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 31
    qname                    go to state 32
    syntax-expression-wo-ii  go to state 35
    syntax-expression        go to state 164
    compound-expression      go to state 40


State 129

   95 compound-expression: syntax-expression "`(`" opt-named-expr-list-any "`)`" .

    $default  reduce using rule 95 (compound-expression)


State 130

  100 opt-named-expr-list: opt-named-expr-list "," . opt-named-expr

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 86
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 31
    qname                    go to state 32
    syntax-expression-wo-ii  go to state 35
    syntax-expression        go to state 87
    compound-expression      go to state 40
    opt-named-expr           go to state 165


State 131

    5 statement: EXTERN VAR identifier "`:`" type-expr . "`;`"
   92 type-expr: type-expr . "`[`" INTEGER "`]`"
   93          | type-expr . "`|`" type-expr
   94          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 108
    "`[`"   shift, and go to state 109
    "`;`"   shift, and go to state 166
    "`|`"   shift, and go to state 110


State 132

   37 enum-decl: ENUM qname "`{`" case-list-opt "`}`" .

    $default  reduce using rule 37 (enum-decl)


State 133

   41 case-list: case-list "," . case-decl

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 94
    case-decl   go to state 167


State 134

   23 generic-statement: WHILE syntax-expression "`{`" infunction-statement-any "`}`" .

    $default  reduce using rule 23 (generic-statement)


State 135

   19 infunction-statement-any: infunction-statement-any "`;`" .

    $default  reduce using rule 19 (infunction-statement-any)


State 136

   28 infunction-statement: "continue" .

    $default  reduce using rule 28 (infunction-statement)


State 137

   27 infunction-statement: "break" .

    $default  reduce using rule 27 (infunction-statement)


State 138

   26 infunction-statement: generic-statement .

    $default  reduce using rule 26 (infunction-statement)


State 139

   20 infunction-statement-any: infunction-statement-any infunction-statement .

    $default  reduce using rule 20 (infunction-statement-any)


State 140

   24 generic-statement: IF syntax-expression "`{`" infunction-statement-any "`}`" .

    $default  reduce using rule 24 (generic-statement)


State 141

   89 type-expr: INTERNAL_IDENTIFIER "`(`" opt-named-expr-list-any . "`)`"

    "`)`"  shift, and go to state 168


State 142

   47 field-decl: IDENTIFIER "`:`" . type-expr

    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 73
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 74
    "`[`"                shift, and go to state 75

    identifier  go to state 31
    qname       go to state 76
    type-expr   go to state 169


State 143

   91 type-expr: "`(`" field-list-opt "`)`" .

    $default  reduce using rule 91 (type-expr)


State 144

   46 field-list: field-list "," . field-decl

    IDENTIFIER           shift, and go to state 101
    INTERNAL_IDENTIFIER  shift, and go to state 73
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 74
    "`[`"                shift, and go to state 75

    identifier  go to state 31
    qname       go to state 76
    field-decl  go to state 170
    type-expr   go to state 105


State 145

   90 type-expr: "`[`" type-expr "`]`" .

    $default  reduce using rule 90 (type-expr)


State 146

   87 type-expr: qname "`(`" opt-named-expr-list-any . "`)`"

    "`)`"  shift, and go to state 171


State 147

   92 type-expr: type-expr . "`[`" INTEGER "`]`"
   93          | type-expr . "`|`" type-expr
   94          | type-expr . "`->`" type-expr
   94          | type-expr "`->`" type-expr .

    $default  reduce using rule 94 (type-expr)


State 148

   92 type-expr: type-expr "`[`" INTEGER . "`]`"

    "`]`"  shift, and go to state 172


State 149

   92 type-expr: type-expr . "`[`" INTEGER "`]`"
   93          | type-expr . "`|`" type-expr
   93          | type-expr "`|`" type-expr .
   94          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 108
    "`[`"   shift, and go to state 109

    $default  reduce using rule 93 (type-expr)


State 150

   49 parameter-name-decl: IDENTIFIER INTERNAL_IDENTIFIER . "`:`"

    "`:`"  shift, and go to state 173


State 151

   50 parameter-name-decl: IDENTIFIER "`:`" .

    $default  reduce using rule 50 (parameter-name-decl)


State 152

   51 parameter-name-decl: INTERNAL_IDENTIFIER "`:`" .

    $default  reduce using rule 51 (parameter-name-decl)


State 153

   32 qname: qname . "`::`" identifier
   61 concept-expression: "`@`" qname .

    "`::`"  shift, and go to state 55

    $default  reduce using rule 61 (concept-expression)


State 154

   54 parameter-constraint-modifier-opt: parameter-constraint-modifier .

    $default  reduce using rule 54 (parameter-constraint-modifier-opt)


State 155

   78 parameter-decl: parameter-name-decl parameter-constraint-modifier-opt . parameter-constraint-set

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 156
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`@`"                shift, and go to state 114
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier                go to state 31
    qname                     go to state 32
    parameter-constraint-set  go to state 174
    concept-expression        go to state 121
    syntax-expression-wo-ii   go to state 122
    syntax-expression         go to state 36
    compound-expression       go to state 40


State 156

   57 parameter-constraint-set: INTERNAL_IDENTIFIER .
   76 syntax-expression: INTERNAL_IDENTIFIER .

    INTERNAL_IDENTIFIER  reduce using rule 57 (parameter-constraint-set)
    "`@`"                reduce using rule 57 (parameter-constraint-set)
    "`)`"                reduce using rule 57 (parameter-constraint-set)
    ","                  reduce using rule 57 (parameter-constraint-set)
    $default             reduce using rule 76 (syntax-expression)


State 157

   59 parameter-constraint-set: parameter-constraint-set . INTERNAL_IDENTIFIER
   60                         | parameter-constraint-set . concept-expression
   79 parameter-decl: parameter-constraint-modifier parameter-constraint-set .

    INTERNAL_IDENTIFIER  shift, and go to state 158
    "`@`"                shift, and go to state 114

    $default  reduce using rule 79 (parameter-decl)

    concept-expression  go to state 159


State 158

   59 parameter-constraint-set: parameter-constraint-set INTERNAL_IDENTIFIER .

    $default  reduce using rule 59 (parameter-constraint-set)


State 159

   60 parameter-constraint-set: parameter-constraint-set concept-expression .

    $default  reduce using rule 60 (parameter-constraint-set)


State 160

   35 fn-decl: qname "`(`" parameter-list-opt "`)`" .
   36        | qname "`(`" parameter-list-opt "`)`" . "`->`" syntax-expression

    "`->`"  shift, and go to state 175

    $default  reduce using rule 35 (fn-decl)


State 161

   85 parameter-list: parameter-list "," . parameter-decl

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 112
    INTERNAL_IDENTIFIER  shift, and go to state 113
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`@`"                shift, and go to state 114
    "`_`"                shift, and go to state 115
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    TYPENAME             shift, and go to state 116
    "const modifier"     shift, and go to state 117
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier                     go to state 31
    qname                          go to state 32
    parameter-name-decl            go to state 118
    parameter-constraint-modifier  go to state 119
    parameter-constraint-set       go to state 120
    concept-expression             go to state 121
    syntax-expression-wo-ii        go to state 122
    syntax-expression              go to state 36
    parameter-decl                 go to state 176
    compound-expression            go to state 40


State 162

   10 statement: fn-start-decl fn-decl "`=>`" syntax-expression "`;`" .

    $default  reduce using rule 10 (statement)


State 163

    9 statement: fn-start-decl fn-decl "`{`" infunction-statement-any "`}`" .

    $default  reduce using rule 9 (statement)


State 164

   71 syntax-expression-wo-ii: syntax-expression . "`...`"
   72                        | syntax-expression . "`+`" syntax-expression
   73                        | syntax-expression . "`==`" syntax-expression
   74                        | syntax-expression . "`!=`" syntax-expression
   95 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
   96                    | syntax-expression . "`=`" syntax-expression
  101 opt-named-expr: IDENTIFIER "`:`" syntax-expression .

    "`=`"    shift, and go to state 58
    "`==`"   shift, and go to state 59
    "`!=`"   shift, and go to state 60
    "`...`"  shift, and go to state 61
    "`(`"    shift, and go to state 62
    "`+`"    shift, and go to state 63

    $default  reduce using rule 101 (opt-named-expr)


State 165

  100 opt-named-expr-list: opt-named-expr-list "," opt-named-expr .

    $default  reduce using rule 100 (opt-named-expr-list)


State 166

    5 statement: EXTERN VAR identifier "`:`" type-expr "`;`" .

    $default  reduce using rule 5 (statement)


State 167

   41 case-list: case-list "," case-decl .

    $default  reduce using rule 41 (case-list)


State 168

   89 type-expr: INTERNAL_IDENTIFIER "`(`" opt-named-expr-list-any "`)`" .

    $default  reduce using rule 89 (type-expr)


State 169

   47 field-decl: IDENTIFIER "`:`" type-expr .
   92 type-expr: type-expr . "`[`" INTEGER "`]`"
   93          | type-expr . "`|`" type-expr
   94          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 108
    "`[`"   shift, and go to state 109
    "`|`"   shift, and go to state 110

    $default  reduce using rule 47 (field-decl)


State 170

   46 field-list: field-list "," field-decl .

    $default  reduce using rule 46 (field-list)


State 171

   87 type-expr: qname "`(`" opt-named-expr-list-any "`)`" .

    $default  reduce using rule 87 (type-expr)


State 172

   92 type-expr: type-expr "`[`" INTEGER "`]`" .

    $default  reduce using rule 92 (type-expr)


State 173

   49 parameter-name-decl: IDENTIFIER INTERNAL_IDENTIFIER "`:`" .

    $default  reduce using rule 49 (parameter-name-decl)


State 174

   59 parameter-constraint-set: parameter-constraint-set . INTERNAL_IDENTIFIER
   60                         | parameter-constraint-set . concept-expression
   78 parameter-decl: parameter-name-decl parameter-constraint-modifier-opt parameter-constraint-set .

    INTERNAL_IDENTIFIER  shift, and go to state 158
    "`@`"                shift, and go to state 114

    $default  reduce using rule 78 (parameter-decl)

    concept-expression  go to state 159


State 175

   36 fn-decl: qname "`(`" parameter-list-opt "`)`" "`->`" . syntax-expression

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 31
    qname                    go to state 32
    syntax-expression-wo-ii  go to state 35
    syntax-expression        go to state 177
    compound-expression      go to state 40


State 176

   85 parameter-list: parameter-list "," parameter-decl .

    $default  reduce using rule 85 (parameter-list)


State 177

   36 fn-decl: qname "`(`" parameter-list-opt "`)`" "`->`" syntax-expression .
   71 syntax-expression-wo-ii: syntax-expression . "`...`"
   72                        | syntax-expression . "`+`" syntax-expression
   73                        | syntax-expression . "`==`" syntax-expression
   74                        | syntax-expression . "`!=`" syntax-expression
   95 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
   96                    | syntax-expression . "`=`" syntax-expression

    "`=`"    shift, and go to state 58
    "`==`"   shift, and go to state 59
    "`!=`"   shift, and go to state 60
    "`...`"  shift, and go to state 61
    "`(`"    shift, and go to state 62
    "`+`"    shift, and go to state 63

    $default  reduce using rule 36 (fn-decl)
