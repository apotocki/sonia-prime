Terminals unused in grammar

    COMMENT_BEGIN
    COMMENT_END
    OPERATOR_TERM
    "`->*`"
    "`~>`"
    "`.*`"
    "`++`"
    "`--`"
    "`<<`"
    "`>>`"
    "`<=`"
    "`>=`"
    "`&&`"
    "`||`"
    "`..`"
    "`+=`"
    "`-=`"
    "`*=`"
    "`/=`"
    "`%=`"
    "`<<=`"
    "`>>=`"
    "`&=`"
    "`|=`"
    "`^=`"
    "`<`"
    "`>`"
    "`-`"
    "`*`"
    "`/`"
    "`%`"
    "`&`"
    "`~`"
    "`^`"
    "`$`"
    "`?`"
    "`#`"
    AUTO
    THROW
    SIZEOF
    LOWEST
    EXTENDS
    TYPENAME


Grammar

    0 $accept: begin "end of file"

    1 begin: statement_any "end of file"
    2      | finished_statement_any "end of file"

    3 statement_any: %empty
    4              | statement
    5              | finished_statement_any statement

    6 finished_statement_any: finished_statement
    7                       | finished_statement_any "`;`"
    8                       | finished_statement_any finished_statement
    9                       | statement_any "`;`"

   10 statement: EXTERN VAR identifier "`:`" type-expr
   11          | EXTERN "`fn`" fn-decl
   12          | INCLUDE STRING
   13          | enum-decl
   14          | fn-start-decl fn-decl "`=>`" syntax-expression
   15          | generic-statement
   16          | STRUCT struct-decl

   17 let-decl: let-decl-start-with-opt-type
   18         | let-decl-start-with-opt-type "`=`" syntax-expression

   19 let-decl-start: LET identifier
   20               | LET "weak modifier" identifier

   21 let-decl-start-with-opt-type: let-decl-start
   22                             | let-decl-start "`:`" type-expr

   23 infunction-statement-any: %empty
   24                         | infunction-statement
   25                         | finished-infunction-statement-any infunction-statement

   26 finished-infunction-statement-any: finished_statement
   27                                  | finished-infunction-statement-any "`;`"
   28                                  | finished-infunction-statement-any finished_statement
   29                                  | infunction-statement-any "`;`"

   30 braced-statements: "`{`" infunction-statement-set "`}`"

   31 finished_statement: "`while`" syntax-expression braced-statements
   32                   | "`while`" syntax-expression "`;`" syntax-expression braced-statements
   33                   | "`for`" syntax-expression "`in`" syntax-expression braced-statements
   34                   | "`if`" syntax-expression braced-statements
   35                   | "`if`" syntax-expression braced-statements "`else`" braced-statements
   36                   | fn-start-decl fn-decl braced-statements
   37                   | STRUCT qname braced-statements
   38                   | STRUCT qname "`(`" parameter-list-opt "`)`" braced-statements

   39 infunction-statement-set: infunction-statement-any
   40                         | finished-infunction-statement-any

   41 generic-statement: let-decl
   42                  | USING using-decl
   43                  | "`return`" syntax-expression
   44                  | compound-expression
   45                  | syntax-expression "`=`" syntax-expression

   46 infunction-statement: generic-statement
   47                     | "`break`"
   48                     | "`continue`"

   49 identifier: IDENTIFIER

   50 internal-identifier: INTERNAL_IDENTIFIER

   51 qname: "`::`" identifier
   52      | identifier
   53      | qname "`::`" identifier

   54 fn-start-decl: "`fn`"
   55              | INLINE "`fn`"

   56 fn-name: qname
   57        | "`new`"

   58 fn-decl: fn-name "`(`" parameter-list-opt "`)`"
   59        | fn-name "`(`" parameter-list-opt "`)`" "`->`" type-expr

   60 enum-decl: ENUM qname "`{`" case-list-opt "`}`"

   61 case-list-opt: %empty
   62              | case-list

   63 case-list: case-decl
   64          | case-list "," case-decl

   65 case-decl: identifier

   66 struct-decl: qname "`=>`" "`(`" field-list-opt "`)`"
   67            | qname "`(`" parameter-list-opt "`)`" "`=>`" "`(`" field-list-opt "`)`"

   68 using-decl: qname "`=>`" syntax-expression
   69           | qname "`(`" parameter-list-opt "`)`" "`=>`" syntax-expression

   70 argument-list-opt: %empty
   71                  | argument-list

   72 argument-list: argument
   73              | argument-list "," argument

   74 argument: argument-name syntax-expression
   75         | syntax-expression

   76 argument-name: identifier "`=`"
   77              | identifier "`:`"

   78 field-list-opt: %empty
   79               | field-list

   80 field-list: field
   81           | field-list "," field

   82 field-default-value-opt: %empty
   83                        | "`=`" syntax-expression

   84 field: identifier "`:`" field-type-expr field-default-value-opt
   85      | identifier "`=>`" field-type-expr field-default-value-opt

   86 field-type-expr: qname
   87                | qname "`(`" argument-list-opt "`)`"
   88                | INTERNAL_IDENTIFIER
   89                | field-type-expr "`|`" field-type-expr

   90 parameter-list-opt: %empty
   91                   | parameter-list

   92 parameter-list: parameter-decl
   93               | parameter-list "," parameter-decl

   94 internal-identifier-opt: %empty
   95                        | internal-identifier

   96 parameter-default-value-opt: %empty
   97                            | "`=`" syntax-expression

   98 parameter-decl: identifier internal-identifier-opt "`:`" parameter-constraint-set parameter-default-value-opt
   99               | identifier internal-identifier-opt "`:`" "const modifier" parameter-constraint-set parameter-default-value-opt
  100               | identifier internal-identifier-opt "`=>`" parameter-value-constraint-set
  101               | INTERNAL_IDENTIFIER "`:`" parameter-constraint-set parameter-default-value-opt
  102               | INTERNAL_IDENTIFIER "`:`" "const modifier" parameter-constraint-set parameter-default-value-opt
  103               | INTERNAL_IDENTIFIER "`=>`" parameter-value-constraint-set
  104               | INTERNAL_IDENTIFIER "`...`" "`:`" parameter-constraint-set
  105               | INTERNAL_IDENTIFIER "`...`" "`:`" "const modifier" parameter-constraint-set
  106               | parameter-constraint-set parameter-default-value-opt
  107               | "const modifier" parameter-constraint-set parameter-default-value-opt
  108               | "`=>`" parameter-value-constraint-set

  109 parameter-constraint-set: parameter-matched-type
  110                         | concept-expression
  111                         | parameter-constraint-set concept-expression

  112 parameter-value-constraint-set: parameter-matched-value
  113                               | concept-expression
  114                               | parameter-value-constraint-set concept-expression

  115 parameter-matched-value: syntax-expression

  116 parameter-matched-type: basic-parameter-matched-type
  117                       | basic-parameter-matched-type "`...`"
  118                       | INTERNAL_IDENTIFIER
  119                       | INTERNAL_IDENTIFIER "`...`"

  120 basic-parameter-matched-type: "`_`"
  121                             | qname
  122                             | qname "`(`" argument-list-opt "`)`"
  123                             | basic-parameter-matched-type "`|`" basic-parameter-matched-type

  124 concept-expression: "`@`" qname

  125 syntax-expression: INTERNAL_IDENTIFIER
  126                  | syntax-expression-wo-ii

  127 syntax-expression-wo-ii: "true"
  128                        | "false"
  129                        | INTEGER
  130                        | DECIMAL
  131                        | DECIMAL_S
  132                        | INTEGER_INDEX
  133                        | STRING
  134                        | RESERVED_IDENTIFIER
  135                        | qname
  136                        | "`(`" argument-list "`)`"
  137                        | "`.`" identifier
  138                        | syntax-expression "`.`" identifier
  139                        | syntax-expression "`.`" apostrophe-expression
  140                        | syntax-expression INTEGER_INDEX
  141                        | "`!`" syntax-expression
  142                        | syntax-expression "`+`" syntax-expression
  143                        | syntax-expression "`==`" syntax-expression
  144                        | syntax-expression "`!=`" syntax-expression
  145                        | apostrophe-expression
  146                        | new-expression
  147                        | compound-expression
  148                        | lambda-expression

  149 apostrophe-expression: "APOSTROPHE" syntax-expression "APOSTROPHE"

  150 new-expression: "`new`" qname
  151               | "`new`" apostrophe-expression
  152               | "`new`" qname "`(`" argument-list-opt "`)`"
  153               | "`new`" apostrophe-expression "`(`" argument-list-opt "`)`"

  154 call-expression: qname "`(`" argument-list-opt "`)`"
  155                | call-expression "`(`" argument-list-opt "`)`"
  156                | apostrophe-expression "`(`" argument-list-opt "`)`"
  157                | lambda-expression "`(`" argument-list-opt "`)`"

  158 lambda-expression: fn-start-decl "`(`" parameter-list-opt "`)`" braced-statements
  159                  | fn-start-decl "`(`" parameter-list-opt "`)`" "`->`" type-expr braced-statements

  160 compound-expression: call-expression
  161                    | syntax-expression "`...`"

  162 type-expr: qname
  163          | call-expression
  164          | INTERNAL_IDENTIFIER
  165          | "`[`" type-expr "`]`"
  166          | "`(`" argument-list-opt "`)`"
  167          | type-expr "`[`" INTEGER "`]`"
  168          | type-expr "`|`" type-expr
  169          | type-expr "`->`" type-expr


Terminals, with rules where they appear

    "end of file" (0) 0 1 2
    error (256)
    COMMENT_BEGIN (258)
    COMMENT_END (259)
    STRING <sonia::lang::bang::annotated_string_view> (260) 12 133
    IDENTIFIER <sonia::lang::bang::annotated_string_view> (261) 49
    INTERNAL_IDENTIFIER <sonia::lang::bang::annotated_string_view> (262) 50 88 101 102 103 104 105 118 119 125 164
    RESERVED_IDENTIFIER <sonia::lang::bang::annotated_string_view> (263) 134
    INTEGER_INDEX <sonia::lang::bang::annotated_string_view> (264) 132 140
    INTEGER <sonia::lang::bang::annotated_integer> (265) 129 167
    DECIMAL <sonia::lang::bang::annotated_decimal> (266) 130
    DECIMAL_S <sonia::lang::bang::annotated_decimal> (267) 131
    OPERATOR_TERM <sonia::string_view> (268)
    "`=`" <sonia::lang::lex::resource_location> (269) 18 45 76 83 97
    "APOSTROPHE" (270) 149
    "`@`" (271) 124
    "`_`" <sonia::lang::lex::resource_location> (272) 120
    "`->*`" (273)
    "`->`" (274) 59 159 169
    "`=>`" (275) 14 66 67 68 69 85 100 103 108
    "`~>`" (276)
    "`.*`" (277)
    "`++`" (278)
    "`--`" (279)
    "`<<`" (280)
    "`>>`" (281)
    "`<=`" (282)
    "`>=`" (283)
    "`==`" <sonia::lang::lex::resource_location> (284) 143
    "`!=`" <sonia::lang::lex::resource_location> (285) 144
    "`&&`" <sonia::lang::lex::resource_location> (286)
    "`||`" <sonia::lang::lex::resource_location> (287)
    "`..`" <sonia::lang::lex::resource_location> (288)
    "`...`" <sonia::lang::lex::resource_location> (289) 104 105 117 119 161
    "`+=`" (290)
    "`-=`" (291)
    "`*=`" (292)
    "`/=`" (293)
    "`%=`" (294)
    "`<<=`" (295)
    "`>>=`" (296)
    "`&=`" (297)
    "`|=`" (298)
    "`^=`" (299)
    "`:`" (300) 10 22 77 84 98 99 101 102 104 105
    "`::`" (301) 51 53
    "`(`" <sonia::lang::lex::resource_location> (302) 38 58 59 66 67 69 87 122 136 152 153 154 155 156 157 158 159 166
    "`)`" (303) 38 58 59 66 67 69 87 122 136 152 153 154 155 156 157 158 159 166
    "`{`" <sonia::lang::lex::resource_location> (304) 30 60
    "`}`" (305) 30 60
    "`[`" <sonia::lang::lex::resource_location> (306) 165 167
    "`]`" (307) 165 167
    "`<`" (308)
    "`>`" (309)
    "`;`" (310) 7 9 27 29 32
    "`.`" <sonia::lang::lex::resource_location> (311) 137 138 139
    "`+`" <sonia::lang::lex::resource_location> (312) 142
    "`-`" (313)
    "`*`" (314)
    "`/`" (315)
    "`%`" (316)
    "`&`" (317)
    "`|`" <sonia::lang::lex::resource_location> (318) 89 123 168
    "`!`" <sonia::lang::lex::resource_location> (319) 141
    "`~`" (320)
    "`^`" (321)
    "," (322) 64 73 81 93
    "`$`" (323)
    "`?`" (324)
    "`#`" (325)
    LET (326) 19 20
    VAR (327) 10
    EXTERN (328) 10 11
    "`new`" <sonia::lang::lex::resource_location> (329) 57 150 151 152 153
    "`while`" (330) 31 32
    "`for`" (331) 33
    "`in`" (332) 33
    "`if`" (333) 34 35
    "`else`" (334) 35
    "`continue`" <sonia::lang::lex::resource_location> (335) 48
    "`break`" <sonia::lang::lex::resource_location> (336) 47
    "`return`" (337) 43
    AUTO (338)
    USING (339) 42
    THROW (340)
    SIZEOF (341)
    LOWEST (342)
    INCLUDE (343) 12
    INLINE (344) 55
    "`fn`" <sonia::lang::lex::resource_location> (345) 11 54 55
    ENUM (346) 60
    STRUCT (347) 16 37 38
    EXTENDS (348)
    TYPENAME (349)
    "weak modifier" (350) 20
    "const modifier" (351) 99 102 105 107
    "true" <annotated_bool> (352) 127
    "false" <annotated_bool> (353) 128


Nonterminals, with rules where they appear

    $accept (99)
        on left: 0
    begin (100)
        on left: 1 2
        on right: 0
    statement_any <managed_statement_list> (101)
        on left: 3 4 5
        on right: 1 9
    finished_statement_any <managed_statement_list> (102)
        on left: 6 7 8 9
        on right: 2 5 7 8
    statement <statement> (103)
        on left: 10 11 12 13 14 15 16
        on right: 4 5
    let-decl <let_statement> (104)
        on left: 17 18
        on right: 41
    let-decl-start <let_statement> (105)
        on left: 19 20
        on right: 21 22
    let-decl-start-with-opt-type <let_statement> (106)
        on left: 21 22
        on right: 17 18
    infunction-statement-any <managed_statement_list> (107)
        on left: 23 24 25
        on right: 29 39
    finished-infunction-statement-any <managed_statement_list> (108)
        on left: 26 27 28 29
        on right: 25 27 28 40
    braced-statements <managed_statement_list> (109)
        on left: 30
        on right: 31 32 33 34 35 36 37 38 158 159
    finished_statement <finished_statement_type> (110)
        on left: 31 32 33 34 35 36 37 38
        on right: 6 8 26 28
    infunction-statement-set <managed_statement_list> (111)
        on left: 39 40
        on right: 30
    generic-statement <generic_statement_type> (112)
        on left: 41 42 43 44 45
        on right: 15 46
    infunction-statement <statement> (113)
        on left: 46 47 48
        on right: 24 25
    identifier <sonia::lang::bang::annotated_identifier> (114)
        on left: 49
        on right: 10 19 20 51 52 53 65 76 77 84 85 98 99 100 137 138
    internal-identifier <sonia::lang::bang::annotated_identifier> (115)
        on left: 50
        on right: 95
    qname <sonia::lang::bang::annotated_qname> (116)
        on left: 51 52 53
        on right: 37 38 53 56 60 66 67 68 69 86 87 121 122 124 135 150 152 154 162
    fn-start-decl <fn_kind> (117)
        on left: 54 55
        on right: 14 36 158 159
    fn-name <sonia::lang::bang::annotated_qname> (118)
        on left: 56 57
        on right: 58 59
    fn-decl <fn_pure_t> (119)
        on left: 58 59
        on right: 11 14 36
    enum-decl <enum_decl> (120)
        on left: 60
        on right: 13
    case-list-opt <std::vector<sonia::lang::bang::identifier>> (121)
        on left: 61 62
        on right: 60
    case-list <std::vector<sonia::lang::bang::identifier>> (122)
        on left: 63 64
        on right: 62 64
    case-decl <sonia::lang::bang::identifier> (123)
        on left: 65
        on right: 63 64
    struct-decl <struct_decl> (124)
        on left: 66 67
        on right: 16
    using-decl <using_decl> (125)
        on left: 68 69
        on right: 42
    argument-list-opt <named_expression_list_t> (126)
        on left: 70 71
        on right: 87 122 152 153 154 155 156 157 166
    argument-list <named_expression_list_t> (127)
        on left: 72 73
        on right: 71 73 136
    argument <named_expression_t> (128)
        on left: 74 75
        on right: 72 73
    argument-name <sonia::lang::bang::annotated_identifier> (129)
        on left: 76 77
        on right: 74
    field-list-opt <field_list_t> (130)
        on left: 78 79
        on right: 66 67
    field-list <field_list_t> (131)
        on left: 80 81
        on right: 79 81
    field-default-value-opt <sonia::optional<syntax_expression_t>> (132)
        on left: 82 83
        on right: 84 85
    field <field_t> (133)
        on left: 84 85
        on right: 80 81
    field-type-expr <syntax_expression_t> (134)
        on left: 86 87 88 89
        on right: 84 85 89
    parameter-list-opt <parameter_list_t> (135)
        on left: 90 91
        on right: 38 58 59 67 69 158 159
    parameter-list <parameter_list_t> (136)
        on left: 92 93
        on right: 91 93
    internal-identifier-opt <sonia::lang::bang::annotated_identifier> (137)
        on left: 94 95
        on right: 98 99 100
    parameter-default-value-opt <sonia::optional<syntax_expression_t>> (138)
        on left: 96 97
        on right: 98 99 101 102 106 107
    parameter-decl <parameter_t> (139)
        on left: 98 99 100 101 102 103 104 105 106 107 108
        on right: 92 93
    parameter-constraint-set <parameter_constraint_set_t> (140)
        on left: 109 110 111
        on right: 98 99 101 102 104 105 106 107 111
    parameter-value-constraint-set <parameter_constraint_set_t> (141)
        on left: 112 113 114
        on right: 100 103 108 114
    parameter-matched-value <syntax_expression_t> (142)
        on left: 115
        on right: 112
    parameter-matched-type <syntax_expression_t> (143)
        on left: 116 117 118 119
        on right: 109
    basic-parameter-matched-type <syntax_expression_t> (144)
        on left: 120 121 122 123
        on right: 116 117 123
    concept-expression <syntax_expression_t> (145)
        on left: 124
        on right: 110 111 113 114
    syntax-expression <syntax_expression_t> (146)
        on left: 125 126
        on right: 14 18 31 32 33 34 35 43 45 68 69 74 75 83 97 115 138 139 140 141 142 143 144 149 161
    syntax-expression-wo-ii <syntax_expression_t> (147)
        on left: 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148
        on right: 126
    apostrophe-expression <syntax_expression_t> (148)
        on left: 149
        on right: 139 145 151 153 156
    new-expression <syntax_expression_t> (149)
        on left: 150 151 152 153
        on right: 146
    call-expression <syntax_expression_t> (150)
        on left: 154 155 156 157
        on right: 155 160 163
    lambda-expression <syntax_expression_t> (151)
        on left: 158 159
        on right: 148 157
    compound-expression <syntax_expression_t> (152)
        on left: 160 161
        on right: 44 147
    type-expr <syntax_expression_t> (153)
        on left: 162 163 164 165 166 167 168 169
        on right: 10 22 59 159 165 167 168 169


State 0

    0 $accept: . begin "end of file"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    LET                  shift, and go to state 14
    EXTERN               shift, and go to state 15
    "`new`"              shift, and go to state 16
    "`while`"            shift, and go to state 17
    "`for`"              shift, and go to state 18
    "`if`"               shift, and go to state 19
    "`return`"           shift, and go to state 20
    USING                shift, and go to state 21
    INCLUDE              shift, and go to state 22
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    ENUM                 shift, and go to state 25
    STRUCT               shift, and go to state 26
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    $default  reduce using rule 3 (statement_any)

    begin                         go to state 29
    statement_any                 go to state 30
    finished_statement_any        go to state 31
    statement                     go to state 32
    let-decl                      go to state 33
    let-decl-start                go to state 34
    let-decl-start-with-opt-type  go to state 35
    finished_statement            go to state 36
    generic-statement             go to state 37
    identifier                    go to state 38
    qname                         go to state 39
    fn-start-decl                 go to state 40
    enum-decl                     go to state 41
    syntax-expression             go to state 42
    syntax-expression-wo-ii       go to state 43
    apostrophe-expression         go to state 44
    new-expression                go to state 45
    call-expression               go to state 46
    lambda-expression             go to state 47
    compound-expression           go to state 48


State 1

  133 syntax-expression-wo-ii: STRING .

    $default  reduce using rule 133 (syntax-expression-wo-ii)


State 2

   49 identifier: IDENTIFIER .

    $default  reduce using rule 49 (identifier)


State 3

  125 syntax-expression: INTERNAL_IDENTIFIER .

    $default  reduce using rule 125 (syntax-expression)


State 4

  134 syntax-expression-wo-ii: RESERVED_IDENTIFIER .

    $default  reduce using rule 134 (syntax-expression-wo-ii)


State 5

  132 syntax-expression-wo-ii: INTEGER_INDEX .

    $default  reduce using rule 132 (syntax-expression-wo-ii)


State 6

  129 syntax-expression-wo-ii: INTEGER .

    $default  reduce using rule 129 (syntax-expression-wo-ii)


State 7

  130 syntax-expression-wo-ii: DECIMAL .

    $default  reduce using rule 130 (syntax-expression-wo-ii)


State 8

  131 syntax-expression-wo-ii: DECIMAL_S .

    $default  reduce using rule 131 (syntax-expression-wo-ii)


State 9

  149 apostrophe-expression: "APOSTROPHE" . syntax-expression "APOSTROPHE"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    identifier               go to state 38
    qname                    go to state 39
    fn-start-decl            go to state 49
    syntax-expression        go to state 50
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 10

   51 qname: "`::`" . identifier

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 52


State 11

  136 syntax-expression-wo-ii: "`(`" . argument-list "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    identifier               go to state 53
    qname                    go to state 39
    fn-start-decl            go to state 49
    argument-list            go to state 54
    argument                 go to state 55
    argument-name            go to state 56
    syntax-expression        go to state 57
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 12

  137 syntax-expression-wo-ii: "`.`" . identifier

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 58


State 13

  141 syntax-expression-wo-ii: "`!`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    identifier               go to state 38
    qname                    go to state 39
    fn-start-decl            go to state 49
    syntax-expression        go to state 59
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 14

   19 let-decl-start: LET . identifier
   20               | LET . "weak modifier" identifier

    IDENTIFIER       shift, and go to state 2
    "weak modifier"  shift, and go to state 60

    identifier  go to state 61


State 15

   10 statement: EXTERN . VAR identifier "`:`" type-expr
   11          | EXTERN . "`fn`" fn-decl

    VAR     shift, and go to state 62
    "`fn`"  shift, and go to state 63


State 16

  150 new-expression: "`new`" . qname
  151               | "`new`" . apostrophe-expression
  152               | "`new`" . qname "`(`" argument-list-opt "`)`"
  153               | "`new`" . apostrophe-expression "`(`" argument-list-opt "`)`"

    IDENTIFIER    shift, and go to state 2
    "APOSTROPHE"  shift, and go to state 9
    "`::`"        shift, and go to state 10

    identifier             go to state 38
    qname                  go to state 64
    apostrophe-expression  go to state 65


State 17

   31 finished_statement: "`while`" . syntax-expression braced-statements
   32                   | "`while`" . syntax-expression "`;`" syntax-expression braced-statements

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    identifier               go to state 38
    qname                    go to state 39
    fn-start-decl            go to state 49
    syntax-expression        go to state 66
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 18

   33 finished_statement: "`for`" . syntax-expression "`in`" syntax-expression braced-statements

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    identifier               go to state 38
    qname                    go to state 39
    fn-start-decl            go to state 49
    syntax-expression        go to state 67
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 19

   34 finished_statement: "`if`" . syntax-expression braced-statements
   35                   | "`if`" . syntax-expression braced-statements "`else`" braced-statements

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    identifier               go to state 38
    qname                    go to state 39
    fn-start-decl            go to state 49
    syntax-expression        go to state 68
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 20

   43 generic-statement: "`return`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    identifier               go to state 38
    qname                    go to state 39
    fn-start-decl            go to state 49
    syntax-expression        go to state 69
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 21

   42 generic-statement: USING . using-decl

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 10

    identifier  go to state 38
    qname       go to state 70
    using-decl  go to state 71


State 22

   12 statement: INCLUDE . STRING

    STRING  shift, and go to state 72


State 23

   55 fn-start-decl: INLINE . "`fn`"

    "`fn`"  shift, and go to state 73


State 24

   54 fn-start-decl: "`fn`" .

    $default  reduce using rule 54 (fn-start-decl)


State 25

   60 enum-decl: ENUM . qname "`{`" case-list-opt "`}`"

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 10

    identifier  go to state 38
    qname       go to state 74


State 26

   16 statement: STRUCT . struct-decl
   37 finished_statement: STRUCT . qname braced-statements
   38                   | STRUCT . qname "`(`" parameter-list-opt "`)`" braced-statements

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 10

    identifier   go to state 38
    qname        go to state 75
    struct-decl  go to state 76


State 27

  127 syntax-expression-wo-ii: "true" .

    $default  reduce using rule 127 (syntax-expression-wo-ii)


State 28

  128 syntax-expression-wo-ii: "false" .

    $default  reduce using rule 128 (syntax-expression-wo-ii)


State 29

    0 $accept: begin . "end of file"

    "end of file"  shift, and go to state 77


State 30

    1 begin: statement_any . "end of file"
    9 finished_statement_any: statement_any . "`;`"

    "end of file"  shift, and go to state 78
    "`;`"          shift, and go to state 79


State 31

    2 begin: finished_statement_any . "end of file"
    5 statement_any: finished_statement_any . statement
    7 finished_statement_any: finished_statement_any . "`;`"
    8                       | finished_statement_any . finished_statement

    "end of file"        shift, and go to state 80
    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`;`"                shift, and go to state 81
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    LET                  shift, and go to state 14
    EXTERN               shift, and go to state 15
    "`new`"              shift, and go to state 16
    "`while`"            shift, and go to state 17
    "`for`"              shift, and go to state 18
    "`if`"               shift, and go to state 19
    "`return`"           shift, and go to state 20
    USING                shift, and go to state 21
    INCLUDE              shift, and go to state 22
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    ENUM                 shift, and go to state 25
    STRUCT               shift, and go to state 26
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    statement                     go to state 82
    let-decl                      go to state 33
    let-decl-start                go to state 34
    let-decl-start-with-opt-type  go to state 35
    finished_statement            go to state 83
    generic-statement             go to state 37
    identifier                    go to state 38
    qname                         go to state 39
    fn-start-decl                 go to state 40
    enum-decl                     go to state 41
    syntax-expression             go to state 42
    syntax-expression-wo-ii       go to state 43
    apostrophe-expression         go to state 44
    new-expression                go to state 45
    call-expression               go to state 46
    lambda-expression             go to state 47
    compound-expression           go to state 48


State 32

    4 statement_any: statement .

    $default  reduce using rule 4 (statement_any)


State 33

   41 generic-statement: let-decl .

    $default  reduce using rule 41 (generic-statement)


State 34

   21 let-decl-start-with-opt-type: let-decl-start .
   22                             | let-decl-start . "`:`" type-expr

    "`:`"  shift, and go to state 84

    $default  reduce using rule 21 (let-decl-start-with-opt-type)


State 35

   17 let-decl: let-decl-start-with-opt-type .
   18         | let-decl-start-with-opt-type . "`=`" syntax-expression

    "`=`"  shift, and go to state 85

    $default  reduce using rule 17 (let-decl)


State 36

    6 finished_statement_any: finished_statement .

    $default  reduce using rule 6 (finished_statement_any)


State 37

   15 statement: generic-statement .

    $default  reduce using rule 15 (statement)


State 38

   52 qname: identifier .

    $default  reduce using rule 52 (qname)


State 39

   53 qname: qname . "`::`" identifier
  135 syntax-expression-wo-ii: qname .
  154 call-expression: qname . "`(`" argument-list-opt "`)`"

    "`::`"  shift, and go to state 86
    "`(`"   shift, and go to state 87

    $default  reduce using rule 135 (syntax-expression-wo-ii)


State 40

   14 statement: fn-start-decl . fn-decl "`=>`" syntax-expression
   36 finished_statement: fn-start-decl . fn-decl braced-statements
  158 lambda-expression: fn-start-decl . "`(`" parameter-list-opt "`)`" braced-statements
  159                  | fn-start-decl . "`(`" parameter-list-opt "`)`" "`->`" type-expr braced-statements

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 10
    "`(`"       shift, and go to state 88
    "`new`"     shift, and go to state 89

    identifier  go to state 38
    qname       go to state 90
    fn-name     go to state 91
    fn-decl     go to state 92


State 41

   13 statement: enum-decl .

    $default  reduce using rule 13 (statement)


State 42

   45 generic-statement: syntax-expression . "`=`" syntax-expression
  138 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  139                        | syntax-expression . "`.`" apostrophe-expression
  140                        | syntax-expression . INTEGER_INDEX
  142                        | syntax-expression . "`+`" syntax-expression
  143                        | syntax-expression . "`==`" syntax-expression
  144                        | syntax-expression . "`!=`" syntax-expression
  161 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 93
    "`=`"          shift, and go to state 94
    "`==`"         shift, and go to state 95
    "`!=`"         shift, and go to state 96
    "`...`"        shift, and go to state 97
    "`.`"          shift, and go to state 98
    "`+`"          shift, and go to state 99


State 43

  126 syntax-expression: syntax-expression-wo-ii .

    $default  reduce using rule 126 (syntax-expression)


State 44

  145 syntax-expression-wo-ii: apostrophe-expression .
  156 call-expression: apostrophe-expression . "`(`" argument-list-opt "`)`"

    "`(`"  shift, and go to state 100

    $default  reduce using rule 145 (syntax-expression-wo-ii)


State 45

  146 syntax-expression-wo-ii: new-expression .

    $default  reduce using rule 146 (syntax-expression-wo-ii)


State 46

  155 call-expression: call-expression . "`(`" argument-list-opt "`)`"
  160 compound-expression: call-expression .

    "`(`"  shift, and go to state 101

    $default  reduce using rule 160 (compound-expression)


State 47

  148 syntax-expression-wo-ii: lambda-expression .
  157 call-expression: lambda-expression . "`(`" argument-list-opt "`)`"

    "`(`"  shift, and go to state 102

    $default  reduce using rule 148 (syntax-expression-wo-ii)


State 48

   44 generic-statement: compound-expression .
  147 syntax-expression-wo-ii: compound-expression .

    "end of file"  reduce using rule 44 (generic-statement)
    "`}`"          reduce using rule 44 (generic-statement)
    "`;`"          reduce using rule 44 (generic-statement)
    $default       reduce using rule 147 (syntax-expression-wo-ii)


State 49

  158 lambda-expression: fn-start-decl . "`(`" parameter-list-opt "`)`" braced-statements
  159                  | fn-start-decl . "`(`" parameter-list-opt "`)`" "`->`" type-expr braced-statements

    "`(`"  shift, and go to state 88


State 50

  138 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  139                        | syntax-expression . "`.`" apostrophe-expression
  140                        | syntax-expression . INTEGER_INDEX
  142                        | syntax-expression . "`+`" syntax-expression
  143                        | syntax-expression . "`==`" syntax-expression
  144                        | syntax-expression . "`!=`" syntax-expression
  149 apostrophe-expression: "APOSTROPHE" syntax-expression . "APOSTROPHE"
  161 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 93
    "APOSTROPHE"   shift, and go to state 103
    "`==`"         shift, and go to state 95
    "`!=`"         shift, and go to state 96
    "`...`"        shift, and go to state 97
    "`.`"          shift, and go to state 98
    "`+`"          shift, and go to state 99


State 51

  147 syntax-expression-wo-ii: compound-expression .

    $default  reduce using rule 147 (syntax-expression-wo-ii)


State 52

   51 qname: "`::`" identifier .

    $default  reduce using rule 51 (qname)


State 53

   52 qname: identifier .
   76 argument-name: identifier . "`=`"
   77              | identifier . "`:`"

    "`=`"  shift, and go to state 104
    "`:`"  shift, and go to state 105

    $default  reduce using rule 52 (qname)


State 54

   73 argument-list: argument-list . "," argument
  136 syntax-expression-wo-ii: "`(`" argument-list . "`)`"

    "`)`"  shift, and go to state 106
    ","    shift, and go to state 107


State 55

   72 argument-list: argument .

    $default  reduce using rule 72 (argument-list)


State 56

   74 argument: argument-name . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    identifier               go to state 38
    qname                    go to state 39
    fn-start-decl            go to state 49
    syntax-expression        go to state 108
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 57

   75 argument: syntax-expression .
  138 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  139                        | syntax-expression . "`.`" apostrophe-expression
  140                        | syntax-expression . INTEGER_INDEX
  142                        | syntax-expression . "`+`" syntax-expression
  143                        | syntax-expression . "`==`" syntax-expression
  144                        | syntax-expression . "`!=`" syntax-expression
  161 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 93
    "`==`"         shift, and go to state 95
    "`!=`"         shift, and go to state 96
    "`...`"        shift, and go to state 97
    "`.`"          shift, and go to state 98
    "`+`"          shift, and go to state 99

    $default  reduce using rule 75 (argument)


State 58

  137 syntax-expression-wo-ii: "`.`" identifier .

    $default  reduce using rule 137 (syntax-expression-wo-ii)


State 59

  138 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  139                        | syntax-expression . "`.`" apostrophe-expression
  140                        | syntax-expression . INTEGER_INDEX
  141                        | "`!`" syntax-expression .
  142                        | syntax-expression . "`+`" syntax-expression
  143                        | syntax-expression . "`==`" syntax-expression
  144                        | syntax-expression . "`!=`" syntax-expression
  161 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 93
    "`.`"          shift, and go to state 98

    $default  reduce using rule 141 (syntax-expression-wo-ii)


State 60

   20 let-decl-start: LET "weak modifier" . identifier

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 109


State 61

   19 let-decl-start: LET identifier .

    $default  reduce using rule 19 (let-decl-start)


State 62

   10 statement: EXTERN VAR . identifier "`:`" type-expr

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 110


State 63

   11 statement: EXTERN "`fn`" . fn-decl

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 10
    "`new`"     shift, and go to state 89

    identifier  go to state 38
    qname       go to state 90
    fn-name     go to state 91
    fn-decl     go to state 111


State 64

   53 qname: qname . "`::`" identifier
  150 new-expression: "`new`" qname .
  152               | "`new`" qname . "`(`" argument-list-opt "`)`"

    "`::`"  shift, and go to state 86
    "`(`"   shift, and go to state 112

    $default  reduce using rule 150 (new-expression)


State 65

  151 new-expression: "`new`" apostrophe-expression .
  153               | "`new`" apostrophe-expression . "`(`" argument-list-opt "`)`"

    "`(`"  shift, and go to state 113

    $default  reduce using rule 151 (new-expression)


State 66

   31 finished_statement: "`while`" syntax-expression . braced-statements
   32                   | "`while`" syntax-expression . "`;`" syntax-expression braced-statements
  138 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  139                        | syntax-expression . "`.`" apostrophe-expression
  140                        | syntax-expression . INTEGER_INDEX
  142                        | syntax-expression . "`+`" syntax-expression
  143                        | syntax-expression . "`==`" syntax-expression
  144                        | syntax-expression . "`!=`" syntax-expression
  161 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 93
    "`==`"         shift, and go to state 95
    "`!=`"         shift, and go to state 96
    "`...`"        shift, and go to state 97
    "`{`"          shift, and go to state 114
    "`;`"          shift, and go to state 115
    "`.`"          shift, and go to state 98
    "`+`"          shift, and go to state 99

    braced-statements  go to state 116


State 67

   33 finished_statement: "`for`" syntax-expression . "`in`" syntax-expression braced-statements
  138 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  139                        | syntax-expression . "`.`" apostrophe-expression
  140                        | syntax-expression . INTEGER_INDEX
  142                        | syntax-expression . "`+`" syntax-expression
  143                        | syntax-expression . "`==`" syntax-expression
  144                        | syntax-expression . "`!=`" syntax-expression
  161 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 93
    "`==`"         shift, and go to state 95
    "`!=`"         shift, and go to state 96
    "`...`"        shift, and go to state 97
    "`.`"          shift, and go to state 98
    "`+`"          shift, and go to state 99
    "`in`"         shift, and go to state 117


State 68

   34 finished_statement: "`if`" syntax-expression . braced-statements
   35                   | "`if`" syntax-expression . braced-statements "`else`" braced-statements
  138 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  139                        | syntax-expression . "`.`" apostrophe-expression
  140                        | syntax-expression . INTEGER_INDEX
  142                        | syntax-expression . "`+`" syntax-expression
  143                        | syntax-expression . "`==`" syntax-expression
  144                        | syntax-expression . "`!=`" syntax-expression
  161 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 93
    "`==`"         shift, and go to state 95
    "`!=`"         shift, and go to state 96
    "`...`"        shift, and go to state 97
    "`{`"          shift, and go to state 114
    "`.`"          shift, and go to state 98
    "`+`"          shift, and go to state 99

    braced-statements  go to state 118


State 69

   43 generic-statement: "`return`" syntax-expression .
  138 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  139                        | syntax-expression . "`.`" apostrophe-expression
  140                        | syntax-expression . INTEGER_INDEX
  142                        | syntax-expression . "`+`" syntax-expression
  143                        | syntax-expression . "`==`" syntax-expression
  144                        | syntax-expression . "`!=`" syntax-expression
  161 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 93
    "`==`"         shift, and go to state 95
    "`!=`"         shift, and go to state 96
    "`...`"        shift, and go to state 97
    "`.`"          shift, and go to state 98
    "`+`"          shift, and go to state 99

    $default  reduce using rule 43 (generic-statement)


State 70

   53 qname: qname . "`::`" identifier
   68 using-decl: qname . "`=>`" syntax-expression
   69           | qname . "`(`" parameter-list-opt "`)`" "`=>`" syntax-expression

    "`=>`"  shift, and go to state 119
    "`::`"  shift, and go to state 86
    "`(`"   shift, and go to state 120


State 71

   42 generic-statement: USING using-decl .

    $default  reduce using rule 42 (generic-statement)


State 72

   12 statement: INCLUDE STRING .

    $default  reduce using rule 12 (statement)


State 73

   55 fn-start-decl: INLINE "`fn`" .

    $default  reduce using rule 55 (fn-start-decl)


State 74

   53 qname: qname . "`::`" identifier
   60 enum-decl: ENUM qname . "`{`" case-list-opt "`}`"

    "`::`"  shift, and go to state 86
    "`{`"   shift, and go to state 121


State 75

   37 finished_statement: STRUCT qname . braced-statements
   38                   | STRUCT qname . "`(`" parameter-list-opt "`)`" braced-statements
   53 qname: qname . "`::`" identifier
   66 struct-decl: qname . "`=>`" "`(`" field-list-opt "`)`"
   67            | qname . "`(`" parameter-list-opt "`)`" "`=>`" "`(`" field-list-opt "`)`"

    "`=>`"  shift, and go to state 122
    "`::`"  shift, and go to state 86
    "`(`"   shift, and go to state 123
    "`{`"   shift, and go to state 114

    braced-statements  go to state 124


State 76

   16 statement: STRUCT struct-decl .

    $default  reduce using rule 16 (statement)


State 77

    0 $accept: begin "end of file" .

    $default  accept


State 78

    1 begin: statement_any "end of file" .

    $default  reduce using rule 1 (begin)


State 79

    9 finished_statement_any: statement_any "`;`" .

    $default  reduce using rule 9 (finished_statement_any)


State 80

    2 begin: finished_statement_any "end of file" .

    $default  reduce using rule 2 (begin)


State 81

    7 finished_statement_any: finished_statement_any "`;`" .

    $default  reduce using rule 7 (finished_statement_any)


State 82

    5 statement_any: finished_statement_any statement .

    $default  reduce using rule 5 (statement_any)


State 83

    8 finished_statement_any: finished_statement_any finished_statement .

    $default  reduce using rule 8 (finished_statement_any)


State 84

   22 let-decl-start-with-opt-type: let-decl-start "`:`" . type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 125
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 126
    "`[`"                shift, and go to state 127
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24

    identifier             go to state 38
    qname                  go to state 128
    fn-start-decl          go to state 49
    apostrophe-expression  go to state 129
    call-expression        go to state 130
    lambda-expression      go to state 131
    type-expr              go to state 132


State 85

   18 let-decl: let-decl-start-with-opt-type "`=`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    identifier               go to state 38
    qname                    go to state 39
    fn-start-decl            go to state 49
    syntax-expression        go to state 133
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 86

   53 qname: qname "`::`" . identifier

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 134


State 87

  154 call-expression: qname "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    $default  reduce using rule 70 (argument-list-opt)

    identifier               go to state 53
    qname                    go to state 39
    fn-start-decl            go to state 49
    argument-list-opt        go to state 135
    argument-list            go to state 136
    argument                 go to state 55
    argument-name            go to state 56
    syntax-expression        go to state 57
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 88

  158 lambda-expression: fn-start-decl "`(`" . parameter-list-opt "`)`" braced-statements
  159                  | fn-start-decl "`(`" . parameter-list-opt "`)`" "`->`" type-expr braced-statements

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 137
    "`@`"                shift, and go to state 138
    "`_`"                shift, and go to state 139
    "`=>`"               shift, and go to state 140
    "`::`"               shift, and go to state 10
    "const modifier"     shift, and go to state 141

    $default  reduce using rule 90 (parameter-list-opt)

    identifier                    go to state 142
    qname                         go to state 143
    parameter-list-opt            go to state 144
    parameter-list                go to state 145
    parameter-decl                go to state 146
    parameter-constraint-set      go to state 147
    parameter-matched-type        go to state 148
    basic-parameter-matched-type  go to state 149
    concept-expression            go to state 150


State 89

   57 fn-name: "`new`" .

    $default  reduce using rule 57 (fn-name)


State 90

   53 qname: qname . "`::`" identifier
   56 fn-name: qname .

    "`::`"  shift, and go to state 86

    $default  reduce using rule 56 (fn-name)


State 91

   58 fn-decl: fn-name . "`(`" parameter-list-opt "`)`"
   59        | fn-name . "`(`" parameter-list-opt "`)`" "`->`" type-expr

    "`(`"  shift, and go to state 151


State 92

   14 statement: fn-start-decl fn-decl . "`=>`" syntax-expression
   36 finished_statement: fn-start-decl fn-decl . braced-statements

    "`=>`"  shift, and go to state 152
    "`{`"   shift, and go to state 114

    braced-statements  go to state 153


State 93

  140 syntax-expression-wo-ii: syntax-expression INTEGER_INDEX .

    $default  reduce using rule 140 (syntax-expression-wo-ii)


State 94

   45 generic-statement: syntax-expression "`=`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    identifier               go to state 38
    qname                    go to state 39
    fn-start-decl            go to state 49
    syntax-expression        go to state 154
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 95

  143 syntax-expression-wo-ii: syntax-expression "`==`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    identifier               go to state 38
    qname                    go to state 39
    fn-start-decl            go to state 49
    syntax-expression        go to state 155
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 96

  144 syntax-expression-wo-ii: syntax-expression "`!=`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    identifier               go to state 38
    qname                    go to state 39
    fn-start-decl            go to state 49
    syntax-expression        go to state 156
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 97

  161 compound-expression: syntax-expression "`...`" .

    $default  reduce using rule 161 (compound-expression)


State 98

  138 syntax-expression-wo-ii: syntax-expression "`.`" . identifier
  139                        | syntax-expression "`.`" . apostrophe-expression

    IDENTIFIER    shift, and go to state 2
    "APOSTROPHE"  shift, and go to state 9

    identifier             go to state 157
    apostrophe-expression  go to state 158


State 99

  142 syntax-expression-wo-ii: syntax-expression "`+`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    identifier               go to state 38
    qname                    go to state 39
    fn-start-decl            go to state 49
    syntax-expression        go to state 159
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 100

  156 call-expression: apostrophe-expression "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    $default  reduce using rule 70 (argument-list-opt)

    identifier               go to state 53
    qname                    go to state 39
    fn-start-decl            go to state 49
    argument-list-opt        go to state 160
    argument-list            go to state 136
    argument                 go to state 55
    argument-name            go to state 56
    syntax-expression        go to state 57
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 101

  155 call-expression: call-expression "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    $default  reduce using rule 70 (argument-list-opt)

    identifier               go to state 53
    qname                    go to state 39
    fn-start-decl            go to state 49
    argument-list-opt        go to state 161
    argument-list            go to state 136
    argument                 go to state 55
    argument-name            go to state 56
    syntax-expression        go to state 57
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 102

  157 call-expression: lambda-expression "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    $default  reduce using rule 70 (argument-list-opt)

    identifier               go to state 53
    qname                    go to state 39
    fn-start-decl            go to state 49
    argument-list-opt        go to state 162
    argument-list            go to state 136
    argument                 go to state 55
    argument-name            go to state 56
    syntax-expression        go to state 57
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 103

  149 apostrophe-expression: "APOSTROPHE" syntax-expression "APOSTROPHE" .

    $default  reduce using rule 149 (apostrophe-expression)


State 104

   76 argument-name: identifier "`=`" .

    $default  reduce using rule 76 (argument-name)


State 105

   77 argument-name: identifier "`:`" .

    $default  reduce using rule 77 (argument-name)


State 106

  136 syntax-expression-wo-ii: "`(`" argument-list "`)`" .

    $default  reduce using rule 136 (syntax-expression-wo-ii)


State 107

   73 argument-list: argument-list "," . argument

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    identifier               go to state 53
    qname                    go to state 39
    fn-start-decl            go to state 49
    argument                 go to state 163
    argument-name            go to state 56
    syntax-expression        go to state 57
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 108

   74 argument: argument-name syntax-expression .
  138 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  139                        | syntax-expression . "`.`" apostrophe-expression
  140                        | syntax-expression . INTEGER_INDEX
  142                        | syntax-expression . "`+`" syntax-expression
  143                        | syntax-expression . "`==`" syntax-expression
  144                        | syntax-expression . "`!=`" syntax-expression
  161 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 93
    "`==`"         shift, and go to state 95
    "`!=`"         shift, and go to state 96
    "`...`"        shift, and go to state 97
    "`.`"          shift, and go to state 98
    "`+`"          shift, and go to state 99

    $default  reduce using rule 74 (argument)


State 109

   20 let-decl-start: LET "weak modifier" identifier .

    $default  reduce using rule 20 (let-decl-start)


State 110

   10 statement: EXTERN VAR identifier . "`:`" type-expr

    "`:`"  shift, and go to state 164


State 111

   11 statement: EXTERN "`fn`" fn-decl .

    $default  reduce using rule 11 (statement)


State 112

  152 new-expression: "`new`" qname "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    $default  reduce using rule 70 (argument-list-opt)

    identifier               go to state 53
    qname                    go to state 39
    fn-start-decl            go to state 49
    argument-list-opt        go to state 165
    argument-list            go to state 136
    argument                 go to state 55
    argument-name            go to state 56
    syntax-expression        go to state 57
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 113

  153 new-expression: "`new`" apostrophe-expression "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    $default  reduce using rule 70 (argument-list-opt)

    identifier               go to state 53
    qname                    go to state 39
    fn-start-decl            go to state 49
    argument-list-opt        go to state 166
    argument-list            go to state 136
    argument                 go to state 55
    argument-name            go to state 56
    syntax-expression        go to state 57
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 114

   30 braced-statements: "`{`" . infunction-statement-set "`}`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    LET                  shift, and go to state 14
    "`new`"              shift, and go to state 16
    "`while`"            shift, and go to state 17
    "`for`"              shift, and go to state 18
    "`if`"               shift, and go to state 19
    "`continue`"         shift, and go to state 167
    "`break`"            shift, and go to state 168
    "`return`"           shift, and go to state 20
    USING                shift, and go to state 21
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    STRUCT               shift, and go to state 169
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    $default  reduce using rule 23 (infunction-statement-any)

    let-decl                           go to state 33
    let-decl-start                     go to state 34
    let-decl-start-with-opt-type       go to state 35
    infunction-statement-any           go to state 170
    finished-infunction-statement-any  go to state 171
    finished_statement                 go to state 172
    infunction-statement-set           go to state 173
    generic-statement                  go to state 174
    infunction-statement               go to state 175
    identifier                         go to state 38
    qname                              go to state 39
    fn-start-decl                      go to state 176
    syntax-expression                  go to state 42
    syntax-expression-wo-ii            go to state 43
    apostrophe-expression              go to state 44
    new-expression                     go to state 45
    call-expression                    go to state 46
    lambda-expression                  go to state 47
    compound-expression                go to state 48


State 115

   32 finished_statement: "`while`" syntax-expression "`;`" . syntax-expression braced-statements

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    identifier               go to state 38
    qname                    go to state 39
    fn-start-decl            go to state 49
    syntax-expression        go to state 177
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 116

   31 finished_statement: "`while`" syntax-expression braced-statements .

    $default  reduce using rule 31 (finished_statement)


State 117

   33 finished_statement: "`for`" syntax-expression "`in`" . syntax-expression braced-statements

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    identifier               go to state 38
    qname                    go to state 39
    fn-start-decl            go to state 49
    syntax-expression        go to state 178
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 118

   34 finished_statement: "`if`" syntax-expression braced-statements .
   35                   | "`if`" syntax-expression braced-statements . "`else`" braced-statements

    "`else`"  shift, and go to state 179

    $default  reduce using rule 34 (finished_statement)


State 119

   68 using-decl: qname "`=>`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    identifier               go to state 38
    qname                    go to state 39
    fn-start-decl            go to state 49
    syntax-expression        go to state 180
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 120

   69 using-decl: qname "`(`" . parameter-list-opt "`)`" "`=>`" syntax-expression

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 137
    "`@`"                shift, and go to state 138
    "`_`"                shift, and go to state 139
    "`=>`"               shift, and go to state 140
    "`::`"               shift, and go to state 10
    "const modifier"     shift, and go to state 141

    $default  reduce using rule 90 (parameter-list-opt)

    identifier                    go to state 142
    qname                         go to state 143
    parameter-list-opt            go to state 181
    parameter-list                go to state 145
    parameter-decl                go to state 146
    parameter-constraint-set      go to state 147
    parameter-matched-type        go to state 148
    basic-parameter-matched-type  go to state 149
    concept-expression            go to state 150


State 121

   60 enum-decl: ENUM qname "`{`" . case-list-opt "`}`"

    IDENTIFIER  shift, and go to state 2

    $default  reduce using rule 61 (case-list-opt)

    identifier     go to state 182
    case-list-opt  go to state 183
    case-list      go to state 184
    case-decl      go to state 185


State 122

   66 struct-decl: qname "`=>`" . "`(`" field-list-opt "`)`"

    "`(`"  shift, and go to state 186


State 123

   38 finished_statement: STRUCT qname "`(`" . parameter-list-opt "`)`" braced-statements
   67 struct-decl: qname "`(`" . parameter-list-opt "`)`" "`=>`" "`(`" field-list-opt "`)`"

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 137
    "`@`"                shift, and go to state 138
    "`_`"                shift, and go to state 139
    "`=>`"               shift, and go to state 140
    "`::`"               shift, and go to state 10
    "const modifier"     shift, and go to state 141

    $default  reduce using rule 90 (parameter-list-opt)

    identifier                    go to state 142
    qname                         go to state 143
    parameter-list-opt            go to state 187
    parameter-list                go to state 145
    parameter-decl                go to state 146
    parameter-constraint-set      go to state 147
    parameter-matched-type        go to state 148
    basic-parameter-matched-type  go to state 149
    concept-expression            go to state 150


State 124

   37 finished_statement: STRUCT qname braced-statements .

    $default  reduce using rule 37 (finished_statement)


State 125

  164 type-expr: INTERNAL_IDENTIFIER .

    $default  reduce using rule 164 (type-expr)


State 126

  166 type-expr: "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    $default  reduce using rule 70 (argument-list-opt)

    identifier               go to state 53
    qname                    go to state 39
    fn-start-decl            go to state 49
    argument-list-opt        go to state 188
    argument-list            go to state 136
    argument                 go to state 55
    argument-name            go to state 56
    syntax-expression        go to state 57
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 127

  165 type-expr: "`[`" . type-expr "`]`"

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 125
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 126
    "`[`"                shift, and go to state 127
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24

    identifier             go to state 38
    qname                  go to state 128
    fn-start-decl          go to state 49
    apostrophe-expression  go to state 129
    call-expression        go to state 130
    lambda-expression      go to state 131
    type-expr              go to state 189


State 128

   53 qname: qname . "`::`" identifier
  154 call-expression: qname . "`(`" argument-list-opt "`)`"
  162 type-expr: qname .

    "`::`"  shift, and go to state 86
    "`(`"   shift, and go to state 87

    $default  reduce using rule 162 (type-expr)


State 129

  156 call-expression: apostrophe-expression . "`(`" argument-list-opt "`)`"

    "`(`"  shift, and go to state 100


State 130

  155 call-expression: call-expression . "`(`" argument-list-opt "`)`"
  163 type-expr: call-expression .

    "`(`"  shift, and go to state 101

    $default  reduce using rule 163 (type-expr)


State 131

  157 call-expression: lambda-expression . "`(`" argument-list-opt "`)`"

    "`(`"  shift, and go to state 102


State 132

   22 let-decl-start-with-opt-type: let-decl-start "`:`" type-expr .
  167 type-expr: type-expr . "`[`" INTEGER "`]`"
  168          | type-expr . "`|`" type-expr
  169          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 190
    "`[`"   shift, and go to state 191
    "`|`"   shift, and go to state 192

    $default  reduce using rule 22 (let-decl-start-with-opt-type)


State 133

   18 let-decl: let-decl-start-with-opt-type "`=`" syntax-expression .
  138 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  139                        | syntax-expression . "`.`" apostrophe-expression
  140                        | syntax-expression . INTEGER_INDEX
  142                        | syntax-expression . "`+`" syntax-expression
  143                        | syntax-expression . "`==`" syntax-expression
  144                        | syntax-expression . "`!=`" syntax-expression
  161 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 93
    "`==`"         shift, and go to state 95
    "`!=`"         shift, and go to state 96
    "`...`"        shift, and go to state 97
    "`.`"          shift, and go to state 98
    "`+`"          shift, and go to state 99

    $default  reduce using rule 18 (let-decl)


State 134

   53 qname: qname "`::`" identifier .

    $default  reduce using rule 53 (qname)


State 135

  154 call-expression: qname "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 193


State 136

   71 argument-list-opt: argument-list .
   73 argument-list: argument-list . "," argument

    ","  shift, and go to state 107

    $default  reduce using rule 71 (argument-list-opt)


State 137

  101 parameter-decl: INTERNAL_IDENTIFIER . "`:`" parameter-constraint-set parameter-default-value-opt
  102               | INTERNAL_IDENTIFIER . "`:`" "const modifier" parameter-constraint-set parameter-default-value-opt
  103               | INTERNAL_IDENTIFIER . "`=>`" parameter-value-constraint-set
  104               | INTERNAL_IDENTIFIER . "`...`" "`:`" parameter-constraint-set
  105               | INTERNAL_IDENTIFIER . "`...`" "`:`" "const modifier" parameter-constraint-set
  118 parameter-matched-type: INTERNAL_IDENTIFIER .
  119                       | INTERNAL_IDENTIFIER . "`...`"

    "`=>`"   shift, and go to state 194
    "`...`"  shift, and go to state 195
    "`:`"    shift, and go to state 196

    $default  reduce using rule 118 (parameter-matched-type)


State 138

  124 concept-expression: "`@`" . qname

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 10

    identifier  go to state 38
    qname       go to state 197


State 139

  120 basic-parameter-matched-type: "`_`" .

    $default  reduce using rule 120 (basic-parameter-matched-type)


State 140

  108 parameter-decl: "`=>`" . parameter-value-constraint-set

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`@`"                shift, and go to state 138
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    identifier                      go to state 38
    qname                           go to state 39
    fn-start-decl                   go to state 49
    parameter-value-constraint-set  go to state 198
    parameter-matched-value         go to state 199
    concept-expression              go to state 200
    syntax-expression               go to state 201
    syntax-expression-wo-ii         go to state 43
    apostrophe-expression           go to state 44
    new-expression                  go to state 45
    call-expression                 go to state 46
    lambda-expression               go to state 47
    compound-expression             go to state 51


State 141

  107 parameter-decl: "const modifier" . parameter-constraint-set parameter-default-value-opt

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 202
    "`@`"                shift, and go to state 138
    "`_`"                shift, and go to state 139
    "`::`"               shift, and go to state 10

    identifier                    go to state 38
    qname                         go to state 143
    parameter-constraint-set      go to state 203
    parameter-matched-type        go to state 148
    basic-parameter-matched-type  go to state 149
    concept-expression            go to state 150


State 142

   52 qname: identifier .
   98 parameter-decl: identifier . internal-identifier-opt "`:`" parameter-constraint-set parameter-default-value-opt
   99               | identifier . internal-identifier-opt "`:`" "const modifier" parameter-constraint-set parameter-default-value-opt
  100               | identifier . internal-identifier-opt "`=>`" parameter-value-constraint-set

    INTERNAL_IDENTIFIER  shift, and go to state 204

    "`=>`"    reduce using rule 94 (internal-identifier-opt)
    "`:`"     reduce using rule 94 (internal-identifier-opt)
    $default  reduce using rule 52 (qname)

    internal-identifier      go to state 205
    internal-identifier-opt  go to state 206


State 143

   53 qname: qname . "`::`" identifier
  121 basic-parameter-matched-type: qname .
  122                             | qname . "`(`" argument-list-opt "`)`"

    "`::`"  shift, and go to state 86
    "`(`"   shift, and go to state 207

    $default  reduce using rule 121 (basic-parameter-matched-type)


State 144

  158 lambda-expression: fn-start-decl "`(`" parameter-list-opt . "`)`" braced-statements
  159                  | fn-start-decl "`(`" parameter-list-opt . "`)`" "`->`" type-expr braced-statements

    "`)`"  shift, and go to state 208


State 145

   91 parameter-list-opt: parameter-list .
   93 parameter-list: parameter-list . "," parameter-decl

    ","  shift, and go to state 209

    $default  reduce using rule 91 (parameter-list-opt)


State 146

   92 parameter-list: parameter-decl .

    $default  reduce using rule 92 (parameter-list)


State 147

  106 parameter-decl: parameter-constraint-set . parameter-default-value-opt
  111 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`=`"  shift, and go to state 210
    "`@`"  shift, and go to state 138

    $default  reduce using rule 96 (parameter-default-value-opt)

    parameter-default-value-opt  go to state 211
    concept-expression           go to state 212


State 148

  109 parameter-constraint-set: parameter-matched-type .

    $default  reduce using rule 109 (parameter-constraint-set)


State 149

  116 parameter-matched-type: basic-parameter-matched-type .
  117                       | basic-parameter-matched-type . "`...`"
  123 basic-parameter-matched-type: basic-parameter-matched-type . "`|`" basic-parameter-matched-type

    "`...`"  shift, and go to state 213
    "`|`"    shift, and go to state 214

    $default  reduce using rule 116 (parameter-matched-type)


State 150

  110 parameter-constraint-set: concept-expression .

    $default  reduce using rule 110 (parameter-constraint-set)


State 151

   58 fn-decl: fn-name "`(`" . parameter-list-opt "`)`"
   59        | fn-name "`(`" . parameter-list-opt "`)`" "`->`" type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 137
    "`@`"                shift, and go to state 138
    "`_`"                shift, and go to state 139
    "`=>`"               shift, and go to state 140
    "`::`"               shift, and go to state 10
    "const modifier"     shift, and go to state 141

    $default  reduce using rule 90 (parameter-list-opt)

    identifier                    go to state 142
    qname                         go to state 143
    parameter-list-opt            go to state 215
    parameter-list                go to state 145
    parameter-decl                go to state 146
    parameter-constraint-set      go to state 147
    parameter-matched-type        go to state 148
    basic-parameter-matched-type  go to state 149
    concept-expression            go to state 150


State 152

   14 statement: fn-start-decl fn-decl "`=>`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    identifier               go to state 38
    qname                    go to state 39
    fn-start-decl            go to state 49
    syntax-expression        go to state 216
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 153

   36 finished_statement: fn-start-decl fn-decl braced-statements .

    $default  reduce using rule 36 (finished_statement)


State 154

   45 generic-statement: syntax-expression "`=`" syntax-expression .
  138 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  139                        | syntax-expression . "`.`" apostrophe-expression
  140                        | syntax-expression . INTEGER_INDEX
  142                        | syntax-expression . "`+`" syntax-expression
  143                        | syntax-expression . "`==`" syntax-expression
  144                        | syntax-expression . "`!=`" syntax-expression
  161 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 93
    "`==`"         shift, and go to state 95
    "`!=`"         shift, and go to state 96
    "`...`"        shift, and go to state 97
    "`.`"          shift, and go to state 98
    "`+`"          shift, and go to state 99

    $default  reduce using rule 45 (generic-statement)


State 155

  138 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  139                        | syntax-expression . "`.`" apostrophe-expression
  140                        | syntax-expression . INTEGER_INDEX
  142                        | syntax-expression . "`+`" syntax-expression
  143                        | syntax-expression . "`==`" syntax-expression
  143                        | syntax-expression "`==`" syntax-expression .
  144                        | syntax-expression . "`!=`" syntax-expression
  161 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 93
    "`.`"          shift, and go to state 98
    "`+`"          shift, and go to state 99

    $default  reduce using rule 143 (syntax-expression-wo-ii)


State 156

  138 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  139                        | syntax-expression . "`.`" apostrophe-expression
  140                        | syntax-expression . INTEGER_INDEX
  142                        | syntax-expression . "`+`" syntax-expression
  143                        | syntax-expression . "`==`" syntax-expression
  144                        | syntax-expression . "`!=`" syntax-expression
  144                        | syntax-expression "`!=`" syntax-expression .
  161 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 93
    "`.`"          shift, and go to state 98
    "`+`"          shift, and go to state 99

    $default  reduce using rule 144 (syntax-expression-wo-ii)


State 157

  138 syntax-expression-wo-ii: syntax-expression "`.`" identifier .

    $default  reduce using rule 138 (syntax-expression-wo-ii)


State 158

  139 syntax-expression-wo-ii: syntax-expression "`.`" apostrophe-expression .

    $default  reduce using rule 139 (syntax-expression-wo-ii)


State 159

  138 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  139                        | syntax-expression . "`.`" apostrophe-expression
  140                        | syntax-expression . INTEGER_INDEX
  142                        | syntax-expression . "`+`" syntax-expression
  142                        | syntax-expression "`+`" syntax-expression .
  143                        | syntax-expression . "`==`" syntax-expression
  144                        | syntax-expression . "`!=`" syntax-expression
  161 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 93
    "`.`"          shift, and go to state 98

    $default  reduce using rule 142 (syntax-expression-wo-ii)


State 160

  156 call-expression: apostrophe-expression "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 217


State 161

  155 call-expression: call-expression "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 218


State 162

  157 call-expression: lambda-expression "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 219


State 163

   73 argument-list: argument-list "," argument .

    $default  reduce using rule 73 (argument-list)


State 164

   10 statement: EXTERN VAR identifier "`:`" . type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 125
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 126
    "`[`"                shift, and go to state 127
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24

    identifier             go to state 38
    qname                  go to state 128
    fn-start-decl          go to state 49
    apostrophe-expression  go to state 129
    call-expression        go to state 130
    lambda-expression      go to state 131
    type-expr              go to state 220


State 165

  152 new-expression: "`new`" qname "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 221


State 166

  153 new-expression: "`new`" apostrophe-expression "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 222


State 167

   48 infunction-statement: "`continue`" .

    $default  reduce using rule 48 (infunction-statement)


State 168

   47 infunction-statement: "`break`" .

    $default  reduce using rule 47 (infunction-statement)


State 169

   37 finished_statement: STRUCT . qname braced-statements
   38                   | STRUCT . qname "`(`" parameter-list-opt "`)`" braced-statements

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 10

    identifier  go to state 38
    qname       go to state 223


State 170

   29 finished-infunction-statement-any: infunction-statement-any . "`;`"
   39 infunction-statement-set: infunction-statement-any .

    "`;`"  shift, and go to state 224

    $default  reduce using rule 39 (infunction-statement-set)


State 171

   25 infunction-statement-any: finished-infunction-statement-any . infunction-statement
   27 finished-infunction-statement-any: finished-infunction-statement-any . "`;`"
   28                                  | finished-infunction-statement-any . finished_statement
   40 infunction-statement-set: finished-infunction-statement-any .

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`;`"                shift, and go to state 225
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    LET                  shift, and go to state 14
    "`new`"              shift, and go to state 16
    "`while`"            shift, and go to state 17
    "`for`"              shift, and go to state 18
    "`if`"               shift, and go to state 19
    "`continue`"         shift, and go to state 167
    "`break`"            shift, and go to state 168
    "`return`"           shift, and go to state 20
    USING                shift, and go to state 21
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    STRUCT               shift, and go to state 169
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    $default  reduce using rule 40 (infunction-statement-set)

    let-decl                      go to state 33
    let-decl-start                go to state 34
    let-decl-start-with-opt-type  go to state 35
    finished_statement            go to state 226
    generic-statement             go to state 174
    infunction-statement          go to state 227
    identifier                    go to state 38
    qname                         go to state 39
    fn-start-decl                 go to state 176
    syntax-expression             go to state 42
    syntax-expression-wo-ii       go to state 43
    apostrophe-expression         go to state 44
    new-expression                go to state 45
    call-expression               go to state 46
    lambda-expression             go to state 47
    compound-expression           go to state 48


State 172

   26 finished-infunction-statement-any: finished_statement .

    $default  reduce using rule 26 (finished-infunction-statement-any)


State 173

   30 braced-statements: "`{`" infunction-statement-set . "`}`"

    "`}`"  shift, and go to state 228


State 174

   46 infunction-statement: generic-statement .

    $default  reduce using rule 46 (infunction-statement)


State 175

   24 infunction-statement-any: infunction-statement .

    $default  reduce using rule 24 (infunction-statement-any)


State 176

   36 finished_statement: fn-start-decl . fn-decl braced-statements
  158 lambda-expression: fn-start-decl . "`(`" parameter-list-opt "`)`" braced-statements
  159                  | fn-start-decl . "`(`" parameter-list-opt "`)`" "`->`" type-expr braced-statements

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 10
    "`(`"       shift, and go to state 88
    "`new`"     shift, and go to state 89

    identifier  go to state 38
    qname       go to state 90
    fn-name     go to state 91
    fn-decl     go to state 229


State 177

   32 finished_statement: "`while`" syntax-expression "`;`" syntax-expression . braced-statements
  138 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  139                        | syntax-expression . "`.`" apostrophe-expression
  140                        | syntax-expression . INTEGER_INDEX
  142                        | syntax-expression . "`+`" syntax-expression
  143                        | syntax-expression . "`==`" syntax-expression
  144                        | syntax-expression . "`!=`" syntax-expression
  161 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 93
    "`==`"         shift, and go to state 95
    "`!=`"         shift, and go to state 96
    "`...`"        shift, and go to state 97
    "`{`"          shift, and go to state 114
    "`.`"          shift, and go to state 98
    "`+`"          shift, and go to state 99

    braced-statements  go to state 230


State 178

   33 finished_statement: "`for`" syntax-expression "`in`" syntax-expression . braced-statements
  138 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  139                        | syntax-expression . "`.`" apostrophe-expression
  140                        | syntax-expression . INTEGER_INDEX
  142                        | syntax-expression . "`+`" syntax-expression
  143                        | syntax-expression . "`==`" syntax-expression
  144                        | syntax-expression . "`!=`" syntax-expression
  161 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 93
    "`==`"         shift, and go to state 95
    "`!=`"         shift, and go to state 96
    "`...`"        shift, and go to state 97
    "`{`"          shift, and go to state 114
    "`.`"          shift, and go to state 98
    "`+`"          shift, and go to state 99

    braced-statements  go to state 231


State 179

   35 finished_statement: "`if`" syntax-expression braced-statements "`else`" . braced-statements

    "`{`"  shift, and go to state 114

    braced-statements  go to state 232


State 180

   68 using-decl: qname "`=>`" syntax-expression .
  138 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  139                        | syntax-expression . "`.`" apostrophe-expression
  140                        | syntax-expression . INTEGER_INDEX
  142                        | syntax-expression . "`+`" syntax-expression
  143                        | syntax-expression . "`==`" syntax-expression
  144                        | syntax-expression . "`!=`" syntax-expression
  161 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 93
    "`==`"         shift, and go to state 95
    "`!=`"         shift, and go to state 96
    "`...`"        shift, and go to state 97
    "`.`"          shift, and go to state 98
    "`+`"          shift, and go to state 99

    $default  reduce using rule 68 (using-decl)


State 181

   69 using-decl: qname "`(`" parameter-list-opt . "`)`" "`=>`" syntax-expression

    "`)`"  shift, and go to state 233


State 182

   65 case-decl: identifier .

    $default  reduce using rule 65 (case-decl)


State 183

   60 enum-decl: ENUM qname "`{`" case-list-opt . "`}`"

    "`}`"  shift, and go to state 234


State 184

   62 case-list-opt: case-list .
   64 case-list: case-list . "," case-decl

    ","  shift, and go to state 235

    $default  reduce using rule 62 (case-list-opt)


State 185

   63 case-list: case-decl .

    $default  reduce using rule 63 (case-list)


State 186

   66 struct-decl: qname "`=>`" "`(`" . field-list-opt "`)`"

    IDENTIFIER  shift, and go to state 2

    $default  reduce using rule 78 (field-list-opt)

    identifier      go to state 236
    field-list-opt  go to state 237
    field-list      go to state 238
    field           go to state 239


State 187

   38 finished_statement: STRUCT qname "`(`" parameter-list-opt . "`)`" braced-statements
   67 struct-decl: qname "`(`" parameter-list-opt . "`)`" "`=>`" "`(`" field-list-opt "`)`"

    "`)`"  shift, and go to state 240


State 188

  166 type-expr: "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 241


State 189

  165 type-expr: "`[`" type-expr . "`]`"
  167          | type-expr . "`[`" INTEGER "`]`"
  168          | type-expr . "`|`" type-expr
  169          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 190
    "`[`"   shift, and go to state 191
    "`]`"   shift, and go to state 242
    "`|`"   shift, and go to state 192


State 190

  169 type-expr: type-expr "`->`" . type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 125
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 126
    "`[`"                shift, and go to state 127
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24

    identifier             go to state 38
    qname                  go to state 128
    fn-start-decl          go to state 49
    apostrophe-expression  go to state 129
    call-expression        go to state 130
    lambda-expression      go to state 131
    type-expr              go to state 243


State 191

  167 type-expr: type-expr "`[`" . INTEGER "`]`"

    INTEGER  shift, and go to state 244


State 192

  168 type-expr: type-expr "`|`" . type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 125
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 126
    "`[`"                shift, and go to state 127
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24

    identifier             go to state 38
    qname                  go to state 128
    fn-start-decl          go to state 49
    apostrophe-expression  go to state 129
    call-expression        go to state 130
    lambda-expression      go to state 131
    type-expr              go to state 245


State 193

  154 call-expression: qname "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 154 (call-expression)


State 194

  103 parameter-decl: INTERNAL_IDENTIFIER "`=>`" . parameter-value-constraint-set

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`@`"                shift, and go to state 138
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    identifier                      go to state 38
    qname                           go to state 39
    fn-start-decl                   go to state 49
    parameter-value-constraint-set  go to state 246
    parameter-matched-value         go to state 199
    concept-expression              go to state 200
    syntax-expression               go to state 201
    syntax-expression-wo-ii         go to state 43
    apostrophe-expression           go to state 44
    new-expression                  go to state 45
    call-expression                 go to state 46
    lambda-expression               go to state 47
    compound-expression             go to state 51


State 195

  104 parameter-decl: INTERNAL_IDENTIFIER "`...`" . "`:`" parameter-constraint-set
  105               | INTERNAL_IDENTIFIER "`...`" . "`:`" "const modifier" parameter-constraint-set
  119 parameter-matched-type: INTERNAL_IDENTIFIER "`...`" .

    "`:`"  shift, and go to state 247

    $default  reduce using rule 119 (parameter-matched-type)


State 196

  101 parameter-decl: INTERNAL_IDENTIFIER "`:`" . parameter-constraint-set parameter-default-value-opt
  102               | INTERNAL_IDENTIFIER "`:`" . "const modifier" parameter-constraint-set parameter-default-value-opt

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 202
    "`@`"                shift, and go to state 138
    "`_`"                shift, and go to state 139
    "`::`"               shift, and go to state 10
    "const modifier"     shift, and go to state 248

    identifier                    go to state 38
    qname                         go to state 143
    parameter-constraint-set      go to state 249
    parameter-matched-type        go to state 148
    basic-parameter-matched-type  go to state 149
    concept-expression            go to state 150


State 197

   53 qname: qname . "`::`" identifier
  124 concept-expression: "`@`" qname .

    "`::`"  shift, and go to state 86

    $default  reduce using rule 124 (concept-expression)


State 198

  108 parameter-decl: "`=>`" parameter-value-constraint-set .
  114 parameter-value-constraint-set: parameter-value-constraint-set . concept-expression

    "`@`"  shift, and go to state 138

    $default  reduce using rule 108 (parameter-decl)

    concept-expression  go to state 250


State 199

  112 parameter-value-constraint-set: parameter-matched-value .

    $default  reduce using rule 112 (parameter-value-constraint-set)


State 200

  113 parameter-value-constraint-set: concept-expression .

    $default  reduce using rule 113 (parameter-value-constraint-set)


State 201

  115 parameter-matched-value: syntax-expression .
  138 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  139                        | syntax-expression . "`.`" apostrophe-expression
  140                        | syntax-expression . INTEGER_INDEX
  142                        | syntax-expression . "`+`" syntax-expression
  143                        | syntax-expression . "`==`" syntax-expression
  144                        | syntax-expression . "`!=`" syntax-expression
  161 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 93
    "`==`"         shift, and go to state 95
    "`!=`"         shift, and go to state 96
    "`...`"        shift, and go to state 97
    "`.`"          shift, and go to state 98
    "`+`"          shift, and go to state 99

    $default  reduce using rule 115 (parameter-matched-value)


State 202

  118 parameter-matched-type: INTERNAL_IDENTIFIER .
  119                       | INTERNAL_IDENTIFIER . "`...`"

    "`...`"  shift, and go to state 251

    $default  reduce using rule 118 (parameter-matched-type)


State 203

  107 parameter-decl: "const modifier" parameter-constraint-set . parameter-default-value-opt
  111 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`=`"  shift, and go to state 210
    "`@`"  shift, and go to state 138

    $default  reduce using rule 96 (parameter-default-value-opt)

    parameter-default-value-opt  go to state 252
    concept-expression           go to state 212


State 204

   50 internal-identifier: INTERNAL_IDENTIFIER .

    $default  reduce using rule 50 (internal-identifier)


State 205

   95 internal-identifier-opt: internal-identifier .

    $default  reduce using rule 95 (internal-identifier-opt)


State 206

   98 parameter-decl: identifier internal-identifier-opt . "`:`" parameter-constraint-set parameter-default-value-opt
   99               | identifier internal-identifier-opt . "`:`" "const modifier" parameter-constraint-set parameter-default-value-opt
  100               | identifier internal-identifier-opt . "`=>`" parameter-value-constraint-set

    "`=>`"  shift, and go to state 253
    "`:`"   shift, and go to state 254


State 207

  122 basic-parameter-matched-type: qname "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    $default  reduce using rule 70 (argument-list-opt)

    identifier               go to state 53
    qname                    go to state 39
    fn-start-decl            go to state 49
    argument-list-opt        go to state 255
    argument-list            go to state 136
    argument                 go to state 55
    argument-name            go to state 56
    syntax-expression        go to state 57
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 208

  158 lambda-expression: fn-start-decl "`(`" parameter-list-opt "`)`" . braced-statements
  159                  | fn-start-decl "`(`" parameter-list-opt "`)`" . "`->`" type-expr braced-statements

    "`->`"  shift, and go to state 256
    "`{`"   shift, and go to state 114

    braced-statements  go to state 257


State 209

   93 parameter-list: parameter-list "," . parameter-decl

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 137
    "`@`"                shift, and go to state 138
    "`_`"                shift, and go to state 139
    "`=>`"               shift, and go to state 140
    "`::`"               shift, and go to state 10
    "const modifier"     shift, and go to state 141

    identifier                    go to state 142
    qname                         go to state 143
    parameter-decl                go to state 258
    parameter-constraint-set      go to state 147
    parameter-matched-type        go to state 148
    basic-parameter-matched-type  go to state 149
    concept-expression            go to state 150


State 210

   97 parameter-default-value-opt: "`=`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    identifier               go to state 38
    qname                    go to state 39
    fn-start-decl            go to state 49
    syntax-expression        go to state 259
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 211

  106 parameter-decl: parameter-constraint-set parameter-default-value-opt .

    $default  reduce using rule 106 (parameter-decl)


State 212

  111 parameter-constraint-set: parameter-constraint-set concept-expression .

    $default  reduce using rule 111 (parameter-constraint-set)


State 213

  117 parameter-matched-type: basic-parameter-matched-type "`...`" .

    $default  reduce using rule 117 (parameter-matched-type)


State 214

  123 basic-parameter-matched-type: basic-parameter-matched-type "`|`" . basic-parameter-matched-type

    IDENTIFIER  shift, and go to state 2
    "`_`"       shift, and go to state 139
    "`::`"      shift, and go to state 10

    identifier                    go to state 38
    qname                         go to state 143
    basic-parameter-matched-type  go to state 260


State 215

   58 fn-decl: fn-name "`(`" parameter-list-opt . "`)`"
   59        | fn-name "`(`" parameter-list-opt . "`)`" "`->`" type-expr

    "`)`"  shift, and go to state 261


State 216

   14 statement: fn-start-decl fn-decl "`=>`" syntax-expression .
  138 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  139                        | syntax-expression . "`.`" apostrophe-expression
  140                        | syntax-expression . INTEGER_INDEX
  142                        | syntax-expression . "`+`" syntax-expression
  143                        | syntax-expression . "`==`" syntax-expression
  144                        | syntax-expression . "`!=`" syntax-expression
  161 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 93
    "`==`"         shift, and go to state 95
    "`!=`"         shift, and go to state 96
    "`...`"        shift, and go to state 97
    "`.`"          shift, and go to state 98
    "`+`"          shift, and go to state 99

    $default  reduce using rule 14 (statement)


State 217

  156 call-expression: apostrophe-expression "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 156 (call-expression)


State 218

  155 call-expression: call-expression "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 155 (call-expression)


State 219

  157 call-expression: lambda-expression "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 157 (call-expression)


State 220

   10 statement: EXTERN VAR identifier "`:`" type-expr .
  167 type-expr: type-expr . "`[`" INTEGER "`]`"
  168          | type-expr . "`|`" type-expr
  169          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 190
    "`[`"   shift, and go to state 191
    "`|`"   shift, and go to state 192

    $default  reduce using rule 10 (statement)


State 221

  152 new-expression: "`new`" qname "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 152 (new-expression)


State 222

  153 new-expression: "`new`" apostrophe-expression "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 153 (new-expression)


State 223

   37 finished_statement: STRUCT qname . braced-statements
   38                   | STRUCT qname . "`(`" parameter-list-opt "`)`" braced-statements
   53 qname: qname . "`::`" identifier

    "`::`"  shift, and go to state 86
    "`(`"   shift, and go to state 262
    "`{`"   shift, and go to state 114

    braced-statements  go to state 124


State 224

   29 finished-infunction-statement-any: infunction-statement-any "`;`" .

    $default  reduce using rule 29 (finished-infunction-statement-any)


State 225

   27 finished-infunction-statement-any: finished-infunction-statement-any "`;`" .

    $default  reduce using rule 27 (finished-infunction-statement-any)


State 226

   28 finished-infunction-statement-any: finished-infunction-statement-any finished_statement .

    $default  reduce using rule 28 (finished-infunction-statement-any)


State 227

   25 infunction-statement-any: finished-infunction-statement-any infunction-statement .

    $default  reduce using rule 25 (infunction-statement-any)


State 228

   30 braced-statements: "`{`" infunction-statement-set "`}`" .

    $default  reduce using rule 30 (braced-statements)


State 229

   36 finished_statement: fn-start-decl fn-decl . braced-statements

    "`{`"  shift, and go to state 114

    braced-statements  go to state 153


State 230

   32 finished_statement: "`while`" syntax-expression "`;`" syntax-expression braced-statements .

    $default  reduce using rule 32 (finished_statement)


State 231

   33 finished_statement: "`for`" syntax-expression "`in`" syntax-expression braced-statements .

    $default  reduce using rule 33 (finished_statement)


State 232

   35 finished_statement: "`if`" syntax-expression braced-statements "`else`" braced-statements .

    $default  reduce using rule 35 (finished_statement)


State 233

   69 using-decl: qname "`(`" parameter-list-opt "`)`" . "`=>`" syntax-expression

    "`=>`"  shift, and go to state 263


State 234

   60 enum-decl: ENUM qname "`{`" case-list-opt "`}`" .

    $default  reduce using rule 60 (enum-decl)


State 235

   64 case-list: case-list "," . case-decl

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 182
    case-decl   go to state 264


State 236

   84 field: identifier . "`:`" field-type-expr field-default-value-opt
   85      | identifier . "`=>`" field-type-expr field-default-value-opt

    "`=>`"  shift, and go to state 265
    "`:`"   shift, and go to state 266


State 237

   66 struct-decl: qname "`=>`" "`(`" field-list-opt . "`)`"

    "`)`"  shift, and go to state 267


State 238

   79 field-list-opt: field-list .
   81 field-list: field-list . "," field

    ","  shift, and go to state 268

    $default  reduce using rule 79 (field-list-opt)


State 239

   80 field-list: field .

    $default  reduce using rule 80 (field-list)


State 240

   38 finished_statement: STRUCT qname "`(`" parameter-list-opt "`)`" . braced-statements
   67 struct-decl: qname "`(`" parameter-list-opt "`)`" . "`=>`" "`(`" field-list-opt "`)`"

    "`=>`"  shift, and go to state 269
    "`{`"   shift, and go to state 114

    braced-statements  go to state 270


State 241

  166 type-expr: "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 166 (type-expr)


State 242

  165 type-expr: "`[`" type-expr "`]`" .

    $default  reduce using rule 165 (type-expr)


State 243

  167 type-expr: type-expr . "`[`" INTEGER "`]`"
  168          | type-expr . "`|`" type-expr
  169          | type-expr . "`->`" type-expr
  169          | type-expr "`->`" type-expr .

    $default  reduce using rule 169 (type-expr)


State 244

  167 type-expr: type-expr "`[`" INTEGER . "`]`"

    "`]`"  shift, and go to state 271


State 245

  167 type-expr: type-expr . "`[`" INTEGER "`]`"
  168          | type-expr . "`|`" type-expr
  168          | type-expr "`|`" type-expr .
  169          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 190
    "`[`"   shift, and go to state 191

    $default  reduce using rule 168 (type-expr)


State 246

  103 parameter-decl: INTERNAL_IDENTIFIER "`=>`" parameter-value-constraint-set .
  114 parameter-value-constraint-set: parameter-value-constraint-set . concept-expression

    "`@`"  shift, and go to state 138

    $default  reduce using rule 103 (parameter-decl)

    concept-expression  go to state 250


State 247

  104 parameter-decl: INTERNAL_IDENTIFIER "`...`" "`:`" . parameter-constraint-set
  105               | INTERNAL_IDENTIFIER "`...`" "`:`" . "const modifier" parameter-constraint-set

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 202
    "`@`"                shift, and go to state 138
    "`_`"                shift, and go to state 139
    "`::`"               shift, and go to state 10
    "const modifier"     shift, and go to state 272

    identifier                    go to state 38
    qname                         go to state 143
    parameter-constraint-set      go to state 273
    parameter-matched-type        go to state 148
    basic-parameter-matched-type  go to state 149
    concept-expression            go to state 150


State 248

  102 parameter-decl: INTERNAL_IDENTIFIER "`:`" "const modifier" . parameter-constraint-set parameter-default-value-opt

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 202
    "`@`"                shift, and go to state 138
    "`_`"                shift, and go to state 139
    "`::`"               shift, and go to state 10

    identifier                    go to state 38
    qname                         go to state 143
    parameter-constraint-set      go to state 274
    parameter-matched-type        go to state 148
    basic-parameter-matched-type  go to state 149
    concept-expression            go to state 150


State 249

  101 parameter-decl: INTERNAL_IDENTIFIER "`:`" parameter-constraint-set . parameter-default-value-opt
  111 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`=`"  shift, and go to state 210
    "`@`"  shift, and go to state 138

    $default  reduce using rule 96 (parameter-default-value-opt)

    parameter-default-value-opt  go to state 275
    concept-expression           go to state 212


State 250

  114 parameter-value-constraint-set: parameter-value-constraint-set concept-expression .

    $default  reduce using rule 114 (parameter-value-constraint-set)


State 251

  119 parameter-matched-type: INTERNAL_IDENTIFIER "`...`" .

    $default  reduce using rule 119 (parameter-matched-type)


State 252

  107 parameter-decl: "const modifier" parameter-constraint-set parameter-default-value-opt .

    $default  reduce using rule 107 (parameter-decl)


State 253

  100 parameter-decl: identifier internal-identifier-opt "`=>`" . parameter-value-constraint-set

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`@`"                shift, and go to state 138
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    identifier                      go to state 38
    qname                           go to state 39
    fn-start-decl                   go to state 49
    parameter-value-constraint-set  go to state 276
    parameter-matched-value         go to state 199
    concept-expression              go to state 200
    syntax-expression               go to state 201
    syntax-expression-wo-ii         go to state 43
    apostrophe-expression           go to state 44
    new-expression                  go to state 45
    call-expression                 go to state 46
    lambda-expression               go to state 47
    compound-expression             go to state 51


State 254

   98 parameter-decl: identifier internal-identifier-opt "`:`" . parameter-constraint-set parameter-default-value-opt
   99               | identifier internal-identifier-opt "`:`" . "const modifier" parameter-constraint-set parameter-default-value-opt

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 202
    "`@`"                shift, and go to state 138
    "`_`"                shift, and go to state 139
    "`::`"               shift, and go to state 10
    "const modifier"     shift, and go to state 277

    identifier                    go to state 38
    qname                         go to state 143
    parameter-constraint-set      go to state 278
    parameter-matched-type        go to state 148
    basic-parameter-matched-type  go to state 149
    concept-expression            go to state 150


State 255

  122 basic-parameter-matched-type: qname "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 279


State 256

  159 lambda-expression: fn-start-decl "`(`" parameter-list-opt "`)`" "`->`" . type-expr braced-statements

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 125
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 126
    "`[`"                shift, and go to state 127
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24

    identifier             go to state 38
    qname                  go to state 128
    fn-start-decl          go to state 49
    apostrophe-expression  go to state 129
    call-expression        go to state 130
    lambda-expression      go to state 131
    type-expr              go to state 280


State 257

  158 lambda-expression: fn-start-decl "`(`" parameter-list-opt "`)`" braced-statements .

    $default  reduce using rule 158 (lambda-expression)


State 258

   93 parameter-list: parameter-list "," parameter-decl .

    $default  reduce using rule 93 (parameter-list)


State 259

   97 parameter-default-value-opt: "`=`" syntax-expression .
  138 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  139                        | syntax-expression . "`.`" apostrophe-expression
  140                        | syntax-expression . INTEGER_INDEX
  142                        | syntax-expression . "`+`" syntax-expression
  143                        | syntax-expression . "`==`" syntax-expression
  144                        | syntax-expression . "`!=`" syntax-expression
  161 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 93
    "`==`"         shift, and go to state 95
    "`!=`"         shift, and go to state 96
    "`...`"        shift, and go to state 97
    "`.`"          shift, and go to state 98
    "`+`"          shift, and go to state 99

    $default  reduce using rule 97 (parameter-default-value-opt)


State 260

  123 basic-parameter-matched-type: basic-parameter-matched-type . "`|`" basic-parameter-matched-type
  123                             | basic-parameter-matched-type "`|`" basic-parameter-matched-type .

    $default  reduce using rule 123 (basic-parameter-matched-type)


State 261

   58 fn-decl: fn-name "`(`" parameter-list-opt "`)`" .
   59        | fn-name "`(`" parameter-list-opt "`)`" . "`->`" type-expr

    "`->`"  shift, and go to state 281

    $default  reduce using rule 58 (fn-decl)


State 262

   38 finished_statement: STRUCT qname "`(`" . parameter-list-opt "`)`" braced-statements

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 137
    "`@`"                shift, and go to state 138
    "`_`"                shift, and go to state 139
    "`=>`"               shift, and go to state 140
    "`::`"               shift, and go to state 10
    "const modifier"     shift, and go to state 141

    $default  reduce using rule 90 (parameter-list-opt)

    identifier                    go to state 142
    qname                         go to state 143
    parameter-list-opt            go to state 282
    parameter-list                go to state 145
    parameter-decl                go to state 146
    parameter-constraint-set      go to state 147
    parameter-matched-type        go to state 148
    basic-parameter-matched-type  go to state 149
    concept-expression            go to state 150


State 263

   69 using-decl: qname "`(`" parameter-list-opt "`)`" "`=>`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    identifier               go to state 38
    qname                    go to state 39
    fn-start-decl            go to state 49
    syntax-expression        go to state 283
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 264

   64 case-list: case-list "," case-decl .

    $default  reduce using rule 64 (case-list)


State 265

   85 field: identifier "`=>`" . field-type-expr field-default-value-opt

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 284
    "`::`"               shift, and go to state 10

    identifier       go to state 38
    qname            go to state 285
    field-type-expr  go to state 286


State 266

   84 field: identifier "`:`" . field-type-expr field-default-value-opt

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 284
    "`::`"               shift, and go to state 10

    identifier       go to state 38
    qname            go to state 285
    field-type-expr  go to state 287


State 267

   66 struct-decl: qname "`=>`" "`(`" field-list-opt "`)`" .

    $default  reduce using rule 66 (struct-decl)


State 268

   81 field-list: field-list "," . field

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 236
    field       go to state 288


State 269

   67 struct-decl: qname "`(`" parameter-list-opt "`)`" "`=>`" . "`(`" field-list-opt "`)`"

    "`(`"  shift, and go to state 289


State 270

   38 finished_statement: STRUCT qname "`(`" parameter-list-opt "`)`" braced-statements .

    $default  reduce using rule 38 (finished_statement)


State 271

  167 type-expr: type-expr "`[`" INTEGER "`]`" .

    $default  reduce using rule 167 (type-expr)


State 272

  105 parameter-decl: INTERNAL_IDENTIFIER "`...`" "`:`" "const modifier" . parameter-constraint-set

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 202
    "`@`"                shift, and go to state 138
    "`_`"                shift, and go to state 139
    "`::`"               shift, and go to state 10

    identifier                    go to state 38
    qname                         go to state 143
    parameter-constraint-set      go to state 290
    parameter-matched-type        go to state 148
    basic-parameter-matched-type  go to state 149
    concept-expression            go to state 150


State 273

  104 parameter-decl: INTERNAL_IDENTIFIER "`...`" "`:`" parameter-constraint-set .
  111 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`@`"  shift, and go to state 138

    $default  reduce using rule 104 (parameter-decl)

    concept-expression  go to state 212


State 274

  102 parameter-decl: INTERNAL_IDENTIFIER "`:`" "const modifier" parameter-constraint-set . parameter-default-value-opt
  111 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`=`"  shift, and go to state 210
    "`@`"  shift, and go to state 138

    $default  reduce using rule 96 (parameter-default-value-opt)

    parameter-default-value-opt  go to state 291
    concept-expression           go to state 212


State 275

  101 parameter-decl: INTERNAL_IDENTIFIER "`:`" parameter-constraint-set parameter-default-value-opt .

    $default  reduce using rule 101 (parameter-decl)


State 276

  100 parameter-decl: identifier internal-identifier-opt "`=>`" parameter-value-constraint-set .
  114 parameter-value-constraint-set: parameter-value-constraint-set . concept-expression

    "`@`"  shift, and go to state 138

    $default  reduce using rule 100 (parameter-decl)

    concept-expression  go to state 250


State 277

   99 parameter-decl: identifier internal-identifier-opt "`:`" "const modifier" . parameter-constraint-set parameter-default-value-opt

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 202
    "`@`"                shift, and go to state 138
    "`_`"                shift, and go to state 139
    "`::`"               shift, and go to state 10

    identifier                    go to state 38
    qname                         go to state 143
    parameter-constraint-set      go to state 292
    parameter-matched-type        go to state 148
    basic-parameter-matched-type  go to state 149
    concept-expression            go to state 150


State 278

   98 parameter-decl: identifier internal-identifier-opt "`:`" parameter-constraint-set . parameter-default-value-opt
  111 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`=`"  shift, and go to state 210
    "`@`"  shift, and go to state 138

    $default  reduce using rule 96 (parameter-default-value-opt)

    parameter-default-value-opt  go to state 293
    concept-expression           go to state 212


State 279

  122 basic-parameter-matched-type: qname "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 122 (basic-parameter-matched-type)


State 280

  159 lambda-expression: fn-start-decl "`(`" parameter-list-opt "`)`" "`->`" type-expr . braced-statements
  167 type-expr: type-expr . "`[`" INTEGER "`]`"
  168          | type-expr . "`|`" type-expr
  169          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 190
    "`{`"   shift, and go to state 114
    "`[`"   shift, and go to state 191
    "`|`"   shift, and go to state 192

    braced-statements  go to state 294


State 281

   59 fn-decl: fn-name "`(`" parameter-list-opt "`)`" "`->`" . type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 125
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 126
    "`[`"                shift, and go to state 127
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24

    identifier             go to state 38
    qname                  go to state 128
    fn-start-decl          go to state 49
    apostrophe-expression  go to state 129
    call-expression        go to state 130
    lambda-expression      go to state 131
    type-expr              go to state 295


State 282

   38 finished_statement: STRUCT qname "`(`" parameter-list-opt . "`)`" braced-statements

    "`)`"  shift, and go to state 296


State 283

   69 using-decl: qname "`(`" parameter-list-opt "`)`" "`=>`" syntax-expression .
  138 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  139                        | syntax-expression . "`.`" apostrophe-expression
  140                        | syntax-expression . INTEGER_INDEX
  142                        | syntax-expression . "`+`" syntax-expression
  143                        | syntax-expression . "`==`" syntax-expression
  144                        | syntax-expression . "`!=`" syntax-expression
  161 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 93
    "`==`"         shift, and go to state 95
    "`!=`"         shift, and go to state 96
    "`...`"        shift, and go to state 97
    "`.`"          shift, and go to state 98
    "`+`"          shift, and go to state 99

    $default  reduce using rule 69 (using-decl)


State 284

   88 field-type-expr: INTERNAL_IDENTIFIER .

    $default  reduce using rule 88 (field-type-expr)


State 285

   53 qname: qname . "`::`" identifier
   86 field-type-expr: qname .
   87                | qname . "`(`" argument-list-opt "`)`"

    "`::`"  shift, and go to state 86
    "`(`"   shift, and go to state 297

    $default  reduce using rule 86 (field-type-expr)


State 286

   85 field: identifier "`=>`" field-type-expr . field-default-value-opt
   89 field-type-expr: field-type-expr . "`|`" field-type-expr

    "`=`"  shift, and go to state 298
    "`|`"  shift, and go to state 299

    $default  reduce using rule 82 (field-default-value-opt)

    field-default-value-opt  go to state 300


State 287

   84 field: identifier "`:`" field-type-expr . field-default-value-opt
   89 field-type-expr: field-type-expr . "`|`" field-type-expr

    "`=`"  shift, and go to state 298
    "`|`"  shift, and go to state 299

    $default  reduce using rule 82 (field-default-value-opt)

    field-default-value-opt  go to state 301


State 288

   81 field-list: field-list "," field .

    $default  reduce using rule 81 (field-list)


State 289

   67 struct-decl: qname "`(`" parameter-list-opt "`)`" "`=>`" "`(`" . field-list-opt "`)`"

    IDENTIFIER  shift, and go to state 2

    $default  reduce using rule 78 (field-list-opt)

    identifier      go to state 236
    field-list-opt  go to state 302
    field-list      go to state 238
    field           go to state 239


State 290

  105 parameter-decl: INTERNAL_IDENTIFIER "`...`" "`:`" "const modifier" parameter-constraint-set .
  111 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`@`"  shift, and go to state 138

    $default  reduce using rule 105 (parameter-decl)

    concept-expression  go to state 212


State 291

  102 parameter-decl: INTERNAL_IDENTIFIER "`:`" "const modifier" parameter-constraint-set parameter-default-value-opt .

    $default  reduce using rule 102 (parameter-decl)


State 292

   99 parameter-decl: identifier internal-identifier-opt "`:`" "const modifier" parameter-constraint-set . parameter-default-value-opt
  111 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`=`"  shift, and go to state 210
    "`@`"  shift, and go to state 138

    $default  reduce using rule 96 (parameter-default-value-opt)

    parameter-default-value-opt  go to state 303
    concept-expression           go to state 212


State 293

   98 parameter-decl: identifier internal-identifier-opt "`:`" parameter-constraint-set parameter-default-value-opt .

    $default  reduce using rule 98 (parameter-decl)


State 294

  159 lambda-expression: fn-start-decl "`(`" parameter-list-opt "`)`" "`->`" type-expr braced-statements .

    $default  reduce using rule 159 (lambda-expression)


State 295

   59 fn-decl: fn-name "`(`" parameter-list-opt "`)`" "`->`" type-expr .
  167 type-expr: type-expr . "`[`" INTEGER "`]`"
  168          | type-expr . "`|`" type-expr
  169          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 190
    "`[`"   shift, and go to state 191
    "`|`"   shift, and go to state 192

    $default  reduce using rule 59 (fn-decl)


State 296

   38 finished_statement: STRUCT qname "`(`" parameter-list-opt "`)`" . braced-statements

    "`{`"  shift, and go to state 114

    braced-statements  go to state 270


State 297

   87 field-type-expr: qname "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    $default  reduce using rule 70 (argument-list-opt)

    identifier               go to state 53
    qname                    go to state 39
    fn-start-decl            go to state 49
    argument-list-opt        go to state 304
    argument-list            go to state 136
    argument                 go to state 55
    argument-name            go to state 56
    syntax-expression        go to state 57
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 298

   83 field-default-value-opt: "`=`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "true"               shift, and go to state 27
    "false"              shift, and go to state 28

    identifier               go to state 38
    qname                    go to state 39
    fn-start-decl            go to state 49
    syntax-expression        go to state 305
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 299

   89 field-type-expr: field-type-expr "`|`" . field-type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 284
    "`::`"               shift, and go to state 10

    identifier       go to state 38
    qname            go to state 285
    field-type-expr  go to state 306


State 300

   85 field: identifier "`=>`" field-type-expr field-default-value-opt .

    $default  reduce using rule 85 (field)


State 301

   84 field: identifier "`:`" field-type-expr field-default-value-opt .

    $default  reduce using rule 84 (field)


State 302

   67 struct-decl: qname "`(`" parameter-list-opt "`)`" "`=>`" "`(`" field-list-opt . "`)`"

    "`)`"  shift, and go to state 307


State 303

   99 parameter-decl: identifier internal-identifier-opt "`:`" "const modifier" parameter-constraint-set parameter-default-value-opt .

    $default  reduce using rule 99 (parameter-decl)


State 304

   87 field-type-expr: qname "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 308


State 305

   83 field-default-value-opt: "`=`" syntax-expression .
  138 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  139                        | syntax-expression . "`.`" apostrophe-expression
  140                        | syntax-expression . INTEGER_INDEX
  142                        | syntax-expression . "`+`" syntax-expression
  143                        | syntax-expression . "`==`" syntax-expression
  144                        | syntax-expression . "`!=`" syntax-expression
  161 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 93
    "`==`"         shift, and go to state 95
    "`!=`"         shift, and go to state 96
    "`...`"        shift, and go to state 97
    "`.`"          shift, and go to state 98
    "`+`"          shift, and go to state 99

    $default  reduce using rule 83 (field-default-value-opt)


State 306

   89 field-type-expr: field-type-expr . "`|`" field-type-expr
   89                | field-type-expr "`|`" field-type-expr .

    $default  reduce using rule 89 (field-type-expr)


State 307

   67 struct-decl: qname "`(`" parameter-list-opt "`)`" "`=>`" "`(`" field-list-opt "`)`" .

    $default  reduce using rule 67 (struct-decl)


State 308

   87 field-type-expr: qname "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 87 (field-type-expr)
