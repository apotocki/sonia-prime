inline fn assert_equal(_, _ /*, location: #call_location*/) {
    if $0 != $1 {
        error("Assertion failed: " ..to_string($0) .. " != " ..to_string($1));
    }
}
let xpack0 = (1, name: "assa", mut("345"), name: "bassa", name: mut(123), mut(22));
//__print(to_string(mut(size(xpack0.name))), 1);
assert_equal(size(xpack0.name), 3);
assert_equal(xpack0.name[0], "assa");
assert_equal(xpack0.name[1], "bassa");
assert_equal(xpack0.name[2], 123);
/*
// Test: tuples with all const fields
let t1 = (a: 1, b : 2);
let t2 = (a: 1, b : 2);
assert(t1 == t2); // # should be true

// Test: tuples with mixed const/non-const fields
let x = mut(42);
let t3 = (a: x, b : 2);
let t4 = (a: x, b : 2);
assert(t3 == t4); // should be true

// Test: tuples with different field names
let t5 = (a: 1, b : 2);
let t6 = (a: 1, c : 2);
assert(!(t5 == t6)); // should be false

// Test: tuples with mismatched field counts
let t7 = (a: 1, b : 2);
let t8 = (a: 1);
assert(t7 != t8); // should be false

// Test: tuples with different values
let t9 = (a: 1, b : 2);
let t10 = (a: 1, b : 3);
assert(!(t9 == t10)); // should be false


let xpack0 = (1, name: "assa", mut("345"), name: "bassa", name: mut(123), mut(22));

assert((1, name: "assa", "345", name: "bassa", name : 123, 22) == xpack0);
assert(xpack0 == (1, name: "assa", "345", name: "bassa", name: 123, 22));
assert(xpack0 == (1, name: "assa", mut("345"), name: "bassa", name: mut(123), 22));
assert(size(xpack0) == 6);

assert(xpack0.0 == 1);
assert(xpack0[0] == 1);
assert(head(xpack0) == 1);
assert(typeof(head(xpack0)) == ::integer);

assert(size(head(tail(xpack0))) == 2);
assert(head(tail(xpack0)).0 == .name);
assert(head(tail(xpack0))[0] == .name);
assert(head(head(tail(xpack0))) == .name);
assert(head(tail(xpack0)).1 == "assa");
assert(head(tail(xpack0))[1] == "assa");
assert(tail(head(tail(xpack0)))[0] == "assa");

assert(xpack0.1.0 == .name);
assert(xpack0.1.1 == "assa");
assert(xpack0[1].0 == .name);
assert(xpack0[1].1 == "assa");
assert(xpack0[1][0] == .name);
assert(xpack0[1][1] == "assa");

assert(xpack0.2 == "345");
assert(xpack0[2] == "345");
assert(typeof(head(tail(tail(xpack0)))) == string);
assert(head(tail(tail(xpack0))) == "345");

assert(size(head(tail(tail(tail(xpack0))))) == 2);
assert(head(tail(tail(tail(xpack0)))).0 == .name);
assert(head(tail(tail(tail(xpack0)))).1 == "bassa");
assert(xpack0[3] == (.name, "bassa"));

assert(size(head(tail(tail(tail(tail(xpack0)))))) == 2);
assert(head(tail(tail(tail(tail(xpack0))))).0 == .name);
assert(head(tail(tail(tail(tail(xpack0))))).1 == 123);
assert(xpack0[4] == (.name, mut(123)));
assert(xpack0[4] == (.name, 123));
*/

/*
assert(size(xpack0.name) == 3);
*/
//__print(to_string(typeof(head(tail(tail(tail(xpack0)))))), 1);
//__print(typeof(xpack0), 1);
//__print(to_string(typeof(tail(head(tail(xpack0))))), 1);
/*
assert(size(xpack0.name) == 3);
//assert(size(xpack0["name"]) == 3);
assert(size(xpack0[.name]) == 3);
assert(xpack0.name.0 == "assa");
assert(xpack0.name[0] == "assa");
assert(xpack0.name.1 == "bassa");
assert(xpack0.name[1] == "bassa");
assert(xpack0.name.2 == 123);
assert(xpack0.name[2] == 123);

//assert(head(tail(xpack0)).1 == "assa");
*/
//assert(head(tail(xpack0)) == (.name, "assa"));

//let xpack1 = (11, 222, xpack0..., name: "bussa");
//assert(size(xpack1) == 4);

/*
let xpack = 1, 2, name: mut("345"), 66, name: "678"; // typeof(xpack) = __identifier[4]
assert(size(xpack) == 3);

assert(xpack.0 == 1);
assert(xpack.1 == 2);
assert(xpack.2 == 66);
assert(size(xpack.name) == 2);
assert(*xpack.name.0 == "345");
assert(xpack.name.1 == "678");

let xpack2 = 3, name: "911", xpack..., name: "901", 4, name2: "asd";
assert(size(xpack2) == 5);
assert(xpack2.0 == 3);
assert(xpack2.1 == 1);
assert(xpack2.2 == 2);
assert(xpack2.3 == 66);
assert(xpack2.4 == 4);
assert(size(xpack2.name) == 4);
assert(xpack2.name.0 == "911");
assert(*xpack2.name.1 == "345");
assert(xpack2.name.2 == "678");
assert(xpack2.name.3 == "901");
assert(xpack2.name2 == "asd");
*/

