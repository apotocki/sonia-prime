Terminals unused in grammar

    COMMENT_BEGIN
    COMMENT_END
    OPERATOR_TERM
    "`->*`"
    "`~>`"
    "`.*`"
    "`++`"
    "`--`"
    "`<<`"
    "`>>`"
    "`<=`"
    "`>=`"
    "`&&`"
    "`||`"
    "`..`"
    "`+=`"
    "`-=`"
    "`*=`"
    "`/=`"
    "`%=`"
    "`<<=`"
    "`>>=`"
    "`&=`"
    "`|=`"
    "`^=`"
    "`<`"
    "`>`"
    "`-`"
    "`*`"
    "`/`"
    "`%`"
    "`&`"
    "`~`"
    "`^`"
    "`$`"
    "`?`"
    "`#`"
    FOR
    AUTO
    USING
    THROW
    SIZEOF
    LOWEST
    TYPE
    EXTENDS


Grammar

    0 $accept: begin "end of file"

    1 begin: statement_any "end of file"
    2      | finished_statement_any "end of file"

    3 statement_any: %empty
    4              | statement
    5              | finished_statement_any statement

    6 finished_statement_any: finished_statement
    7                       | finished_statement_any "`;`"
    8                       | finished_statement_any finished_statement
    9                       | statement_any "`;`"

   10 statement: EXTERN VAR identifier "`:`" type-expr
   11          | EXTERN "`fn`" fn-decl
   12          | INCLUDE STRING
   13          | enum-decl
   14          | EXTERN STRUCT struct-decl
   15          | fn-start-decl fn-decl "`=>`" syntax-expression
   16          | generic-statement

   17 let-decl: let-decl-start-with-opt-type
   18         | let-decl-start-with-opt-type "`=`" syntax-expression

   19 let-decl-start: LET identifier
   20               | LET "weak modifier" identifier

   21 let-decl-start-with-opt-type: let-decl-start
   22                             | let-decl-start "`:`" type-expr

   23 infunction-statement-any: %empty
   24                         | infunction-statement
   25                         | finished-infunction-statement-any infunction-statement

   26 finished-infunction-statement-any: finished_statement
   27                                  | finished-infunction-statement-any "`;`"
   28                                  | finished-infunction-statement-any finished_statement
   29                                  | infunction-statement-any "`;`"

   30 braced_statements: "`{`" infunction-statement-set "`}`"

   31 finished_statement: "`while`" syntax-expression braced_statements
   32                   | "`while`" syntax-expression "`;`" syntax-expression braced_statements
   33                   | "`if`" syntax-expression braced_statements
   34                   | "`if`" syntax-expression braced_statements "`else`" braced_statements
   35                   | fn-start-decl fn-decl braced_statements

   36 infunction-statement-set: infunction-statement-any
   37                         | finished-infunction-statement-any

   38 generic-statement: let-decl
   39                  | "`return`" syntax-expression
   40                  | compound-expression

   41 infunction-statement: generic-statement
   42                     | "`break`"
   43                     | "`continue`"

   44 identifier: IDENTIFIER

   45 internal_identifier: INTERNAL_IDENTIFIER

   46 qname: "`::`" identifier
   47      | identifier
   48      | qname "`::`" identifier

   49 fn-start-decl: "`fn`"
   50              | INLINE "`fn`"

   51 fn-decl: qname "`(`" parameter-list-opt "`)`"
   52        | qname "`(`" parameter-list-opt "`)`" "`->`" syntax-expression

   53 enum-decl: ENUM qname "`{`" case-list-opt "`}`"

   54 case-list-opt: %empty
   55              | case-list

   56 case-list: case-decl
   57          | case-list "," case-decl

   58 case-decl: identifier

   59 struct-decl: qname "`->`" "`(`" field-list-opt "`)`"

   60 field-list-opt: %empty
   61               | field-list

   62 field-list: field-decl
   63           | field-list "," field-decl

   64 field-decl: IDENTIFIER "`:`" type-expr
   65           | type-expr

   66 parameter-name-decl: identifier internal_identifier "`:`"
   67                    | identifier "`:`"
   68                    | internal_identifier "`:`"
   69                    | internal_identifier "`...`" "`:`"

   70 parameter-constraint-modifier: TYPENAME
   71                              | "const modifier"

   72 parameter-constraint-modifier-opt: parameter-constraint-modifier
   73                                  | %empty

   74 basic-parameter-matched-type: qname
   75                             | qname "`(`" opt-named-expr-list-any "`)`"
   76                             | basic-parameter-matched-type "`|`" basic-parameter-matched-type

   77 parameter-matched-type: basic-parameter-matched-type
   78                       | basic-parameter-matched-type "`...`"
   79                       | INTERNAL_IDENTIFIER
   80                       | INTERNAL_IDENTIFIER "`...`"

   81 parameter-constraint-set: parameter-matched-type
   82                         | concept-expression
   83                         | "`_`"
   84                         | parameter-constraint-set concept-expression

   85 parameter-decl: parameter-name-decl parameter-constraint-modifier-opt parameter-constraint-set
   86               | parameter-constraint-modifier parameter-constraint-set
   87               | parameter-constraint-set

   88 parameter-list-opt: %empty
   89                   | parameter-list

   90 parameter-list: parameter-decl
   91               | parameter-list "," parameter-decl

   92 concept-expression: "`@`" qname

   93 syntax-expression-wo-ii: "true"
   94                        | "false"
   95                        | INTEGER
   96                        | DECIMAL
   97                        | STRING
   98                        | RESERVED_IDENTIFIER
   99                        | qname
  100                        | "`(`" opt-named-expr-list "`)`"
  101                        | syntax-expression "`.`" identifier
  102                        | "`!`" syntax-expression
  103                        | syntax-expression "`...`"
  104                        | syntax-expression "`+`" syntax-expression
  105                        | syntax-expression "`==`" syntax-expression
  106                        | syntax-expression "`!=`" syntax-expression
  107                        | compound-expression

  108 opt-named-expr-list-any: %empty
  109                        | opt-named-expr-list

  110 opt-named-expr-list: opt-named-expr
  111                    | opt-named-expr-list "," opt-named-expr

  112 opt-named-expr: identifier "`:`" syntax-expression
  113               | syntax-expression

  114 syntax-expression: INTERNAL_IDENTIFIER
  115                  | syntax-expression-wo-ii

  116 type-expr: qname
  117          | internal_identifier
  118          | "`[`" type-expr "`]`"
  119          | "`(`" field-list-opt "`)`"
  120          | type-expr "`[`" INTEGER "`]`"
  121          | type-expr "`|`" type-expr
  122          | type-expr "`->`" type-expr

  123 compound-expression: syntax-expression "`(`" opt-named-expr-list-any "`)`"
  124                    | syntax-expression "`=`" syntax-expression


Terminals, with rules where they appear

    "end of file" (0) 0 1 2
    error (256)
    COMMENT_BEGIN (258)
    COMMENT_END (259)
    STRING <sonia::lang::bang::annotated_string_view> (260) 12 97
    IDENTIFIER <sonia::lang::bang::annotated_string_view> (261) 44 64
    INTERNAL_IDENTIFIER <sonia::lang::bang::annotated_string_view> (262) 45 79 80 114
    RESERVED_IDENTIFIER <sonia::lang::bang::annotated_string_view> (263) 98
    INTEGER <sonia::lang::bang::annotated_integer> (264) 95 120
    DECIMAL <sonia::lang::bang::annotated_decimal> (265) 96
    OPERATOR_TERM <sonia::string_view> (266)
    "`=`" <sonia::lang::lex::resource_location> (267) 18 124
    "`@`" (268) 92
    "`_`" (269) 83
    "`->*`" (270)
    "`->`" (271) 52 59 122
    "`=>`" (272) 15
    "`~>`" (273)
    "`.*`" (274)
    "`++`" (275)
    "`--`" (276)
    "`<<`" (277)
    "`>>`" (278)
    "`<=`" (279)
    "`>=`" (280)
    "`==`" <sonia::lang::lex::resource_location> (281) 105
    "`!=`" <sonia::lang::lex::resource_location> (282) 106
    "`&&`" <sonia::lang::lex::resource_location> (283)
    "`||`" <sonia::lang::lex::resource_location> (284)
    "`..`" <sonia::lang::lex::resource_location> (285)
    "`...`" <sonia::lang::lex::resource_location> (286) 69 78 80 103
    "`+=`" (287)
    "`-=`" (288)
    "`*=`" (289)
    "`/=`" (290)
    "`%=`" (291)
    "`<<=`" (292)
    "`>>=`" (293)
    "`&=`" (294)
    "`|=`" (295)
    "`^=`" (296)
    "`:`" (297) 10 22 64 66 67 68 69 112
    "`::`" (298) 46 48
    "`(`" <sonia::lang::lex::resource_location> (299) 51 52 59 75 100 119 123
    "`)`" (300) 51 52 59 75 100 119 123
    "`{`" <sonia::lang::lex::resource_location> (301) 30 53
    "`}`" (302) 30 53
    "`[`" <sonia::lang::lex::resource_location> (303) 118 120
    "`]`" (304) 118 120
    "`<`" (305)
    "`>`" (306)
    "`;`" (307) 7 9 27 29 32
    "`.`" <sonia::lang::lex::resource_location> (308) 101
    "`+`" <sonia::lang::lex::resource_location> (309) 104
    "`-`" (310)
    "`*`" (311)
    "`/`" (312)
    "`%`" (313)
    "`&`" (314)
    "`|`" <sonia::lang::lex::resource_location> (315) 76 121
    "`!`" <sonia::lang::lex::resource_location> (316) 102
    "`~`" (317)
    "`^`" (318)
    "," (319) 57 63 91 111
    "`$`" (320)
    "`?`" (321)
    "`#`" (322)
    LET (323) 19 20
    VAR (324) 10
    EXTERN (325) 10 11 14
    "`while`" (326) 31 32
    "`if`" (327) 33 34
    "`else`" (328) 34
    "`continue`" <sonia::lang::lex::resource_location> (329) 43
    "`break`" <sonia::lang::lex::resource_location> (330) 42
    "`return`" (331) 39
    FOR (332)
    AUTO (333)
    USING (334)
    THROW (335)
    SIZEOF (336)
    LOWEST (337)
    INCLUDE (338) 12
    INLINE (339) 50
    "`fn`" <sonia::lang::lex::resource_location> (340) 11 49 50
    ENUM (341) 53
    TYPE (342)
    STRUCT (343) 14
    EXTENDS (344)
    TYPENAME (345) 70
    "weak modifier" (346) 20
    "const modifier" (347) 71
    "true" <annotated_bool> (348) 93
    "false" <annotated_bool> (349) 94


Nonterminals, with rules where they appear

    $accept (95)
        on left: 0
    begin (96)
        on left: 1 2
        on right: 0
    statement_any <statement_set_t> (97)
        on left: 3 4 5
        on right: 1 9
    finished_statement_any <statement_set_t> (98)
        on left: 6 7 8 9
        on right: 2 5 7 8
    statement <statement> (99)
        on left: 10 11 12 13 14 15 16
        on right: 4 5
    let-decl <let_statement_decl_t> (100)
        on left: 17 18
        on right: 38
    let-decl-start <let_statement_decl_t> (101)
        on left: 19 20
        on right: 21 22
    let-decl-start-with-opt-type <let_statement_decl_t> (102)
        on left: 21 22
        on right: 17 18
    infunction-statement-any <infunction_declaration_set_t> (103)
        on left: 23 24 25
        on right: 29 36
    finished-infunction-statement-any <infunction_declaration_set_t> (104)
        on left: 26 27 28 29
        on right: 25 27 28 37
    braced_statements <infunction_declaration_set_t> (105)
        on left: 30
        on right: 31 32 33 34 35
    finished_statement <finished_statement_type> (106)
        on left: 31 32 33 34 35
        on right: 6 8 26 28
    infunction-statement-set <infunction_declaration_set_t> (107)
        on left: 36 37
        on right: 30
    generic-statement <generic_statement_type> (108)
        on left: 38 39 40
        on right: 16 41
    infunction-statement <infunction_statement> (109)
        on left: 41 42 43
        on right: 24 25
    identifier <sonia::lang::bang::annotated_identifier> (110)
        on left: 44
        on right: 10 19 20 46 47 48 58 66 67 101 112
    internal_identifier <sonia::lang::bang::annotated_identifier> (111)
        on left: 45
        on right: 66 68 69 117
    qname <sonia::lang::bang::annotated_qname> (112)
        on left: 46 47 48
        on right: 48 51 52 53 59 74 75 92 99 116
    fn-start-decl <fn_kind> (113)
        on left: 49 50
        on right: 15 35
    fn-decl <fn_pure_t> (114)
        on left: 51 52
        on right: 11 15 35
    enum-decl <enum_decl> (115)
        on left: 53
        on right: 13
    case-list-opt <std::vector<sonia::lang::bang::identifier>> (116)
        on left: 54 55
        on right: 53
    case-list <std::vector<sonia::lang::bang::identifier>> (117)
        on left: 56 57
        on right: 55 57
    case-decl <sonia::lang::bang::identifier> (118)
        on left: 58
        on right: 56 57
    struct-decl <external_struct_decl> (119)
        on left: 59
        on right: 14
    field-list-opt <field_list_t> (120)
        on left: 60 61
        on right: 59 119
    field-list <field_list_t> (121)
        on left: 62 63
        on right: 61 63
    field-decl <field_t> (122)
        on left: 64 65
        on right: 62 63
    parameter-name-decl <parameter_name> (123)
        on left: 66 67 68 69
        on right: 85
    parameter-constraint-modifier <parameter_constraint_modifier_t> (124)
        on left: 70 71
        on right: 72 86
    parameter-constraint-modifier-opt <parameter_constraint_modifier_t> (125)
        on left: 72 73
        on right: 85
    basic-parameter-matched-type <syntax_expression_t> (126)
        on left: 74 75 76
        on right: 76 77 78
    parameter-matched-type <syntax_expression_t> (127)
        on left: 77 78 79 80
        on right: 81
    parameter-constraint-set <parameter_constraint_set_t> (128)
        on left: 81 82 83 84
        on right: 84 85 86 87
    parameter-decl <parameter_t> (129)
        on left: 85 86 87
        on right: 90 91
    parameter-list-opt <parameter_woa_list_t> (130)
        on left: 88 89
        on right: 51 52
    parameter-list <parameter_woa_list_t> (131)
        on left: 90 91
        on right: 89 91
    concept-expression <syntax_expression_t> (132)
        on left: 92
        on right: 82 84
    syntax-expression-wo-ii <syntax_expression_t> (133)
        on left: 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107
        on right: 115
    opt-named-expr-list-any <named_expression_list_t> (134)
        on left: 108 109
        on right: 75 123
    opt-named-expr-list <named_expression_list_t> (135)
        on left: 110 111
        on right: 100 109 111
    opt-named-expr <named_expression_t> (136)
        on left: 112 113
        on right: 110 111
    syntax-expression <syntax_expression_t> (137)
        on left: 114 115
        on right: 15 18 31 32 33 34 39 52 101 102 103 104 105 106 112 113 123 124
    type-expr <bang_preliminary_type> (138)
        on left: 116 117 118 119 120 121 122
        on right: 10 22 64 65 118 120 121 122
    compound-expression <syntax_expression_t> (139)
        on left: 123 124
        on right: 40 107


State 0

    0 $accept: . begin "end of file"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER              shift, and go to state 5
    DECIMAL              shift, and go to state 6
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 8
    "`!`"                shift, and go to state 9
    LET                  shift, and go to state 10
    EXTERN               shift, and go to state 11
    "`while`"            shift, and go to state 12
    "`if`"               shift, and go to state 13
    "`return`"           shift, and go to state 14
    INCLUDE              shift, and go to state 15
    INLINE               shift, and go to state 16
    "`fn`"               shift, and go to state 17
    ENUM                 shift, and go to state 18
    "true"               shift, and go to state 19
    "false"              shift, and go to state 20

    $default  reduce using rule 3 (statement_any)

    begin                         go to state 21
    statement_any                 go to state 22
    finished_statement_any        go to state 23
    statement                     go to state 24
    let-decl                      go to state 25
    let-decl-start                go to state 26
    let-decl-start-with-opt-type  go to state 27
    finished_statement            go to state 28
    generic-statement             go to state 29
    identifier                    go to state 30
    qname                         go to state 31
    fn-start-decl                 go to state 32
    enum-decl                     go to state 33
    syntax-expression-wo-ii       go to state 34
    syntax-expression             go to state 35
    compound-expression           go to state 36


State 1

   97 syntax-expression-wo-ii: STRING .

    $default  reduce using rule 97 (syntax-expression-wo-ii)


State 2

   44 identifier: IDENTIFIER .

    $default  reduce using rule 44 (identifier)


State 3

  114 syntax-expression: INTERNAL_IDENTIFIER .

    $default  reduce using rule 114 (syntax-expression)


State 4

   98 syntax-expression-wo-ii: RESERVED_IDENTIFIER .

    $default  reduce using rule 98 (syntax-expression-wo-ii)


State 5

   95 syntax-expression-wo-ii: INTEGER .

    $default  reduce using rule 95 (syntax-expression-wo-ii)


State 6

   96 syntax-expression-wo-ii: DECIMAL .

    $default  reduce using rule 96 (syntax-expression-wo-ii)


State 7

   46 qname: "`::`" . identifier

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 37


State 8

  100 syntax-expression-wo-ii: "`(`" . opt-named-expr-list "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER              shift, and go to state 5
    DECIMAL              shift, and go to state 6
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 8
    "`!`"                shift, and go to state 9
    "true"               shift, and go to state 19
    "false"              shift, and go to state 20

    identifier               go to state 38
    qname                    go to state 31
    syntax-expression-wo-ii  go to state 34
    opt-named-expr-list      go to state 39
    opt-named-expr           go to state 40
    syntax-expression        go to state 41
    compound-expression      go to state 42


State 9

  102 syntax-expression-wo-ii: "`!`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER              shift, and go to state 5
    DECIMAL              shift, and go to state 6
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 8
    "`!`"                shift, and go to state 9
    "true"               shift, and go to state 19
    "false"              shift, and go to state 20

    identifier               go to state 30
    qname                    go to state 31
    syntax-expression-wo-ii  go to state 34
    syntax-expression        go to state 43
    compound-expression      go to state 42


State 10

   19 let-decl-start: LET . identifier
   20               | LET . "weak modifier" identifier

    IDENTIFIER       shift, and go to state 2
    "weak modifier"  shift, and go to state 44

    identifier  go to state 45


State 11

   10 statement: EXTERN . VAR identifier "`:`" type-expr
   11          | EXTERN . "`fn`" fn-decl
   14          | EXTERN . STRUCT struct-decl

    VAR     shift, and go to state 46
    "`fn`"  shift, and go to state 47
    STRUCT  shift, and go to state 48


State 12

   31 finished_statement: "`while`" . syntax-expression braced_statements
   32                   | "`while`" . syntax-expression "`;`" syntax-expression braced_statements

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER              shift, and go to state 5
    DECIMAL              shift, and go to state 6
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 8
    "`!`"                shift, and go to state 9
    "true"               shift, and go to state 19
    "false"              shift, and go to state 20

    identifier               go to state 30
    qname                    go to state 31
    syntax-expression-wo-ii  go to state 34
    syntax-expression        go to state 49
    compound-expression      go to state 42


State 13

   33 finished_statement: "`if`" . syntax-expression braced_statements
   34                   | "`if`" . syntax-expression braced_statements "`else`" braced_statements

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER              shift, and go to state 5
    DECIMAL              shift, and go to state 6
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 8
    "`!`"                shift, and go to state 9
    "true"               shift, and go to state 19
    "false"              shift, and go to state 20

    identifier               go to state 30
    qname                    go to state 31
    syntax-expression-wo-ii  go to state 34
    syntax-expression        go to state 50
    compound-expression      go to state 42


State 14

   39 generic-statement: "`return`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER              shift, and go to state 5
    DECIMAL              shift, and go to state 6
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 8
    "`!`"                shift, and go to state 9
    "true"               shift, and go to state 19
    "false"              shift, and go to state 20

    identifier               go to state 30
    qname                    go to state 31
    syntax-expression-wo-ii  go to state 34
    syntax-expression        go to state 51
    compound-expression      go to state 42


State 15

   12 statement: INCLUDE . STRING

    STRING  shift, and go to state 52


State 16

   50 fn-start-decl: INLINE . "`fn`"

    "`fn`"  shift, and go to state 53


State 17

   49 fn-start-decl: "`fn`" .

    $default  reduce using rule 49 (fn-start-decl)


State 18

   53 enum-decl: ENUM . qname "`{`" case-list-opt "`}`"

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 7

    identifier  go to state 30
    qname       go to state 54


State 19

   93 syntax-expression-wo-ii: "true" .

    $default  reduce using rule 93 (syntax-expression-wo-ii)


State 20

   94 syntax-expression-wo-ii: "false" .

    $default  reduce using rule 94 (syntax-expression-wo-ii)


State 21

    0 $accept: begin . "end of file"

    "end of file"  shift, and go to state 55


State 22

    1 begin: statement_any . "end of file"
    9 finished_statement_any: statement_any . "`;`"

    "end of file"  shift, and go to state 56
    "`;`"          shift, and go to state 57


State 23

    2 begin: finished_statement_any . "end of file"
    5 statement_any: finished_statement_any . statement
    7 finished_statement_any: finished_statement_any . "`;`"
    8                       | finished_statement_any . finished_statement

    "end of file"        shift, and go to state 58
    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER              shift, and go to state 5
    DECIMAL              shift, and go to state 6
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 8
    "`;`"                shift, and go to state 59
    "`!`"                shift, and go to state 9
    LET                  shift, and go to state 10
    EXTERN               shift, and go to state 11
    "`while`"            shift, and go to state 12
    "`if`"               shift, and go to state 13
    "`return`"           shift, and go to state 14
    INCLUDE              shift, and go to state 15
    INLINE               shift, and go to state 16
    "`fn`"               shift, and go to state 17
    ENUM                 shift, and go to state 18
    "true"               shift, and go to state 19
    "false"              shift, and go to state 20

    statement                     go to state 60
    let-decl                      go to state 25
    let-decl-start                go to state 26
    let-decl-start-with-opt-type  go to state 27
    finished_statement            go to state 61
    generic-statement             go to state 29
    identifier                    go to state 30
    qname                         go to state 31
    fn-start-decl                 go to state 32
    enum-decl                     go to state 33
    syntax-expression-wo-ii       go to state 34
    syntax-expression             go to state 35
    compound-expression           go to state 36


State 24

    4 statement_any: statement .

    $default  reduce using rule 4 (statement_any)


State 25

   38 generic-statement: let-decl .

    $default  reduce using rule 38 (generic-statement)


State 26

   21 let-decl-start-with-opt-type: let-decl-start .
   22                             | let-decl-start . "`:`" type-expr

    "`:`"  shift, and go to state 62

    $default  reduce using rule 21 (let-decl-start-with-opt-type)


State 27

   17 let-decl: let-decl-start-with-opt-type .
   18         | let-decl-start-with-opt-type . "`=`" syntax-expression

    "`=`"  shift, and go to state 63

    $default  reduce using rule 17 (let-decl)


State 28

    6 finished_statement_any: finished_statement .

    $default  reduce using rule 6 (finished_statement_any)


State 29

   16 statement: generic-statement .

    $default  reduce using rule 16 (statement)


State 30

   47 qname: identifier .

    $default  reduce using rule 47 (qname)


State 31

   48 qname: qname . "`::`" identifier
   99 syntax-expression-wo-ii: qname .

    "`::`"  shift, and go to state 64

    $default  reduce using rule 99 (syntax-expression-wo-ii)


State 32

   15 statement: fn-start-decl . fn-decl "`=>`" syntax-expression
   35 finished_statement: fn-start-decl . fn-decl braced_statements

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 7

    identifier  go to state 30
    qname       go to state 65
    fn-decl     go to state 66


State 33

   13 statement: enum-decl .

    $default  reduce using rule 13 (statement)


State 34

  115 syntax-expression: syntax-expression-wo-ii .

    $default  reduce using rule 115 (syntax-expression)


State 35

  101 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  103                        | syntax-expression . "`...`"
  104                        | syntax-expression . "`+`" syntax-expression
  105                        | syntax-expression . "`==`" syntax-expression
  106                        | syntax-expression . "`!=`" syntax-expression
  123 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
  124                    | syntax-expression . "`=`" syntax-expression

    "`=`"    shift, and go to state 67
    "`==`"   shift, and go to state 68
    "`!=`"   shift, and go to state 69
    "`...`"  shift, and go to state 70
    "`(`"    shift, and go to state 71
    "`.`"    shift, and go to state 72
    "`+`"    shift, and go to state 73


State 36

   40 generic-statement: compound-expression .
  107 syntax-expression-wo-ii: compound-expression .

    "end of file"  reduce using rule 40 (generic-statement)
    "`}`"          reduce using rule 40 (generic-statement)
    "`;`"          reduce using rule 40 (generic-statement)
    $default       reduce using rule 107 (syntax-expression-wo-ii)


State 37

   46 qname: "`::`" identifier .

    $default  reduce using rule 46 (qname)


State 38

   47 qname: identifier .
  112 opt-named-expr: identifier . "`:`" syntax-expression

    "`:`"  shift, and go to state 74

    $default  reduce using rule 47 (qname)


State 39

  100 syntax-expression-wo-ii: "`(`" opt-named-expr-list . "`)`"
  111 opt-named-expr-list: opt-named-expr-list . "," opt-named-expr

    "`)`"  shift, and go to state 75
    ","    shift, and go to state 76


State 40

  110 opt-named-expr-list: opt-named-expr .

    $default  reduce using rule 110 (opt-named-expr-list)


State 41

  101 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  103                        | syntax-expression . "`...`"
  104                        | syntax-expression . "`+`" syntax-expression
  105                        | syntax-expression . "`==`" syntax-expression
  106                        | syntax-expression . "`!=`" syntax-expression
  113 opt-named-expr: syntax-expression .
  123 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
  124                    | syntax-expression . "`=`" syntax-expression

    "`=`"    shift, and go to state 67
    "`==`"   shift, and go to state 68
    "`!=`"   shift, and go to state 69
    "`...`"  shift, and go to state 70
    "`(`"    shift, and go to state 71
    "`.`"    shift, and go to state 72
    "`+`"    shift, and go to state 73

    $default  reduce using rule 113 (opt-named-expr)


State 42

  107 syntax-expression-wo-ii: compound-expression .

    $default  reduce using rule 107 (syntax-expression-wo-ii)


State 43

  101 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  102                        | "`!`" syntax-expression .
  103                        | syntax-expression . "`...`"
  104                        | syntax-expression . "`+`" syntax-expression
  105                        | syntax-expression . "`==`" syntax-expression
  106                        | syntax-expression . "`!=`" syntax-expression
  123 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
  124                    | syntax-expression . "`=`" syntax-expression

    "`(`"  shift, and go to state 71
    "`.`"  shift, and go to state 72

    $default  reduce using rule 102 (syntax-expression-wo-ii)


State 44

   20 let-decl-start: LET "weak modifier" . identifier

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 77


State 45

   19 let-decl-start: LET identifier .

    $default  reduce using rule 19 (let-decl-start)


State 46

   10 statement: EXTERN VAR . identifier "`:`" type-expr

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 78


State 47

   11 statement: EXTERN "`fn`" . fn-decl

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 7

    identifier  go to state 30
    qname       go to state 65
    fn-decl     go to state 79


State 48

   14 statement: EXTERN STRUCT . struct-decl

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 7

    identifier   go to state 30
    qname        go to state 80
    struct-decl  go to state 81


State 49

   31 finished_statement: "`while`" syntax-expression . braced_statements
   32                   | "`while`" syntax-expression . "`;`" syntax-expression braced_statements
  101 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  103                        | syntax-expression . "`...`"
  104                        | syntax-expression . "`+`" syntax-expression
  105                        | syntax-expression . "`==`" syntax-expression
  106                        | syntax-expression . "`!=`" syntax-expression
  123 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
  124                    | syntax-expression . "`=`" syntax-expression

    "`=`"    shift, and go to state 67
    "`==`"   shift, and go to state 68
    "`!=`"   shift, and go to state 69
    "`...`"  shift, and go to state 70
    "`(`"    shift, and go to state 71
    "`{`"    shift, and go to state 82
    "`;`"    shift, and go to state 83
    "`.`"    shift, and go to state 72
    "`+`"    shift, and go to state 73

    braced_statements  go to state 84


State 50

   33 finished_statement: "`if`" syntax-expression . braced_statements
   34                   | "`if`" syntax-expression . braced_statements "`else`" braced_statements
  101 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  103                        | syntax-expression . "`...`"
  104                        | syntax-expression . "`+`" syntax-expression
  105                        | syntax-expression . "`==`" syntax-expression
  106                        | syntax-expression . "`!=`" syntax-expression
  123 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
  124                    | syntax-expression . "`=`" syntax-expression

    "`=`"    shift, and go to state 67
    "`==`"   shift, and go to state 68
    "`!=`"   shift, and go to state 69
    "`...`"  shift, and go to state 70
    "`(`"    shift, and go to state 71
    "`{`"    shift, and go to state 82
    "`.`"    shift, and go to state 72
    "`+`"    shift, and go to state 73

    braced_statements  go to state 85


State 51

   39 generic-statement: "`return`" syntax-expression .
  101 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  103                        | syntax-expression . "`...`"
  104                        | syntax-expression . "`+`" syntax-expression
  105                        | syntax-expression . "`==`" syntax-expression
  106                        | syntax-expression . "`!=`" syntax-expression
  123 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
  124                    | syntax-expression . "`=`" syntax-expression

    "`=`"    shift, and go to state 67
    "`==`"   shift, and go to state 68
    "`!=`"   shift, and go to state 69
    "`...`"  shift, and go to state 70
    "`(`"    shift, and go to state 71
    "`.`"    shift, and go to state 72
    "`+`"    shift, and go to state 73

    $default  reduce using rule 39 (generic-statement)


State 52

   12 statement: INCLUDE STRING .

    $default  reduce using rule 12 (statement)


State 53

   50 fn-start-decl: INLINE "`fn`" .

    $default  reduce using rule 50 (fn-start-decl)


State 54

   48 qname: qname . "`::`" identifier
   53 enum-decl: ENUM qname . "`{`" case-list-opt "`}`"

    "`::`"  shift, and go to state 64
    "`{`"   shift, and go to state 86


State 55

    0 $accept: begin "end of file" .

    $default  accept


State 56

    1 begin: statement_any "end of file" .

    $default  reduce using rule 1 (begin)


State 57

    9 finished_statement_any: statement_any "`;`" .

    $default  reduce using rule 9 (finished_statement_any)


State 58

    2 begin: finished_statement_any "end of file" .

    $default  reduce using rule 2 (begin)


State 59

    7 finished_statement_any: finished_statement_any "`;`" .

    $default  reduce using rule 7 (finished_statement_any)


State 60

    5 statement_any: finished_statement_any statement .

    $default  reduce using rule 5 (statement_any)


State 61

    8 finished_statement_any: finished_statement_any finished_statement .

    $default  reduce using rule 8 (finished_statement_any)


State 62

   22 let-decl-start-with-opt-type: let-decl-start "`:`" . type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 87
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 88
    "`[`"                shift, and go to state 89

    identifier           go to state 30
    internal_identifier  go to state 90
    qname                go to state 91
    type-expr            go to state 92


State 63

   18 let-decl: let-decl-start-with-opt-type "`=`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER              shift, and go to state 5
    DECIMAL              shift, and go to state 6
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 8
    "`!`"                shift, and go to state 9
    "true"               shift, and go to state 19
    "false"              shift, and go to state 20

    identifier               go to state 30
    qname                    go to state 31
    syntax-expression-wo-ii  go to state 34
    syntax-expression        go to state 93
    compound-expression      go to state 42


State 64

   48 qname: qname "`::`" . identifier

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 94


State 65

   48 qname: qname . "`::`" identifier
   51 fn-decl: qname . "`(`" parameter-list-opt "`)`"
   52        | qname . "`(`" parameter-list-opt "`)`" "`->`" syntax-expression

    "`::`"  shift, and go to state 64
    "`(`"   shift, and go to state 95


State 66

   15 statement: fn-start-decl fn-decl . "`=>`" syntax-expression
   35 finished_statement: fn-start-decl fn-decl . braced_statements

    "`=>`"  shift, and go to state 96
    "`{`"   shift, and go to state 82

    braced_statements  go to state 97


State 67

  124 compound-expression: syntax-expression "`=`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER              shift, and go to state 5
    DECIMAL              shift, and go to state 6
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 8
    "`!`"                shift, and go to state 9
    "true"               shift, and go to state 19
    "false"              shift, and go to state 20

    identifier               go to state 30
    qname                    go to state 31
    syntax-expression-wo-ii  go to state 34
    syntax-expression        go to state 98
    compound-expression      go to state 42


State 68

  105 syntax-expression-wo-ii: syntax-expression "`==`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER              shift, and go to state 5
    DECIMAL              shift, and go to state 6
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 8
    "`!`"                shift, and go to state 9
    "true"               shift, and go to state 19
    "false"              shift, and go to state 20

    identifier               go to state 30
    qname                    go to state 31
    syntax-expression-wo-ii  go to state 34
    syntax-expression        go to state 99
    compound-expression      go to state 42


State 69

  106 syntax-expression-wo-ii: syntax-expression "`!=`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER              shift, and go to state 5
    DECIMAL              shift, and go to state 6
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 8
    "`!`"                shift, and go to state 9
    "true"               shift, and go to state 19
    "false"              shift, and go to state 20

    identifier               go to state 30
    qname                    go to state 31
    syntax-expression-wo-ii  go to state 34
    syntax-expression        go to state 100
    compound-expression      go to state 42


State 70

  103 syntax-expression-wo-ii: syntax-expression "`...`" .

    $default  reduce using rule 103 (syntax-expression-wo-ii)


State 71

  123 compound-expression: syntax-expression "`(`" . opt-named-expr-list-any "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER              shift, and go to state 5
    DECIMAL              shift, and go to state 6
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 8
    "`!`"                shift, and go to state 9
    "true"               shift, and go to state 19
    "false"              shift, and go to state 20

    $default  reduce using rule 108 (opt-named-expr-list-any)

    identifier               go to state 38
    qname                    go to state 31
    syntax-expression-wo-ii  go to state 34
    opt-named-expr-list-any  go to state 101
    opt-named-expr-list      go to state 102
    opt-named-expr           go to state 40
    syntax-expression        go to state 41
    compound-expression      go to state 42


State 72

  101 syntax-expression-wo-ii: syntax-expression "`.`" . identifier

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 103


State 73

  104 syntax-expression-wo-ii: syntax-expression "`+`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER              shift, and go to state 5
    DECIMAL              shift, and go to state 6
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 8
    "`!`"                shift, and go to state 9
    "true"               shift, and go to state 19
    "false"              shift, and go to state 20

    identifier               go to state 30
    qname                    go to state 31
    syntax-expression-wo-ii  go to state 34
    syntax-expression        go to state 104
    compound-expression      go to state 42


State 74

  112 opt-named-expr: identifier "`:`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER              shift, and go to state 5
    DECIMAL              shift, and go to state 6
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 8
    "`!`"                shift, and go to state 9
    "true"               shift, and go to state 19
    "false"              shift, and go to state 20

    identifier               go to state 30
    qname                    go to state 31
    syntax-expression-wo-ii  go to state 34
    syntax-expression        go to state 105
    compound-expression      go to state 42


State 75

  100 syntax-expression-wo-ii: "`(`" opt-named-expr-list "`)`" .

    $default  reduce using rule 100 (syntax-expression-wo-ii)


State 76

  111 opt-named-expr-list: opt-named-expr-list "," . opt-named-expr

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER              shift, and go to state 5
    DECIMAL              shift, and go to state 6
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 8
    "`!`"                shift, and go to state 9
    "true"               shift, and go to state 19
    "false"              shift, and go to state 20

    identifier               go to state 38
    qname                    go to state 31
    syntax-expression-wo-ii  go to state 34
    opt-named-expr           go to state 106
    syntax-expression        go to state 41
    compound-expression      go to state 42


State 77

   20 let-decl-start: LET "weak modifier" identifier .

    $default  reduce using rule 20 (let-decl-start)


State 78

   10 statement: EXTERN VAR identifier . "`:`" type-expr

    "`:`"  shift, and go to state 107


State 79

   11 statement: EXTERN "`fn`" fn-decl .

    $default  reduce using rule 11 (statement)


State 80

   48 qname: qname . "`::`" identifier
   59 struct-decl: qname . "`->`" "`(`" field-list-opt "`)`"

    "`->`"  shift, and go to state 108
    "`::`"  shift, and go to state 64


State 81

   14 statement: EXTERN STRUCT struct-decl .

    $default  reduce using rule 14 (statement)


State 82

   30 braced_statements: "`{`" . infunction-statement-set "`}`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER              shift, and go to state 5
    DECIMAL              shift, and go to state 6
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 8
    "`!`"                shift, and go to state 9
    LET                  shift, and go to state 10
    "`while`"            shift, and go to state 12
    "`if`"               shift, and go to state 13
    "`continue`"         shift, and go to state 109
    "`break`"            shift, and go to state 110
    "`return`"           shift, and go to state 14
    INLINE               shift, and go to state 16
    "`fn`"               shift, and go to state 17
    "true"               shift, and go to state 19
    "false"              shift, and go to state 20

    $default  reduce using rule 23 (infunction-statement-any)

    let-decl                           go to state 25
    let-decl-start                     go to state 26
    let-decl-start-with-opt-type       go to state 27
    infunction-statement-any           go to state 111
    finished-infunction-statement-any  go to state 112
    finished_statement                 go to state 113
    infunction-statement-set           go to state 114
    generic-statement                  go to state 115
    infunction-statement               go to state 116
    identifier                         go to state 30
    qname                              go to state 31
    fn-start-decl                      go to state 117
    syntax-expression-wo-ii            go to state 34
    syntax-expression                  go to state 35
    compound-expression                go to state 36


State 83

   32 finished_statement: "`while`" syntax-expression "`;`" . syntax-expression braced_statements

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER              shift, and go to state 5
    DECIMAL              shift, and go to state 6
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 8
    "`!`"                shift, and go to state 9
    "true"               shift, and go to state 19
    "false"              shift, and go to state 20

    identifier               go to state 30
    qname                    go to state 31
    syntax-expression-wo-ii  go to state 34
    syntax-expression        go to state 118
    compound-expression      go to state 42


State 84

   31 finished_statement: "`while`" syntax-expression braced_statements .

    $default  reduce using rule 31 (finished_statement)


State 85

   33 finished_statement: "`if`" syntax-expression braced_statements .
   34                   | "`if`" syntax-expression braced_statements . "`else`" braced_statements

    "`else`"  shift, and go to state 119

    $default  reduce using rule 33 (finished_statement)


State 86

   53 enum-decl: ENUM qname "`{`" . case-list-opt "`}`"

    IDENTIFIER  shift, and go to state 2

    $default  reduce using rule 54 (case-list-opt)

    identifier     go to state 120
    case-list-opt  go to state 121
    case-list      go to state 122
    case-decl      go to state 123


State 87

   45 internal_identifier: INTERNAL_IDENTIFIER .

    $default  reduce using rule 45 (internal_identifier)


State 88

  119 type-expr: "`(`" . field-list-opt "`)`"

    IDENTIFIER           shift, and go to state 124
    INTERNAL_IDENTIFIER  shift, and go to state 87
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 88
    "`[`"                shift, and go to state 89

    $default  reduce using rule 60 (field-list-opt)

    identifier           go to state 30
    internal_identifier  go to state 90
    qname                go to state 91
    field-list-opt       go to state 125
    field-list           go to state 126
    field-decl           go to state 127
    type-expr            go to state 128


State 89

  118 type-expr: "`[`" . type-expr "`]`"

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 87
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 88
    "`[`"                shift, and go to state 89

    identifier           go to state 30
    internal_identifier  go to state 90
    qname                go to state 91
    type-expr            go to state 129


State 90

  117 type-expr: internal_identifier .

    $default  reduce using rule 117 (type-expr)


State 91

   48 qname: qname . "`::`" identifier
  116 type-expr: qname .

    "`::`"  shift, and go to state 64

    $default  reduce using rule 116 (type-expr)


State 92

   22 let-decl-start-with-opt-type: let-decl-start "`:`" type-expr .
  120 type-expr: type-expr . "`[`" INTEGER "`]`"
  121          | type-expr . "`|`" type-expr
  122          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 130
    "`[`"   shift, and go to state 131
    "`|`"   shift, and go to state 132

    $default  reduce using rule 22 (let-decl-start-with-opt-type)


State 93

   18 let-decl: let-decl-start-with-opt-type "`=`" syntax-expression .
  101 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  103                        | syntax-expression . "`...`"
  104                        | syntax-expression . "`+`" syntax-expression
  105                        | syntax-expression . "`==`" syntax-expression
  106                        | syntax-expression . "`!=`" syntax-expression
  123 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
  124                    | syntax-expression . "`=`" syntax-expression

    "`=`"    shift, and go to state 67
    "`==`"   shift, and go to state 68
    "`!=`"   shift, and go to state 69
    "`...`"  shift, and go to state 70
    "`(`"    shift, and go to state 71
    "`.`"    shift, and go to state 72
    "`+`"    shift, and go to state 73

    $default  reduce using rule 18 (let-decl)


State 94

   48 qname: qname "`::`" identifier .

    $default  reduce using rule 48 (qname)


State 95

   51 fn-decl: qname "`(`" . parameter-list-opt "`)`"
   52        | qname "`(`" . parameter-list-opt "`)`" "`->`" syntax-expression

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 133
    "`@`"                shift, and go to state 134
    "`_`"                shift, and go to state 135
    "`::`"               shift, and go to state 7
    TYPENAME             shift, and go to state 136
    "const modifier"     shift, and go to state 137

    $default  reduce using rule 88 (parameter-list-opt)

    identifier                     go to state 138
    internal_identifier            go to state 139
    qname                          go to state 140
    parameter-name-decl            go to state 141
    parameter-constraint-modifier  go to state 142
    basic-parameter-matched-type   go to state 143
    parameter-matched-type         go to state 144
    parameter-constraint-set       go to state 145
    parameter-decl                 go to state 146
    parameter-list-opt             go to state 147
    parameter-list                 go to state 148
    concept-expression             go to state 149


State 96

   15 statement: fn-start-decl fn-decl "`=>`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER              shift, and go to state 5
    DECIMAL              shift, and go to state 6
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 8
    "`!`"                shift, and go to state 9
    "true"               shift, and go to state 19
    "false"              shift, and go to state 20

    identifier               go to state 30
    qname                    go to state 31
    syntax-expression-wo-ii  go to state 34
    syntax-expression        go to state 150
    compound-expression      go to state 42


State 97

   35 finished_statement: fn-start-decl fn-decl braced_statements .

    $default  reduce using rule 35 (finished_statement)


State 98

  101 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  103                        | syntax-expression . "`...`"
  104                        | syntax-expression . "`+`" syntax-expression
  105                        | syntax-expression . "`==`" syntax-expression
  106                        | syntax-expression . "`!=`" syntax-expression
  123 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
  124                    | syntax-expression . "`=`" syntax-expression
  124                    | syntax-expression "`=`" syntax-expression .

    "`=`"   shift, and go to state 67
    "`==`"  shift, and go to state 68
    "`!=`"  shift, and go to state 69
    "`(`"   shift, and go to state 71
    "`.`"   shift, and go to state 72
    "`+`"   shift, and go to state 73

    $default  reduce using rule 124 (compound-expression)


State 99

  101 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  103                        | syntax-expression . "`...`"
  104                        | syntax-expression . "`+`" syntax-expression
  105                        | syntax-expression . "`==`" syntax-expression
  105                        | syntax-expression "`==`" syntax-expression .
  106                        | syntax-expression . "`!=`" syntax-expression
  123 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
  124                    | syntax-expression . "`=`" syntax-expression

    "`(`"  shift, and go to state 71
    "`.`"  shift, and go to state 72
    "`+`"  shift, and go to state 73

    $default  reduce using rule 105 (syntax-expression-wo-ii)


State 100

  101 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  103                        | syntax-expression . "`...`"
  104                        | syntax-expression . "`+`" syntax-expression
  105                        | syntax-expression . "`==`" syntax-expression
  106                        | syntax-expression . "`!=`" syntax-expression
  106                        | syntax-expression "`!=`" syntax-expression .
  123 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
  124                    | syntax-expression . "`=`" syntax-expression

    "`(`"  shift, and go to state 71
    "`.`"  shift, and go to state 72
    "`+`"  shift, and go to state 73

    $default  reduce using rule 106 (syntax-expression-wo-ii)


State 101

  123 compound-expression: syntax-expression "`(`" opt-named-expr-list-any . "`)`"

    "`)`"  shift, and go to state 151


State 102

  109 opt-named-expr-list-any: opt-named-expr-list .
  111 opt-named-expr-list: opt-named-expr-list . "," opt-named-expr

    ","  shift, and go to state 76

    $default  reduce using rule 109 (opt-named-expr-list-any)


State 103

  101 syntax-expression-wo-ii: syntax-expression "`.`" identifier .

    $default  reduce using rule 101 (syntax-expression-wo-ii)


State 104

  101 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  103                        | syntax-expression . "`...`"
  104                        | syntax-expression . "`+`" syntax-expression
  104                        | syntax-expression "`+`" syntax-expression .
  105                        | syntax-expression . "`==`" syntax-expression
  106                        | syntax-expression . "`!=`" syntax-expression
  123 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
  124                    | syntax-expression . "`=`" syntax-expression

    "`(`"  shift, and go to state 71
    "`.`"  shift, and go to state 72

    $default  reduce using rule 104 (syntax-expression-wo-ii)


State 105

  101 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  103                        | syntax-expression . "`...`"
  104                        | syntax-expression . "`+`" syntax-expression
  105                        | syntax-expression . "`==`" syntax-expression
  106                        | syntax-expression . "`!=`" syntax-expression
  112 opt-named-expr: identifier "`:`" syntax-expression .
  123 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
  124                    | syntax-expression . "`=`" syntax-expression

    "`=`"    shift, and go to state 67
    "`==`"   shift, and go to state 68
    "`!=`"   shift, and go to state 69
    "`...`"  shift, and go to state 70
    "`(`"    shift, and go to state 71
    "`.`"    shift, and go to state 72
    "`+`"    shift, and go to state 73

    $default  reduce using rule 112 (opt-named-expr)


State 106

  111 opt-named-expr-list: opt-named-expr-list "," opt-named-expr .

    $default  reduce using rule 111 (opt-named-expr-list)


State 107

   10 statement: EXTERN VAR identifier "`:`" . type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 87
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 88
    "`[`"                shift, and go to state 89

    identifier           go to state 30
    internal_identifier  go to state 90
    qname                go to state 91
    type-expr            go to state 152


State 108

   59 struct-decl: qname "`->`" . "`(`" field-list-opt "`)`"

    "`(`"  shift, and go to state 153


State 109

   43 infunction-statement: "`continue`" .

    $default  reduce using rule 43 (infunction-statement)


State 110

   42 infunction-statement: "`break`" .

    $default  reduce using rule 42 (infunction-statement)


State 111

   29 finished-infunction-statement-any: infunction-statement-any . "`;`"
   36 infunction-statement-set: infunction-statement-any .

    "`;`"  shift, and go to state 154

    $default  reduce using rule 36 (infunction-statement-set)


State 112

   25 infunction-statement-any: finished-infunction-statement-any . infunction-statement
   27 finished-infunction-statement-any: finished-infunction-statement-any . "`;`"
   28                                  | finished-infunction-statement-any . finished_statement
   37 infunction-statement-set: finished-infunction-statement-any .

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER              shift, and go to state 5
    DECIMAL              shift, and go to state 6
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 8
    "`;`"                shift, and go to state 155
    "`!`"                shift, and go to state 9
    LET                  shift, and go to state 10
    "`while`"            shift, and go to state 12
    "`if`"               shift, and go to state 13
    "`continue`"         shift, and go to state 109
    "`break`"            shift, and go to state 110
    "`return`"           shift, and go to state 14
    INLINE               shift, and go to state 16
    "`fn`"               shift, and go to state 17
    "true"               shift, and go to state 19
    "false"              shift, and go to state 20

    $default  reduce using rule 37 (infunction-statement-set)

    let-decl                      go to state 25
    let-decl-start                go to state 26
    let-decl-start-with-opt-type  go to state 27
    finished_statement            go to state 156
    generic-statement             go to state 115
    infunction-statement          go to state 157
    identifier                    go to state 30
    qname                         go to state 31
    fn-start-decl                 go to state 117
    syntax-expression-wo-ii       go to state 34
    syntax-expression             go to state 35
    compound-expression           go to state 36


State 113

   26 finished-infunction-statement-any: finished_statement .

    $default  reduce using rule 26 (finished-infunction-statement-any)


State 114

   30 braced_statements: "`{`" infunction-statement-set . "`}`"

    "`}`"  shift, and go to state 158


State 115

   41 infunction-statement: generic-statement .

    $default  reduce using rule 41 (infunction-statement)


State 116

   24 infunction-statement-any: infunction-statement .

    $default  reduce using rule 24 (infunction-statement-any)


State 117

   35 finished_statement: fn-start-decl . fn-decl braced_statements

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 7

    identifier  go to state 30
    qname       go to state 65
    fn-decl     go to state 159


State 118

   32 finished_statement: "`while`" syntax-expression "`;`" syntax-expression . braced_statements
  101 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  103                        | syntax-expression . "`...`"
  104                        | syntax-expression . "`+`" syntax-expression
  105                        | syntax-expression . "`==`" syntax-expression
  106                        | syntax-expression . "`!=`" syntax-expression
  123 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
  124                    | syntax-expression . "`=`" syntax-expression

    "`=`"    shift, and go to state 67
    "`==`"   shift, and go to state 68
    "`!=`"   shift, and go to state 69
    "`...`"  shift, and go to state 70
    "`(`"    shift, and go to state 71
    "`{`"    shift, and go to state 82
    "`.`"    shift, and go to state 72
    "`+`"    shift, and go to state 73

    braced_statements  go to state 160


State 119

   34 finished_statement: "`if`" syntax-expression braced_statements "`else`" . braced_statements

    "`{`"  shift, and go to state 82

    braced_statements  go to state 161


State 120

   58 case-decl: identifier .

    $default  reduce using rule 58 (case-decl)


State 121

   53 enum-decl: ENUM qname "`{`" case-list-opt . "`}`"

    "`}`"  shift, and go to state 162


State 122

   55 case-list-opt: case-list .
   57 case-list: case-list . "," case-decl

    ","  shift, and go to state 163

    $default  reduce using rule 55 (case-list-opt)


State 123

   56 case-list: case-decl .

    $default  reduce using rule 56 (case-list)


State 124

   44 identifier: IDENTIFIER .
   64 field-decl: IDENTIFIER . "`:`" type-expr

    "`:`"  shift, and go to state 164

    $default  reduce using rule 44 (identifier)


State 125

  119 type-expr: "`(`" field-list-opt . "`)`"

    "`)`"  shift, and go to state 165


State 126

   61 field-list-opt: field-list .
   63 field-list: field-list . "," field-decl

    ","  shift, and go to state 166

    $default  reduce using rule 61 (field-list-opt)


State 127

   62 field-list: field-decl .

    $default  reduce using rule 62 (field-list)


State 128

   65 field-decl: type-expr .
  120 type-expr: type-expr . "`[`" INTEGER "`]`"
  121          | type-expr . "`|`" type-expr
  122          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 130
    "`[`"   shift, and go to state 131
    "`|`"   shift, and go to state 132

    $default  reduce using rule 65 (field-decl)


State 129

  118 type-expr: "`[`" type-expr . "`]`"
  120          | type-expr . "`[`" INTEGER "`]`"
  121          | type-expr . "`|`" type-expr
  122          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 130
    "`[`"   shift, and go to state 131
    "`]`"   shift, and go to state 167
    "`|`"   shift, and go to state 132


State 130

  122 type-expr: type-expr "`->`" . type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 87
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 88
    "`[`"                shift, and go to state 89

    identifier           go to state 30
    internal_identifier  go to state 90
    qname                go to state 91
    type-expr            go to state 168


State 131

  120 type-expr: type-expr "`[`" . INTEGER "`]`"

    INTEGER  shift, and go to state 169


State 132

  121 type-expr: type-expr "`|`" . type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 87
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 88
    "`[`"                shift, and go to state 89

    identifier           go to state 30
    internal_identifier  go to state 90
    qname                go to state 91
    type-expr            go to state 170


State 133

   45 internal_identifier: INTERNAL_IDENTIFIER .
   79 parameter-matched-type: INTERNAL_IDENTIFIER .
   80                       | INTERNAL_IDENTIFIER . "`...`"

    "`...`"   reduce using rule 45 (internal_identifier)
    "`:`"     reduce using rule 45 (internal_identifier)
    $default  reduce using rule 79 (parameter-matched-type)


State 134

   92 concept-expression: "`@`" . qname

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 7

    identifier  go to state 30
    qname       go to state 172


State 135

   83 parameter-constraint-set: "`_`" .

    $default  reduce using rule 83 (parameter-constraint-set)


State 136

   70 parameter-constraint-modifier: TYPENAME .

    $default  reduce using rule 70 (parameter-constraint-modifier)


State 137

   71 parameter-constraint-modifier: "const modifier" .

    $default  reduce using rule 71 (parameter-constraint-modifier)


State 138

   47 qname: identifier .
   66 parameter-name-decl: identifier . internal_identifier "`:`"
   67                    | identifier . "`:`"

    INTERNAL_IDENTIFIER  shift, and go to state 87
    "`:`"                shift, and go to state 173

    $default  reduce using rule 47 (qname)

    internal_identifier  go to state 174


State 139

   68 parameter-name-decl: internal_identifier . "`:`"
   69                    | internal_identifier . "`...`" "`:`"

    "`...`"  shift, and go to state 175
    "`:`"    shift, and go to state 176


State 140

   48 qname: qname . "`::`" identifier
   74 basic-parameter-matched-type: qname .
   75                             | qname . "`(`" opt-named-expr-list-any "`)`"

    "`::`"  shift, and go to state 64
    "`(`"   shift, and go to state 177

    $default  reduce using rule 74 (basic-parameter-matched-type)


State 141

   85 parameter-decl: parameter-name-decl . parameter-constraint-modifier-opt parameter-constraint-set

    TYPENAME          shift, and go to state 136
    "const modifier"  shift, and go to state 137

    $default  reduce using rule 73 (parameter-constraint-modifier-opt)

    parameter-constraint-modifier      go to state 178
    parameter-constraint-modifier-opt  go to state 179


State 142

   86 parameter-decl: parameter-constraint-modifier . parameter-constraint-set

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 180
    "`@`"                shift, and go to state 134
    "`_`"                shift, and go to state 135
    "`::`"               shift, and go to state 7

    identifier                    go to state 30
    qname                         go to state 140
    basic-parameter-matched-type  go to state 143
    parameter-matched-type        go to state 144
    parameter-constraint-set      go to state 181
    concept-expression            go to state 149


State 143

   76 basic-parameter-matched-type: basic-parameter-matched-type . "`|`" basic-parameter-matched-type
   77 parameter-matched-type: basic-parameter-matched-type .
   78                       | basic-parameter-matched-type . "`...`"

    "`...`"  shift, and go to state 182
    "`|`"    shift, and go to state 183

    $default  reduce using rule 77 (parameter-matched-type)


State 144

   81 parameter-constraint-set: parameter-matched-type .

    $default  reduce using rule 81 (parameter-constraint-set)


State 145

   84 parameter-constraint-set: parameter-constraint-set . concept-expression
   87 parameter-decl: parameter-constraint-set .

    "`@`"  shift, and go to state 134

    $default  reduce using rule 87 (parameter-decl)

    concept-expression  go to state 184


State 146

   90 parameter-list: parameter-decl .

    $default  reduce using rule 90 (parameter-list)


State 147

   51 fn-decl: qname "`(`" parameter-list-opt . "`)`"
   52        | qname "`(`" parameter-list-opt . "`)`" "`->`" syntax-expression

    "`)`"  shift, and go to state 185


State 148

   89 parameter-list-opt: parameter-list .
   91 parameter-list: parameter-list . "," parameter-decl

    ","  shift, and go to state 186

    $default  reduce using rule 89 (parameter-list-opt)


State 149

   82 parameter-constraint-set: concept-expression .

    $default  reduce using rule 82 (parameter-constraint-set)


State 150

   15 statement: fn-start-decl fn-decl "`=>`" syntax-expression .
  101 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  103                        | syntax-expression . "`...`"
  104                        | syntax-expression . "`+`" syntax-expression
  105                        | syntax-expression . "`==`" syntax-expression
  106                        | syntax-expression . "`!=`" syntax-expression
  123 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
  124                    | syntax-expression . "`=`" syntax-expression

    "`=`"    shift, and go to state 67
    "`==`"   shift, and go to state 68
    "`!=`"   shift, and go to state 69
    "`...`"  shift, and go to state 70
    "`(`"    shift, and go to state 71
    "`.`"    shift, and go to state 72
    "`+`"    shift, and go to state 73

    $default  reduce using rule 15 (statement)


State 151

  123 compound-expression: syntax-expression "`(`" opt-named-expr-list-any "`)`" .

    $default  reduce using rule 123 (compound-expression)


State 152

   10 statement: EXTERN VAR identifier "`:`" type-expr .
  120 type-expr: type-expr . "`[`" INTEGER "`]`"
  121          | type-expr . "`|`" type-expr
  122          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 130
    "`[`"   shift, and go to state 131
    "`|`"   shift, and go to state 132

    $default  reduce using rule 10 (statement)


State 153

   59 struct-decl: qname "`->`" "`(`" . field-list-opt "`)`"

    IDENTIFIER           shift, and go to state 124
    INTERNAL_IDENTIFIER  shift, and go to state 87
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 88
    "`[`"                shift, and go to state 89

    $default  reduce using rule 60 (field-list-opt)

    identifier           go to state 30
    internal_identifier  go to state 90
    qname                go to state 91
    field-list-opt       go to state 187
    field-list           go to state 126
    field-decl           go to state 127
    type-expr            go to state 128


State 154

   29 finished-infunction-statement-any: infunction-statement-any "`;`" .

    $default  reduce using rule 29 (finished-infunction-statement-any)


State 155

   27 finished-infunction-statement-any: finished-infunction-statement-any "`;`" .

    $default  reduce using rule 27 (finished-infunction-statement-any)


State 156

   28 finished-infunction-statement-any: finished-infunction-statement-any finished_statement .

    $default  reduce using rule 28 (finished-infunction-statement-any)


State 157

   25 infunction-statement-any: finished-infunction-statement-any infunction-statement .

    $default  reduce using rule 25 (infunction-statement-any)


State 158

   30 braced_statements: "`{`" infunction-statement-set "`}`" .

    $default  reduce using rule 30 (braced_statements)


State 159

   35 finished_statement: fn-start-decl fn-decl . braced_statements

    "`{`"  shift, and go to state 82

    braced_statements  go to state 97


State 160

   32 finished_statement: "`while`" syntax-expression "`;`" syntax-expression braced_statements .

    $default  reduce using rule 32 (finished_statement)


State 161

   34 finished_statement: "`if`" syntax-expression braced_statements "`else`" braced_statements .

    $default  reduce using rule 34 (finished_statement)


State 162

   53 enum-decl: ENUM qname "`{`" case-list-opt "`}`" .

    $default  reduce using rule 53 (enum-decl)


State 163

   57 case-list: case-list "," . case-decl

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 120
    case-decl   go to state 188


State 164

   64 field-decl: IDENTIFIER "`:`" . type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 87
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 88
    "`[`"                shift, and go to state 89

    identifier           go to state 30
    internal_identifier  go to state 90
    qname                go to state 91
    type-expr            go to state 189


State 165

  119 type-expr: "`(`" field-list-opt "`)`" .

    $default  reduce using rule 119 (type-expr)


State 166

   63 field-list: field-list "," . field-decl

    IDENTIFIER           shift, and go to state 124
    INTERNAL_IDENTIFIER  shift, and go to state 87
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 88
    "`[`"                shift, and go to state 89

    identifier           go to state 30
    internal_identifier  go to state 90
    qname                go to state 91
    field-decl           go to state 190
    type-expr            go to state 128


State 167

  118 type-expr: "`[`" type-expr "`]`" .

    $default  reduce using rule 118 (type-expr)


State 168

  120 type-expr: type-expr . "`[`" INTEGER "`]`"
  121          | type-expr . "`|`" type-expr
  122          | type-expr . "`->`" type-expr
  122          | type-expr "`->`" type-expr .

    $default  reduce using rule 122 (type-expr)


State 169

  120 type-expr: type-expr "`[`" INTEGER . "`]`"

    "`]`"  shift, and go to state 191


State 170

  120 type-expr: type-expr . "`[`" INTEGER "`]`"
  121          | type-expr . "`|`" type-expr
  121          | type-expr "`|`" type-expr .
  122          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 130
    "`[`"   shift, and go to state 131

    $default  reduce using rule 121 (type-expr)


State 171

   80 parameter-matched-type: INTERNAL_IDENTIFIER "`...`" .

    $default  reduce using rule 80 (parameter-matched-type)


State 172

   48 qname: qname . "`::`" identifier
   92 concept-expression: "`@`" qname .

    "`::`"  shift, and go to state 64

    $default  reduce using rule 92 (concept-expression)


State 173

   67 parameter-name-decl: identifier "`:`" .

    $default  reduce using rule 67 (parameter-name-decl)


State 174

   66 parameter-name-decl: identifier internal_identifier . "`:`"

    "`:`"  shift, and go to state 192


State 175

   69 parameter-name-decl: internal_identifier "`...`" . "`:`"

    "`:`"  shift, and go to state 193


State 176

   68 parameter-name-decl: internal_identifier "`:`" .

    $default  reduce using rule 68 (parameter-name-decl)


State 177

   75 basic-parameter-matched-type: qname "`(`" . opt-named-expr-list-any "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER              shift, and go to state 5
    DECIMAL              shift, and go to state 6
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 8
    "`!`"                shift, and go to state 9
    "true"               shift, and go to state 19
    "false"              shift, and go to state 20

    $default  reduce using rule 108 (opt-named-expr-list-any)

    identifier               go to state 38
    qname                    go to state 31
    syntax-expression-wo-ii  go to state 34
    opt-named-expr-list-any  go to state 194
    opt-named-expr-list      go to state 102
    opt-named-expr           go to state 40
    syntax-expression        go to state 41
    compound-expression      go to state 42


State 178

   72 parameter-constraint-modifier-opt: parameter-constraint-modifier .

    $default  reduce using rule 72 (parameter-constraint-modifier-opt)


State 179

   85 parameter-decl: parameter-name-decl parameter-constraint-modifier-opt . parameter-constraint-set

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 180
    "`@`"                shift, and go to state 134
    "`_`"                shift, and go to state 135
    "`::`"               shift, and go to state 7

    identifier                    go to state 30
    qname                         go to state 140
    basic-parameter-matched-type  go to state 143
    parameter-matched-type        go to state 144
    parameter-constraint-set      go to state 195
    concept-expression            go to state 149


State 180

   79 parameter-matched-type: INTERNAL_IDENTIFIER .
   80                       | INTERNAL_IDENTIFIER . "`...`"

    "`...`"  shift, and go to state 171

    $default  reduce using rule 79 (parameter-matched-type)


State 181

   84 parameter-constraint-set: parameter-constraint-set . concept-expression
   86 parameter-decl: parameter-constraint-modifier parameter-constraint-set .

    "`@`"  shift, and go to state 134

    $default  reduce using rule 86 (parameter-decl)

    concept-expression  go to state 184


State 182

   78 parameter-matched-type: basic-parameter-matched-type "`...`" .

    $default  reduce using rule 78 (parameter-matched-type)


State 183

   76 basic-parameter-matched-type: basic-parameter-matched-type "`|`" . basic-parameter-matched-type

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 7

    identifier                    go to state 30
    qname                         go to state 140
    basic-parameter-matched-type  go to state 196


State 184

   84 parameter-constraint-set: parameter-constraint-set concept-expression .

    $default  reduce using rule 84 (parameter-constraint-set)


State 185

   51 fn-decl: qname "`(`" parameter-list-opt "`)`" .
   52        | qname "`(`" parameter-list-opt "`)`" . "`->`" syntax-expression

    "`->`"  shift, and go to state 197

    $default  reduce using rule 51 (fn-decl)


State 186

   91 parameter-list: parameter-list "," . parameter-decl

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 133
    "`@`"                shift, and go to state 134
    "`_`"                shift, and go to state 135
    "`::`"               shift, and go to state 7
    TYPENAME             shift, and go to state 136
    "const modifier"     shift, and go to state 137

    identifier                     go to state 138
    internal_identifier            go to state 139
    qname                          go to state 140
    parameter-name-decl            go to state 141
    parameter-constraint-modifier  go to state 142
    basic-parameter-matched-type   go to state 143
    parameter-matched-type         go to state 144
    parameter-constraint-set       go to state 145
    parameter-decl                 go to state 198
    concept-expression             go to state 149


State 187

   59 struct-decl: qname "`->`" "`(`" field-list-opt . "`)`"

    "`)`"  shift, and go to state 199


State 188

   57 case-list: case-list "," case-decl .

    $default  reduce using rule 57 (case-list)


State 189

   64 field-decl: IDENTIFIER "`:`" type-expr .
  120 type-expr: type-expr . "`[`" INTEGER "`]`"
  121          | type-expr . "`|`" type-expr
  122          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 130
    "`[`"   shift, and go to state 131
    "`|`"   shift, and go to state 132

    $default  reduce using rule 64 (field-decl)


State 190

   63 field-list: field-list "," field-decl .

    $default  reduce using rule 63 (field-list)


State 191

  120 type-expr: type-expr "`[`" INTEGER "`]`" .

    $default  reduce using rule 120 (type-expr)


State 192

   66 parameter-name-decl: identifier internal_identifier "`:`" .

    $default  reduce using rule 66 (parameter-name-decl)


State 193

   69 parameter-name-decl: internal_identifier "`...`" "`:`" .

    $default  reduce using rule 69 (parameter-name-decl)


State 194

   75 basic-parameter-matched-type: qname "`(`" opt-named-expr-list-any . "`)`"

    "`)`"  shift, and go to state 200


State 195

   84 parameter-constraint-set: parameter-constraint-set . concept-expression
   85 parameter-decl: parameter-name-decl parameter-constraint-modifier-opt parameter-constraint-set .

    "`@`"  shift, and go to state 134

    $default  reduce using rule 85 (parameter-decl)

    concept-expression  go to state 184


State 196

   76 basic-parameter-matched-type: basic-parameter-matched-type . "`|`" basic-parameter-matched-type
   76                             | basic-parameter-matched-type "`|`" basic-parameter-matched-type .

    $default  reduce using rule 76 (basic-parameter-matched-type)


State 197

   52 fn-decl: qname "`(`" parameter-list-opt "`)`" "`->`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER              shift, and go to state 5
    DECIMAL              shift, and go to state 6
    "`::`"               shift, and go to state 7
    "`(`"                shift, and go to state 8
    "`!`"                shift, and go to state 9
    "true"               shift, and go to state 19
    "false"              shift, and go to state 20

    identifier               go to state 30
    qname                    go to state 31
    syntax-expression-wo-ii  go to state 34
    syntax-expression        go to state 201
    compound-expression      go to state 42


State 198

   91 parameter-list: parameter-list "," parameter-decl .

    $default  reduce using rule 91 (parameter-list)


State 199

   59 struct-decl: qname "`->`" "`(`" field-list-opt "`)`" .

    $default  reduce using rule 59 (struct-decl)


State 200

   75 basic-parameter-matched-type: qname "`(`" opt-named-expr-list-any "`)`" .

    $default  reduce using rule 75 (basic-parameter-matched-type)


State 201

   52 fn-decl: qname "`(`" parameter-list-opt "`)`" "`->`" syntax-expression .
  101 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  103                        | syntax-expression . "`...`"
  104                        | syntax-expression . "`+`" syntax-expression
  105                        | syntax-expression . "`==`" syntax-expression
  106                        | syntax-expression . "`!=`" syntax-expression
  123 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
  124                    | syntax-expression . "`=`" syntax-expression

    "`=`"    shift, and go to state 67
    "`==`"   shift, and go to state 68
    "`!=`"   shift, and go to state 69
    "`...`"  shift, and go to state 70
    "`(`"    shift, and go to state 71
    "`.`"    shift, and go to state 72
    "`+`"    shift, and go to state 73

    $default  reduce using rule 52 (fn-decl)
