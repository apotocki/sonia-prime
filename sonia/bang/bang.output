Terminals unused in grammar

    COMMENT_BEGIN
    COMMENT_END
    OPERATOR_TERM
    "`_`"
    "`->*`"
    "`~>`"
    "`.*`"
    "`++`"
    "`--`"
    "`<<`"
    "`>>`"
    "`<=`"
    "`>=`"
    "`==`"
    "`!=`"
    "`+=`"
    "`-=`"
    "`*=`"
    "`/=`"
    "`%=`"
    "`<<=`"
    "`>>=`"
    "`&=`"
    "`|=`"
    "`^=`"
    "`<`"
    "`>`"
    "`+`"
    "`-`"
    "`*`"
    "`/`"
    "`%`"
    "`&`"
    "`~`"
    "`^`"
    "`$`"
    "`#`"
    FOR
    VOID_
    AUTO
    CONST_
    USING
    THROW
    DELETE_
    SIZEOF
    LOWEST
    "`::`"


Grammar

    0 $accept: begin "end of file"

    1 begin: declaration_any "end of file"

    2 declaration_any: %empty
    3                | declaration_any "`;`"
    4                | declaration_any generic-decl

    5 generic-decl: EXTERN VAR identifier "`:`" type-expr "`;`"
    6             | EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" "`;`"
    7             | EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`;`"
    8             | INCLUDE STRING
    9             | enum-decl
   10             | type-decl
   11             | fn-decl
   12             | let-decl
   13             | compound-expression "`;`"

   14 let-decl: let-decl-start-with-opt-type "`;`"
   15         | let-decl-start-with-opt-type "`=`" expression "`;`"

   16 let-decl-start: LET identifier
   17               | LET "weak modifier" identifier

   18 let-decl-start-with-opt-type: let-decl-start
   19                             | let-decl-start "`:`" type-expr

   20 infunction_declaration_any: %empty
   21                           | infunction_declaration_any "`;`"
   22                           | infunction_declaration_any opt-infunction-decl

   23 opt-infunction-decl: let-decl
   24                    | RETURN expression "`;`"
   25                    | compound-expression "`;`"

   26 identifier: IDENTIFIER

   27 qname: DBLCOLON identifier
   28      | identifier
   29      | qname DBLCOLON identifier

   30 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   31        | FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

   32 enum-decl: ENUM qname "`{`" case-list-opt "`}`"

   33 case-list-opt: %empty
   34              | case-list

   35 case-list: case-decl
   36          | case-list "," case-decl

   37 case-decl: identifier

   38 type-decl: TYPE qname type-extension-any "`{`" parameter-woa-list-opt "`}`"

   39 type-extension-any: %empty
   40                   | EXTENDS type-extension-list

   41 type-extension-list: qname
   42                    | type-extension-list "," qname

   43 parameter-list-opt: %empty
   44                   | parameter-list

   45 parameter-list: parameter-decl
   46               | parameter-list "," parameter-decl

   47 parameter-decl: identifier "`:`" type-expr
   48               | type-expr

   49 parameter-woa-list-opt: %empty
   50                       | parameter-woa-list

   51 parameter-woa-list: parameter-woa-decl
   52                   | parameter-woa-list "," parameter-woa-decl

   53 parameter-woa-decl: parameter-decl
   54                   | parameter-decl "`=`" expression

   55 type-expr: BOOL
   56          | INT
   57          | FLOAT
   58          | STRING_WORD
   59          | DECIMAL_WORD
   60          | qname
   61          | "`[`" type-expr "`]`"
   62          | "`(`" parameter-list-opt "`)`"
   63          | type-expr "`[`" INTEGER "`]`"
   64          | type-expr "`|`" type-expr
   65          | type-expr "`->`" type-expr

   66 compound-expression: expression "`(`" opt-named-expr-list-any "`)`"
   67                    | expression "`=`" expression

   68 expression: "true"
   69           | "false"
   70           | INTEGER
   71           | DECIMAL
   72           | STRING
   73           | "`.`" identifier
   74           | qname
   75           | ARGIDENTIFIER
   76           | "`(`" expression "`)`"
   77           | FN "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   78           | FN "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"
   79           | "`[`" expression-list-any "`]`"
   80           | "`!`" expression
   81           | expression "`.`" identifier
   82           | expression "`?`" "`.`" identifier
   83           | expression "`&&`" expression
   84           | expression "`||`" expression
   85           | expression "`..`" expression
   86           | compound-expression

   87 expression-list-any: %empty
   88                    | expression
   89                    | expression-list-any "," expression

   90 opt-named-expr-list-any: %empty
   91                        | opt-named-expr-list

   92 opt-named-expr-list: opt-named-expr
   93                    | opt-named-expr-list "," opt-named-expr

   94 opt-named-expr: identifier "`:`" expression
   95               | expression


Terminals, with rules where they appear

    "end of file" (0) 0 1
    error (256)
    COMMENT_BEGIN (258)
    COMMENT_END (259)
    STRING <sonia::lang::bang::annotated_string_view> (260) 8 72
    IDENTIFIER <sonia::lang::bang::annotated_string_view> (261) 26
    ARGIDENTIFIER <sonia::lang::bang::annotated_string_view> (262) 75
    INTEGER <sonia::lang::bang::annotated_decimal> (263) 63 70
    DECIMAL <sonia::lang::bang::annotated_decimal> (264) 71
    OPERATOR_TERM <sonia::string_view> (265)
    "`=`" <sonia::lang::lex::resource_location> (266) 15 54 67
    "`_`" (267)
    "`->*`" (268)
    "`->`" (269) 7 31 65 78
    "`~>`" (270)
    "`.*`" (271)
    "`++`" (272)
    "`--`" (273)
    "`<<`" (274)
    "`>>`" (275)
    "`<=`" (276)
    "`>=`" (277)
    "`==`" (278)
    "`!=`" (279)
    "`&&`" <sonia::lang::lex::resource_location> (280) 83
    "`||`" <sonia::lang::lex::resource_location> (281) 84
    "`..`" <sonia::lang::lex::resource_location> (282) 85
    "`+=`" (283)
    "`-=`" (284)
    "`*=`" (285)
    "`/=`" (286)
    "`%=`" (287)
    "`<<=`" (288)
    "`>>=`" (289)
    "`&=`" (290)
    "`|=`" (291)
    "`^=`" (292)
    "`:`" (293) 5 19 47 94
    "`(`" <sonia::lang::lex::resource_location> (294) 6 7 30 31 62 66 76 77 78
    "`)`" (295) 6 7 30 31 62 66 76 77 78
    "`{`" (296) 30 31 32 38 77 78
    "`}`" (297) 30 31 32 38 77 78
    "`[`" <sonia::lang::lex::resource_location> (298) 61 63 79
    "`]`" (299) 61 63 79
    "`<`" (300)
    "`>`" (301)
    "`;`" (302) 3 5 6 7 13 14 15 21 24 25
    "`.`" <sonia::lang::lex::resource_location> (303) 73 81 82
    "`+`" (304)
    "`-`" (305)
    "`*`" (306)
    "`/`" (307)
    "`%`" (308)
    "`&`" (309)
    "`|`" (310) 64
    "`!`" <sonia::lang::lex::resource_location> (311) 80
    "`~`" (312)
    "`^`" (313)
    "," (314) 36 42 46 52 89 93
    "`$`" (315)
    "`?`" (316) 82
    "`#`" (317)
    LET (318) 16 17
    VAR (319) 5
    RETURN (320) 24
    EXTERN (321) 5 6 7
    FOR (322)
    VOID_ (323)
    AUTO (324)
    CONST_ (325)
    USING (326)
    THROW (327)
    DELETE_ (328)
    SIZEOF (329)
    LOWEST (330)
    DBLCOLON (331) 27 29
    "`::`" (332)
    INCLUDE (333) 8
    FN <sonia::lang::lex::resource_location> (334) 6 7 30 31 77 78
    ENUM (335) 32
    TYPE (336) 38
    EXTENDS (337) 40
    BOOL (338) 55
    INT (339) 56
    FLOAT (340) 57
    STRING_WORD (341) 58
    DECIMAL_WORD (342) 59
    "weak modifier" (343) 17
    "true" <sonia::lang::lex::resource_location> (344) 68
    "false" <sonia::lang::lex::resource_location> (345) 69


Nonterminals, with rules where they appear

    $accept (91)
        on left: 0
    begin (92)
        on left: 1
        on right: 0
    declaration_any <declaration_set_t> (93)
        on left: 2 3 4
        on right: 1 3 4
    generic-decl <generic_declaration_t> (94)
        on left: 5 6 7 8 9 10 11 12 13
        on right: 4
    let-decl <let_statement_decl_t> (95)
        on left: 14 15
        on right: 12 23
    let-decl-start <let_statement_decl_t> (96)
        on left: 16 17
        on right: 18 19
    let-decl-start-with-opt-type <let_statement_decl_t> (97)
        on left: 18 19
        on right: 14 15
    infunction_declaration_any <std::vector<infunction_declaration_t>> (98)
        on left: 20 21 22
        on right: 21 22 30 31 77 78
    opt-infunction-decl <infunction_declaration_t> (99)
        on left: 23 24 25
        on right: 22
    identifier <sonia::lang::bang::annotated_identifier> (100)
        on left: 26
        on right: 5 16 17 27 28 29 37 47 73 81 82 94
    qname <sonia::lang::bang::annotated_qname> (101)
        on left: 27 28 29
        on right: 6 7 29 30 31 32 38 41 42 60 74
    fn-decl <fn_decl_t> (102)
        on left: 30 31
        on right: 11
    enum-decl <enum_decl> (103)
        on left: 32
        on right: 9
    case-list-opt <std::vector<sonia::lang::identifier>> (104)
        on left: 33 34
        on right: 32
    case-list <std::vector<sonia::lang::identifier>> (105)
        on left: 35 36
        on right: 34 36
    case-decl <sonia::lang::identifier> (106)
        on left: 37
        on right: 35 36
    type-decl <type_decl> (107)
        on left: 38
        on right: 10
    type-extension-any <extension_list_t> (108)
        on left: 39 40
        on right: 38
    type-extension-list <extension_list_t> (109)
        on left: 41 42
        on right: 40 42
    parameter-list-opt <parameter_list_t> (110)
        on left: 43 44
        on right: 62
    parameter-list <parameter_list_t> (111)
        on left: 45 46
        on right: 44 46
    parameter-decl <parameter_t> (112)
        on left: 47 48
        on right: 45 46 53 54
    parameter-woa-list-opt <parameter_woa_list_t> (113)
        on left: 49 50
        on right: 6 7 30 31 38 77 78
    parameter-woa-list <parameter_woa_list_t> (114)
        on left: 51 52
        on right: 50 52
    parameter-woa-decl <parameter_woa_t> (115)
        on left: 53 54
        on right: 51 52
    type-expr <bang_preliminary_type> (116)
        on left: 55 56 57 58 59 60 61 62 63 64 65
        on right: 5 7 19 31 47 48 61 63 64 65 78
    compound-expression <expression_t> (117)
        on left: 66 67
        on right: 13 25 86
    expression <expression_t> (118)
        on left: 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86
        on right: 15 24 54 66 67 76 80 81 82 83 84 85 88 89 94 95
    expression-list-any <expression_list_t> (119)
        on left: 87 88 89
        on right: 79 89
    opt-named-expr-list-any <named_expression_term_list_t> (120)
        on left: 90 91
        on right: 66
    opt-named-expr-list <named_expression_term_list_t> (121)
        on left: 92 93
        on right: 91 93
    opt-named-expr <named_expression_term_t> (122)
        on left: 94 95
        on right: 92 93


State 0

    0 $accept: . begin "end of file"

    $default  reduce using rule 2 (declaration_any)

    begin            go to state 1
    declaration_any  go to state 2


State 1

    0 $accept: begin . "end of file"

    "end of file"  shift, and go to state 3


State 2

    1 begin: declaration_any . "end of file"
    3 declaration_any: declaration_any . "`;`"
    4                | declaration_any . generic-decl

    "end of file"  shift, and go to state 4
    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`;`"          shift, and go to state 12
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    LET            shift, and go to state 15
    EXTERN         shift, and go to state 16
    DBLCOLON       shift, and go to state 17
    INCLUDE        shift, and go to state 18
    FN             shift, and go to state 19
    ENUM           shift, and go to state 20
    TYPE           shift, and go to state 21
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    generic-decl                  go to state 24
    let-decl                      go to state 25
    let-decl-start                go to state 26
    let-decl-start-with-opt-type  go to state 27
    identifier                    go to state 28
    qname                         go to state 29
    fn-decl                       go to state 30
    enum-decl                     go to state 31
    type-decl                     go to state 32
    compound-expression           go to state 33
    expression                    go to state 34


State 3

    0 $accept: begin "end of file" .

    $default  accept


State 4

    1 begin: declaration_any "end of file" .

    $default  reduce using rule 1 (begin)


State 5

   72 expression: STRING .

    $default  reduce using rule 72 (expression)


State 6

   26 identifier: IDENTIFIER .

    $default  reduce using rule 26 (identifier)


State 7

   75 expression: ARGIDENTIFIER .

    $default  reduce using rule 75 (expression)


State 8

   70 expression: INTEGER .

    $default  reduce using rule 70 (expression)


State 9

   71 expression: DECIMAL .

    $default  reduce using rule 71 (expression)


State 10

   76 expression: "`(`" . expression "`)`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 37


State 11

   79 expression: "`[`" . expression-list-any "`]`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    $default  reduce using rule 87 (expression-list-any)

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 38
    expression-list-any  go to state 39


State 12

    3 declaration_any: declaration_any "`;`" .

    $default  reduce using rule 3 (declaration_any)


State 13

   73 expression: "`.`" . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 40


State 14

   80 expression: "`!`" . expression

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 41


State 15

   16 let-decl-start: LET . identifier
   17               | LET . "weak modifier" identifier

    IDENTIFIER       shift, and go to state 6
    "weak modifier"  shift, and go to state 42

    identifier  go to state 43


State 16

    5 generic-decl: EXTERN . VAR identifier "`:`" type-expr "`;`"
    6             | EXTERN . FN qname "`(`" parameter-woa-list-opt "`)`" "`;`"
    7             | EXTERN . FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`;`"

    VAR  shift, and go to state 44
    FN   shift, and go to state 45


State 17

   27 qname: DBLCOLON . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 46


State 18

    8 generic-decl: INCLUDE . STRING

    STRING  shift, and go to state 47


State 19

   30 fn-decl: FN . qname "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   31        | FN . qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"
   77 expression: FN . "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   78           | FN . "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    IDENTIFIER  shift, and go to state 6
    "`(`"       shift, and go to state 48
    DBLCOLON    shift, and go to state 17

    identifier  go to state 28
    qname       go to state 49


State 20

   32 enum-decl: ENUM . qname "`{`" case-list-opt "`}`"

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 17

    identifier  go to state 28
    qname       go to state 50


State 21

   38 type-decl: TYPE . qname type-extension-any "`{`" parameter-woa-list-opt "`}`"

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 17

    identifier  go to state 28
    qname       go to state 51


State 22

   68 expression: "true" .

    $default  reduce using rule 68 (expression)


State 23

   69 expression: "false" .

    $default  reduce using rule 69 (expression)


State 24

    4 declaration_any: declaration_any generic-decl .

    $default  reduce using rule 4 (declaration_any)


State 25

   12 generic-decl: let-decl .

    $default  reduce using rule 12 (generic-decl)


State 26

   18 let-decl-start-with-opt-type: let-decl-start .
   19                             | let-decl-start . "`:`" type-expr

    "`:`"  shift, and go to state 52

    $default  reduce using rule 18 (let-decl-start-with-opt-type)


State 27

   14 let-decl: let-decl-start-with-opt-type . "`;`"
   15         | let-decl-start-with-opt-type . "`=`" expression "`;`"

    "`=`"  shift, and go to state 53
    "`;`"  shift, and go to state 54


State 28

   28 qname: identifier .

    $default  reduce using rule 28 (qname)


State 29

   29 qname: qname . DBLCOLON identifier
   74 expression: qname .

    DBLCOLON  shift, and go to state 55

    $default  reduce using rule 74 (expression)


State 30

   11 generic-decl: fn-decl .

    $default  reduce using rule 11 (generic-decl)


State 31

    9 generic-decl: enum-decl .

    $default  reduce using rule 9 (generic-decl)


State 32

   10 generic-decl: type-decl .

    $default  reduce using rule 10 (generic-decl)


State 33

   13 generic-decl: compound-expression . "`;`"
   86 expression: compound-expression .

    "`;`"  shift, and go to state 56

    $default  reduce using rule 86 (expression)


State 34

   66 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   67                    | expression . "`=`" expression
   81 expression: expression . "`.`" identifier
   82           | expression . "`?`" "`.`" identifier
   83           | expression . "`&&`" expression
   84           | expression . "`||`" expression
   85           | expression . "`..`" expression

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`.`"   shift, and go to state 62
    "`?`"   shift, and go to state 63


State 35

   77 expression: FN . "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   78           | FN . "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`(`"  shift, and go to state 48


State 36

   86 expression: compound-expression .

    $default  reduce using rule 86 (expression)


State 37

   66 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   67                    | expression . "`=`" expression
   76 expression: "`(`" expression . "`)`"
   81           | expression . "`.`" identifier
   82           | expression . "`?`" "`.`" identifier
   83           | expression . "`&&`" expression
   84           | expression . "`||`" expression
   85           | expression . "`..`" expression

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`)`"   shift, and go to state 64
    "`.`"   shift, and go to state 62
    "`?`"   shift, and go to state 63


State 38

   66 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   67                    | expression . "`=`" expression
   81 expression: expression . "`.`" identifier
   82           | expression . "`?`" "`.`" identifier
   83           | expression . "`&&`" expression
   84           | expression . "`||`" expression
   85           | expression . "`..`" expression
   88 expression-list-any: expression .

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`.`"   shift, and go to state 62
    "`?`"   shift, and go to state 63

    $default  reduce using rule 88 (expression-list-any)


State 39

   79 expression: "`[`" expression-list-any . "`]`"
   89 expression-list-any: expression-list-any . "," expression

    "`]`"  shift, and go to state 65
    ","    shift, and go to state 66


State 40

   73 expression: "`.`" identifier .

    $default  reduce using rule 73 (expression)


State 41

   66 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   67                    | expression . "`=`" expression
   80 expression: "`!`" expression .
   81           | expression . "`.`" identifier
   82           | expression . "`?`" "`.`" identifier
   83           | expression . "`&&`" expression
   84           | expression . "`||`" expression
   85           | expression . "`..`" expression

    "`(`"  shift, and go to state 61
    "`.`"  shift, and go to state 62
    "`?`"  shift, and go to state 63

    $default  reduce using rule 80 (expression)


State 42

   17 let-decl-start: LET "weak modifier" . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 67


State 43

   16 let-decl-start: LET identifier .

    $default  reduce using rule 16 (let-decl-start)


State 44

    5 generic-decl: EXTERN VAR . identifier "`:`" type-expr "`;`"

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 68


State 45

    6 generic-decl: EXTERN FN . qname "`(`" parameter-woa-list-opt "`)`" "`;`"
    7             | EXTERN FN . qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`;`"

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 17

    identifier  go to state 28
    qname       go to state 69


State 46

   27 qname: DBLCOLON identifier .

    $default  reduce using rule 27 (qname)


State 47

    8 generic-decl: INCLUDE STRING .

    $default  reduce using rule 8 (generic-decl)


State 48

   77 expression: FN "`(`" . parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   78           | FN "`(`" . parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 70
    "`[`"         shift, and go to state 71
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 72
    INT           shift, and go to state 73
    FLOAT         shift, and go to state 74
    STRING_WORD   shift, and go to state 75
    DECIMAL_WORD  shift, and go to state 76

    $default  reduce using rule 49 (parameter-woa-list-opt)

    identifier              go to state 77
    qname                   go to state 78
    parameter-decl          go to state 79
    parameter-woa-list-opt  go to state 80
    parameter-woa-list      go to state 81
    parameter-woa-decl      go to state 82
    type-expr               go to state 83


State 49

   29 qname: qname . DBLCOLON identifier
   30 fn-decl: FN qname . "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   31        | FN qname . "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`(`"     shift, and go to state 84
    DBLCOLON  shift, and go to state 55


State 50

   29 qname: qname . DBLCOLON identifier
   32 enum-decl: ENUM qname . "`{`" case-list-opt "`}`"

    "`{`"     shift, and go to state 85
    DBLCOLON  shift, and go to state 55


State 51

   29 qname: qname . DBLCOLON identifier
   38 type-decl: TYPE qname . type-extension-any "`{`" parameter-woa-list-opt "`}`"

    DBLCOLON  shift, and go to state 55
    EXTENDS   shift, and go to state 86

    $default  reduce using rule 39 (type-extension-any)

    type-extension-any  go to state 87


State 52

   19 let-decl-start-with-opt-type: let-decl-start "`:`" . type-expr

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 70
    "`[`"         shift, and go to state 71
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 72
    INT           shift, and go to state 73
    FLOAT         shift, and go to state 74
    STRING_WORD   shift, and go to state 75
    DECIMAL_WORD  shift, and go to state 76

    identifier  go to state 28
    qname       go to state 78
    type-expr   go to state 88


State 53

   15 let-decl: let-decl-start-with-opt-type "`=`" . expression "`;`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 89


State 54

   14 let-decl: let-decl-start-with-opt-type "`;`" .

    $default  reduce using rule 14 (let-decl)


State 55

   29 qname: qname DBLCOLON . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 90


State 56

   13 generic-decl: compound-expression "`;`" .

    $default  reduce using rule 13 (generic-decl)


State 57

   67 compound-expression: expression "`=`" . expression

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 91


State 58

   83 expression: expression "`&&`" . expression

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 92


State 59

   84 expression: expression "`||`" . expression

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 93


State 60

   85 expression: expression "`..`" . expression

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 94


State 61

   66 compound-expression: expression "`(`" . opt-named-expr-list-any "`)`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    $default  reduce using rule 90 (opt-named-expr-list-any)

    identifier               go to state 95
    qname                    go to state 29
    compound-expression      go to state 36
    expression               go to state 96
    opt-named-expr-list-any  go to state 97
    opt-named-expr-list      go to state 98
    opt-named-expr           go to state 99


State 62

   81 expression: expression "`.`" . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 100


State 63

   82 expression: expression "`?`" . "`.`" identifier

    "`.`"  shift, and go to state 101


State 64

   76 expression: "`(`" expression "`)`" .

    $default  reduce using rule 76 (expression)


State 65

   79 expression: "`[`" expression-list-any "`]`" .

    $default  reduce using rule 79 (expression)


State 66

   89 expression-list-any: expression-list-any "," . expression

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 102


State 67

   17 let-decl-start: LET "weak modifier" identifier .

    $default  reduce using rule 17 (let-decl-start)


State 68

    5 generic-decl: EXTERN VAR identifier . "`:`" type-expr "`;`"

    "`:`"  shift, and go to state 103


State 69

    6 generic-decl: EXTERN FN qname . "`(`" parameter-woa-list-opt "`)`" "`;`"
    7             | EXTERN FN qname . "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`;`"
   29 qname: qname . DBLCOLON identifier

    "`(`"     shift, and go to state 104
    DBLCOLON  shift, and go to state 55


State 70

   62 type-expr: "`(`" . parameter-list-opt "`)`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 70
    "`[`"         shift, and go to state 71
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 72
    INT           shift, and go to state 73
    FLOAT         shift, and go to state 74
    STRING_WORD   shift, and go to state 75
    DECIMAL_WORD  shift, and go to state 76

    $default  reduce using rule 43 (parameter-list-opt)

    identifier          go to state 77
    qname               go to state 78
    parameter-list-opt  go to state 105
    parameter-list      go to state 106
    parameter-decl      go to state 107
    type-expr           go to state 83


State 71

   61 type-expr: "`[`" . type-expr "`]`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 70
    "`[`"         shift, and go to state 71
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 72
    INT           shift, and go to state 73
    FLOAT         shift, and go to state 74
    STRING_WORD   shift, and go to state 75
    DECIMAL_WORD  shift, and go to state 76

    identifier  go to state 28
    qname       go to state 78
    type-expr   go to state 108


State 72

   55 type-expr: BOOL .

    $default  reduce using rule 55 (type-expr)


State 73

   56 type-expr: INT .

    $default  reduce using rule 56 (type-expr)


State 74

   57 type-expr: FLOAT .

    $default  reduce using rule 57 (type-expr)


State 75

   58 type-expr: STRING_WORD .

    $default  reduce using rule 58 (type-expr)


State 76

   59 type-expr: DECIMAL_WORD .

    $default  reduce using rule 59 (type-expr)


State 77

   28 qname: identifier .
   47 parameter-decl: identifier . "`:`" type-expr

    "`:`"  shift, and go to state 109

    $default  reduce using rule 28 (qname)


State 78

   29 qname: qname . DBLCOLON identifier
   60 type-expr: qname .

    DBLCOLON  shift, and go to state 55

    $default  reduce using rule 60 (type-expr)


State 79

   53 parameter-woa-decl: parameter-decl .
   54                   | parameter-decl . "`=`" expression

    "`=`"  shift, and go to state 110

    $default  reduce using rule 53 (parameter-woa-decl)


State 80

   77 expression: FN "`(`" parameter-woa-list-opt . "`)`" "`{`" infunction_declaration_any "`}`"
   78           | FN "`(`" parameter-woa-list-opt . "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`)`"  shift, and go to state 111


State 81

   50 parameter-woa-list-opt: parameter-woa-list .
   52 parameter-woa-list: parameter-woa-list . "," parameter-woa-decl

    ","  shift, and go to state 112

    $default  reduce using rule 50 (parameter-woa-list-opt)


State 82

   51 parameter-woa-list: parameter-woa-decl .

    $default  reduce using rule 51 (parameter-woa-list)


State 83

   48 parameter-decl: type-expr .
   63 type-expr: type-expr . "`[`" INTEGER "`]`"
   64          | type-expr . "`|`" type-expr
   65          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 113
    "`[`"   shift, and go to state 114
    "`|`"   shift, and go to state 115

    $default  reduce using rule 48 (parameter-decl)


State 84

   30 fn-decl: FN qname "`(`" . parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   31        | FN qname "`(`" . parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 70
    "`[`"         shift, and go to state 71
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 72
    INT           shift, and go to state 73
    FLOAT         shift, and go to state 74
    STRING_WORD   shift, and go to state 75
    DECIMAL_WORD  shift, and go to state 76

    $default  reduce using rule 49 (parameter-woa-list-opt)

    identifier              go to state 77
    qname                   go to state 78
    parameter-decl          go to state 79
    parameter-woa-list-opt  go to state 116
    parameter-woa-list      go to state 81
    parameter-woa-decl      go to state 82
    type-expr               go to state 83


State 85

   32 enum-decl: ENUM qname "`{`" . case-list-opt "`}`"

    IDENTIFIER  shift, and go to state 6

    $default  reduce using rule 33 (case-list-opt)

    identifier     go to state 117
    case-list-opt  go to state 118
    case-list      go to state 119
    case-decl      go to state 120


State 86

   40 type-extension-any: EXTENDS . type-extension-list

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 17

    identifier           go to state 28
    qname                go to state 121
    type-extension-list  go to state 122


State 87

   38 type-decl: TYPE qname type-extension-any . "`{`" parameter-woa-list-opt "`}`"

    "`{`"  shift, and go to state 123


State 88

   19 let-decl-start-with-opt-type: let-decl-start "`:`" type-expr .
   63 type-expr: type-expr . "`[`" INTEGER "`]`"
   64          | type-expr . "`|`" type-expr
   65          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 113
    "`[`"   shift, and go to state 114
    "`|`"   shift, and go to state 115

    $default  reduce using rule 19 (let-decl-start-with-opt-type)


State 89

   15 let-decl: let-decl-start-with-opt-type "`=`" expression . "`;`"
   66 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   67                    | expression . "`=`" expression
   81 expression: expression . "`.`" identifier
   82           | expression . "`?`" "`.`" identifier
   83           | expression . "`&&`" expression
   84           | expression . "`||`" expression
   85           | expression . "`..`" expression

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`;`"   shift, and go to state 124
    "`.`"   shift, and go to state 62
    "`?`"   shift, and go to state 63


State 90

   29 qname: qname DBLCOLON identifier .

    $default  reduce using rule 29 (qname)


State 91

   66 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   67                    | expression . "`=`" expression
   67                    | expression "`=`" expression .
   81 expression: expression . "`.`" identifier
   82           | expression . "`?`" "`.`" identifier
   83           | expression . "`&&`" expression
   84           | expression . "`||`" expression
   85           | expression . "`..`" expression

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`.`"   shift, and go to state 62
    "`?`"   shift, and go to state 63

    $default  reduce using rule 67 (compound-expression)


State 92

   66 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   67                    | expression . "`=`" expression
   81 expression: expression . "`.`" identifier
   82           | expression . "`?`" "`.`" identifier
   83           | expression . "`&&`" expression
   83           | expression "`&&`" expression .
   84           | expression . "`||`" expression
   85           | expression . "`..`" expression

    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`.`"   shift, and go to state 62
    "`?`"   shift, and go to state 63

    $default  reduce using rule 83 (expression)


State 93

   66 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   67                    | expression . "`=`" expression
   81 expression: expression . "`.`" identifier
   82           | expression . "`?`" "`.`" identifier
   83           | expression . "`&&`" expression
   84           | expression . "`||`" expression
   84           | expression "`||`" expression .
   85           | expression . "`..`" expression

    "`&&`"  shift, and go to state 58
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`.`"   shift, and go to state 62
    "`?`"   shift, and go to state 63

    $default  reduce using rule 84 (expression)


State 94

   66 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   67                    | expression . "`=`" expression
   81 expression: expression . "`.`" identifier
   82           | expression . "`?`" "`.`" identifier
   83           | expression . "`&&`" expression
   84           | expression . "`||`" expression
   85           | expression . "`..`" expression
   85           | expression "`..`" expression .

    "`(`"  shift, and go to state 61
    "`.`"  shift, and go to state 62
    "`?`"  shift, and go to state 63

    $default  reduce using rule 85 (expression)


State 95

   28 qname: identifier .
   94 opt-named-expr: identifier . "`:`" expression

    "`:`"  shift, and go to state 125

    $default  reduce using rule 28 (qname)


State 96

   66 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   67                    | expression . "`=`" expression
   81 expression: expression . "`.`" identifier
   82           | expression . "`?`" "`.`" identifier
   83           | expression . "`&&`" expression
   84           | expression . "`||`" expression
   85           | expression . "`..`" expression
   95 opt-named-expr: expression .

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`.`"   shift, and go to state 62
    "`?`"   shift, and go to state 63

    $default  reduce using rule 95 (opt-named-expr)


State 97

   66 compound-expression: expression "`(`" opt-named-expr-list-any . "`)`"

    "`)`"  shift, and go to state 126


State 98

   91 opt-named-expr-list-any: opt-named-expr-list .
   93 opt-named-expr-list: opt-named-expr-list . "," opt-named-expr

    ","  shift, and go to state 127

    $default  reduce using rule 91 (opt-named-expr-list-any)


State 99

   92 opt-named-expr-list: opt-named-expr .

    $default  reduce using rule 92 (opt-named-expr-list)


State 100

   81 expression: expression "`.`" identifier .

    $default  reduce using rule 81 (expression)


State 101

   82 expression: expression "`?`" "`.`" . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 128


State 102

   66 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   67                    | expression . "`=`" expression
   81 expression: expression . "`.`" identifier
   82           | expression . "`?`" "`.`" identifier
   83           | expression . "`&&`" expression
   84           | expression . "`||`" expression
   85           | expression . "`..`" expression
   89 expression-list-any: expression-list-any "," expression .

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`.`"   shift, and go to state 62
    "`?`"   shift, and go to state 63

    $default  reduce using rule 89 (expression-list-any)


State 103

    5 generic-decl: EXTERN VAR identifier "`:`" . type-expr "`;`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 70
    "`[`"         shift, and go to state 71
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 72
    INT           shift, and go to state 73
    FLOAT         shift, and go to state 74
    STRING_WORD   shift, and go to state 75
    DECIMAL_WORD  shift, and go to state 76

    identifier  go to state 28
    qname       go to state 78
    type-expr   go to state 129


State 104

    6 generic-decl: EXTERN FN qname "`(`" . parameter-woa-list-opt "`)`" "`;`"
    7             | EXTERN FN qname "`(`" . parameter-woa-list-opt "`)`" "`->`" type-expr "`;`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 70
    "`[`"         shift, and go to state 71
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 72
    INT           shift, and go to state 73
    FLOAT         shift, and go to state 74
    STRING_WORD   shift, and go to state 75
    DECIMAL_WORD  shift, and go to state 76

    $default  reduce using rule 49 (parameter-woa-list-opt)

    identifier              go to state 77
    qname                   go to state 78
    parameter-decl          go to state 79
    parameter-woa-list-opt  go to state 130
    parameter-woa-list      go to state 81
    parameter-woa-decl      go to state 82
    type-expr               go to state 83


State 105

   62 type-expr: "`(`" parameter-list-opt . "`)`"

    "`)`"  shift, and go to state 131


State 106

   44 parameter-list-opt: parameter-list .
   46 parameter-list: parameter-list . "," parameter-decl

    ","  shift, and go to state 132

    $default  reduce using rule 44 (parameter-list-opt)


State 107

   45 parameter-list: parameter-decl .

    $default  reduce using rule 45 (parameter-list)


State 108

   61 type-expr: "`[`" type-expr . "`]`"
   63          | type-expr . "`[`" INTEGER "`]`"
   64          | type-expr . "`|`" type-expr
   65          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 113
    "`[`"   shift, and go to state 114
    "`]`"   shift, and go to state 133
    "`|`"   shift, and go to state 115


State 109

   47 parameter-decl: identifier "`:`" . type-expr

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 70
    "`[`"         shift, and go to state 71
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 72
    INT           shift, and go to state 73
    FLOAT         shift, and go to state 74
    STRING_WORD   shift, and go to state 75
    DECIMAL_WORD  shift, and go to state 76

    identifier  go to state 28
    qname       go to state 78
    type-expr   go to state 134


State 110

   54 parameter-woa-decl: parameter-decl "`=`" . expression

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 135


State 111

   77 expression: FN "`(`" parameter-woa-list-opt "`)`" . "`{`" infunction_declaration_any "`}`"
   78           | FN "`(`" parameter-woa-list-opt "`)`" . "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`->`"  shift, and go to state 136
    "`{`"   shift, and go to state 137


State 112

   52 parameter-woa-list: parameter-woa-list "," . parameter-woa-decl

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 70
    "`[`"         shift, and go to state 71
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 72
    INT           shift, and go to state 73
    FLOAT         shift, and go to state 74
    STRING_WORD   shift, and go to state 75
    DECIMAL_WORD  shift, and go to state 76

    identifier          go to state 77
    qname               go to state 78
    parameter-decl      go to state 79
    parameter-woa-decl  go to state 138
    type-expr           go to state 83


State 113

   65 type-expr: type-expr "`->`" . type-expr

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 70
    "`[`"         shift, and go to state 71
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 72
    INT           shift, and go to state 73
    FLOAT         shift, and go to state 74
    STRING_WORD   shift, and go to state 75
    DECIMAL_WORD  shift, and go to state 76

    identifier  go to state 28
    qname       go to state 78
    type-expr   go to state 139


State 114

   63 type-expr: type-expr "`[`" . INTEGER "`]`"

    INTEGER  shift, and go to state 140


State 115

   64 type-expr: type-expr "`|`" . type-expr

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 70
    "`[`"         shift, and go to state 71
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 72
    INT           shift, and go to state 73
    FLOAT         shift, and go to state 74
    STRING_WORD   shift, and go to state 75
    DECIMAL_WORD  shift, and go to state 76

    identifier  go to state 28
    qname       go to state 78
    type-expr   go to state 141


State 116

   30 fn-decl: FN qname "`(`" parameter-woa-list-opt . "`)`" "`{`" infunction_declaration_any "`}`"
   31        | FN qname "`(`" parameter-woa-list-opt . "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`)`"  shift, and go to state 142


State 117

   37 case-decl: identifier .

    $default  reduce using rule 37 (case-decl)


State 118

   32 enum-decl: ENUM qname "`{`" case-list-opt . "`}`"

    "`}`"  shift, and go to state 143


State 119

   34 case-list-opt: case-list .
   36 case-list: case-list . "," case-decl

    ","  shift, and go to state 144

    $default  reduce using rule 34 (case-list-opt)


State 120

   35 case-list: case-decl .

    $default  reduce using rule 35 (case-list)


State 121

   29 qname: qname . DBLCOLON identifier
   41 type-extension-list: qname .

    DBLCOLON  shift, and go to state 55

    $default  reduce using rule 41 (type-extension-list)


State 122

   40 type-extension-any: EXTENDS type-extension-list .
   42 type-extension-list: type-extension-list . "," qname

    ","  shift, and go to state 145

    $default  reduce using rule 40 (type-extension-any)


State 123

   38 type-decl: TYPE qname type-extension-any "`{`" . parameter-woa-list-opt "`}`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 70
    "`[`"         shift, and go to state 71
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 72
    INT           shift, and go to state 73
    FLOAT         shift, and go to state 74
    STRING_WORD   shift, and go to state 75
    DECIMAL_WORD  shift, and go to state 76

    $default  reduce using rule 49 (parameter-woa-list-opt)

    identifier              go to state 77
    qname                   go to state 78
    parameter-decl          go to state 79
    parameter-woa-list-opt  go to state 146
    parameter-woa-list      go to state 81
    parameter-woa-decl      go to state 82
    type-expr               go to state 83


State 124

   15 let-decl: let-decl-start-with-opt-type "`=`" expression "`;`" .

    $default  reduce using rule 15 (let-decl)


State 125

   94 opt-named-expr: identifier "`:`" . expression

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 147


State 126

   66 compound-expression: expression "`(`" opt-named-expr-list-any "`)`" .

    $default  reduce using rule 66 (compound-expression)


State 127

   93 opt-named-expr-list: opt-named-expr-list "," . opt-named-expr

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    identifier           go to state 95
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 96
    opt-named-expr       go to state 148


State 128

   82 expression: expression "`?`" "`.`" identifier .

    $default  reduce using rule 82 (expression)


State 129

    5 generic-decl: EXTERN VAR identifier "`:`" type-expr . "`;`"
   63 type-expr: type-expr . "`[`" INTEGER "`]`"
   64          | type-expr . "`|`" type-expr
   65          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 113
    "`[`"   shift, and go to state 114
    "`;`"   shift, and go to state 149
    "`|`"   shift, and go to state 115


State 130

    6 generic-decl: EXTERN FN qname "`(`" parameter-woa-list-opt . "`)`" "`;`"
    7             | EXTERN FN qname "`(`" parameter-woa-list-opt . "`)`" "`->`" type-expr "`;`"

    "`)`"  shift, and go to state 150


State 131

   62 type-expr: "`(`" parameter-list-opt "`)`" .

    $default  reduce using rule 62 (type-expr)


State 132

   46 parameter-list: parameter-list "," . parameter-decl

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 70
    "`[`"         shift, and go to state 71
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 72
    INT           shift, and go to state 73
    FLOAT         shift, and go to state 74
    STRING_WORD   shift, and go to state 75
    DECIMAL_WORD  shift, and go to state 76

    identifier      go to state 77
    qname           go to state 78
    parameter-decl  go to state 151
    type-expr       go to state 83


State 133

   61 type-expr: "`[`" type-expr "`]`" .

    $default  reduce using rule 61 (type-expr)


State 134

   47 parameter-decl: identifier "`:`" type-expr .
   63 type-expr: type-expr . "`[`" INTEGER "`]`"
   64          | type-expr . "`|`" type-expr
   65          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 113
    "`[`"   shift, and go to state 114
    "`|`"   shift, and go to state 115

    $default  reduce using rule 47 (parameter-decl)


State 135

   54 parameter-woa-decl: parameter-decl "`=`" expression .
   66 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   67                    | expression . "`=`" expression
   81 expression: expression . "`.`" identifier
   82           | expression . "`?`" "`.`" identifier
   83           | expression . "`&&`" expression
   84           | expression . "`||`" expression
   85           | expression . "`..`" expression

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`.`"   shift, and go to state 62
    "`?`"   shift, and go to state 63

    $default  reduce using rule 54 (parameter-woa-decl)


State 136

   78 expression: FN "`(`" parameter-woa-list-opt "`)`" "`->`" . type-expr "`{`" infunction_declaration_any "`}`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 70
    "`[`"         shift, and go to state 71
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 72
    INT           shift, and go to state 73
    FLOAT         shift, and go to state 74
    STRING_WORD   shift, and go to state 75
    DECIMAL_WORD  shift, and go to state 76

    identifier  go to state 28
    qname       go to state 78
    type-expr   go to state 152


State 137

   77 expression: FN "`(`" parameter-woa-list-opt "`)`" "`{`" . infunction_declaration_any "`}`"

    $default  reduce using rule 20 (infunction_declaration_any)

    infunction_declaration_any  go to state 153


State 138

   52 parameter-woa-list: parameter-woa-list "," parameter-woa-decl .

    $default  reduce using rule 52 (parameter-woa-list)


State 139

   63 type-expr: type-expr . "`[`" INTEGER "`]`"
   64          | type-expr . "`|`" type-expr
   65          | type-expr . "`->`" type-expr
   65          | type-expr "`->`" type-expr .

    $default  reduce using rule 65 (type-expr)


State 140

   63 type-expr: type-expr "`[`" INTEGER . "`]`"

    "`]`"  shift, and go to state 154


State 141

   63 type-expr: type-expr . "`[`" INTEGER "`]`"
   64          | type-expr . "`|`" type-expr
   64          | type-expr "`|`" type-expr .
   65          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 113
    "`[`"   shift, and go to state 114

    $default  reduce using rule 64 (type-expr)


State 142

   30 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" . "`{`" infunction_declaration_any "`}`"
   31        | FN qname "`(`" parameter-woa-list-opt "`)`" . "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`->`"  shift, and go to state 155
    "`{`"   shift, and go to state 156


State 143

   32 enum-decl: ENUM qname "`{`" case-list-opt "`}`" .

    $default  reduce using rule 32 (enum-decl)


State 144

   36 case-list: case-list "," . case-decl

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 117
    case-decl   go to state 157


State 145

   42 type-extension-list: type-extension-list "," . qname

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 17

    identifier  go to state 28
    qname       go to state 158


State 146

   38 type-decl: TYPE qname type-extension-any "`{`" parameter-woa-list-opt . "`}`"

    "`}`"  shift, and go to state 159


State 147

   66 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   67                    | expression . "`=`" expression
   81 expression: expression . "`.`" identifier
   82           | expression . "`?`" "`.`" identifier
   83           | expression . "`&&`" expression
   84           | expression . "`||`" expression
   85           | expression . "`..`" expression
   94 opt-named-expr: identifier "`:`" expression .

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`.`"   shift, and go to state 62
    "`?`"   shift, and go to state 63

    $default  reduce using rule 94 (opt-named-expr)


State 148

   93 opt-named-expr-list: opt-named-expr-list "," opt-named-expr .

    $default  reduce using rule 93 (opt-named-expr-list)


State 149

    5 generic-decl: EXTERN VAR identifier "`:`" type-expr "`;`" .

    $default  reduce using rule 5 (generic-decl)


State 150

    6 generic-decl: EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" . "`;`"
    7             | EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" . "`->`" type-expr "`;`"

    "`->`"  shift, and go to state 160
    "`;`"   shift, and go to state 161


State 151

   46 parameter-list: parameter-list "," parameter-decl .

    $default  reduce using rule 46 (parameter-list)


State 152

   63 type-expr: type-expr . "`[`" INTEGER "`]`"
   64          | type-expr . "`|`" type-expr
   65          | type-expr . "`->`" type-expr
   78 expression: FN "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr . "`{`" infunction_declaration_any "`}`"

    "`->`"  shift, and go to state 113
    "`{`"   shift, and go to state 162
    "`[`"   shift, and go to state 114
    "`|`"   shift, and go to state 115


State 153

   21 infunction_declaration_any: infunction_declaration_any . "`;`"
   22                           | infunction_declaration_any . opt-infunction-decl
   77 expression: FN "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any . "`}`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`}`"          shift, and go to state 163
    "`[`"          shift, and go to state 11
    "`;`"          shift, and go to state 164
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    LET            shift, and go to state 15
    RETURN         shift, and go to state 165
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    let-decl                      go to state 166
    let-decl-start                go to state 26
    let-decl-start-with-opt-type  go to state 27
    opt-infunction-decl           go to state 167
    identifier                    go to state 28
    qname                         go to state 29
    compound-expression           go to state 168
    expression                    go to state 34


State 154

   63 type-expr: type-expr "`[`" INTEGER "`]`" .

    $default  reduce using rule 63 (type-expr)


State 155

   31 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" . type-expr "`{`" infunction_declaration_any "`}`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 70
    "`[`"         shift, and go to state 71
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 72
    INT           shift, and go to state 73
    FLOAT         shift, and go to state 74
    STRING_WORD   shift, and go to state 75
    DECIMAL_WORD  shift, and go to state 76

    identifier  go to state 28
    qname       go to state 78
    type-expr   go to state 169


State 156

   30 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`{`" . infunction_declaration_any "`}`"

    $default  reduce using rule 20 (infunction_declaration_any)

    infunction_declaration_any  go to state 170


State 157

   36 case-list: case-list "," case-decl .

    $default  reduce using rule 36 (case-list)


State 158

   29 qname: qname . DBLCOLON identifier
   42 type-extension-list: type-extension-list "," qname .

    DBLCOLON  shift, and go to state 55

    $default  reduce using rule 42 (type-extension-list)


State 159

   38 type-decl: TYPE qname type-extension-any "`{`" parameter-woa-list-opt "`}`" .

    $default  reduce using rule 38 (type-decl)


State 160

    7 generic-decl: EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" . type-expr "`;`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 70
    "`[`"         shift, and go to state 71
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 72
    INT           shift, and go to state 73
    FLOAT         shift, and go to state 74
    STRING_WORD   shift, and go to state 75
    DECIMAL_WORD  shift, and go to state 76

    identifier  go to state 28
    qname       go to state 78
    type-expr   go to state 171


State 161

    6 generic-decl: EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" "`;`" .

    $default  reduce using rule 6 (generic-decl)


State 162

   78 expression: FN "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" . infunction_declaration_any "`}`"

    $default  reduce using rule 20 (infunction_declaration_any)

    infunction_declaration_any  go to state 172


State 163

   77 expression: FN "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`" .

    $default  reduce using rule 77 (expression)


State 164

   21 infunction_declaration_any: infunction_declaration_any "`;`" .

    $default  reduce using rule 21 (infunction_declaration_any)


State 165

   24 opt-infunction-decl: RETURN . expression "`;`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 173


State 166

   23 opt-infunction-decl: let-decl .

    $default  reduce using rule 23 (opt-infunction-decl)


State 167

   22 infunction_declaration_any: infunction_declaration_any opt-infunction-decl .

    $default  reduce using rule 22 (infunction_declaration_any)


State 168

   25 opt-infunction-decl: compound-expression . "`;`"
   86 expression: compound-expression .

    "`;`"  shift, and go to state 174

    $default  reduce using rule 86 (expression)


State 169

   31 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr . "`{`" infunction_declaration_any "`}`"
   63 type-expr: type-expr . "`[`" INTEGER "`]`"
   64          | type-expr . "`|`" type-expr
   65          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 113
    "`{`"   shift, and go to state 175
    "`[`"   shift, and go to state 114
    "`|`"   shift, and go to state 115


State 170

   21 infunction_declaration_any: infunction_declaration_any . "`;`"
   22                           | infunction_declaration_any . opt-infunction-decl
   30 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any . "`}`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`}`"          shift, and go to state 176
    "`[`"          shift, and go to state 11
    "`;`"          shift, and go to state 164
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    LET            shift, and go to state 15
    RETURN         shift, and go to state 165
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    let-decl                      go to state 166
    let-decl-start                go to state 26
    let-decl-start-with-opt-type  go to state 27
    opt-infunction-decl           go to state 167
    identifier                    go to state 28
    qname                         go to state 29
    compound-expression           go to state 168
    expression                    go to state 34


State 171

    7 generic-decl: EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr . "`;`"
   63 type-expr: type-expr . "`[`" INTEGER "`]`"
   64          | type-expr . "`|`" type-expr
   65          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 113
    "`[`"   shift, and go to state 114
    "`;`"   shift, and go to state 177
    "`|`"   shift, and go to state 115


State 172

   21 infunction_declaration_any: infunction_declaration_any . "`;`"
   22                           | infunction_declaration_any . opt-infunction-decl
   78 expression: FN "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any . "`}`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`}`"          shift, and go to state 178
    "`[`"          shift, and go to state 11
    "`;`"          shift, and go to state 164
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    LET            shift, and go to state 15
    RETURN         shift, and go to state 165
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    let-decl                      go to state 166
    let-decl-start                go to state 26
    let-decl-start-with-opt-type  go to state 27
    opt-infunction-decl           go to state 167
    identifier                    go to state 28
    qname                         go to state 29
    compound-expression           go to state 168
    expression                    go to state 34


State 173

   24 opt-infunction-decl: RETURN expression . "`;`"
   66 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   67                    | expression . "`=`" expression
   81 expression: expression . "`.`" identifier
   82           | expression . "`?`" "`.`" identifier
   83           | expression . "`&&`" expression
   84           | expression . "`||`" expression
   85           | expression . "`..`" expression

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`;`"   shift, and go to state 179
    "`.`"   shift, and go to state 62
    "`?`"   shift, and go to state 63


State 174

   25 opt-infunction-decl: compound-expression "`;`" .

    $default  reduce using rule 25 (opt-infunction-decl)


State 175

   31 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" . infunction_declaration_any "`}`"

    $default  reduce using rule 20 (infunction_declaration_any)

    infunction_declaration_any  go to state 180


State 176

   30 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`" .

    $default  reduce using rule 30 (fn-decl)


State 177

    7 generic-decl: EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`;`" .

    $default  reduce using rule 7 (generic-decl)


State 178

   78 expression: FN "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`" .

    $default  reduce using rule 78 (expression)


State 179

   24 opt-infunction-decl: RETURN expression "`;`" .

    $default  reduce using rule 24 (opt-infunction-decl)


State 180

   21 infunction_declaration_any: infunction_declaration_any . "`;`"
   22                           | infunction_declaration_any . opt-infunction-decl
   31 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any . "`}`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`}`"          shift, and go to state 181
    "`[`"          shift, and go to state 11
    "`;`"          shift, and go to state 164
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    LET            shift, and go to state 15
    RETURN         shift, and go to state 165
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 35
    "true"         shift, and go to state 22
    "false"        shift, and go to state 23

    let-decl                      go to state 166
    let-decl-start                go to state 26
    let-decl-start-with-opt-type  go to state 27
    opt-infunction-decl           go to state 167
    identifier                    go to state 28
    qname                         go to state 29
    compound-expression           go to state 168
    expression                    go to state 34


State 181

   31 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`" .

    $default  reduce using rule 31 (fn-decl)
