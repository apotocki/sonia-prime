Terminals unused in grammar

    COMMENT_BEGIN
    COMMENT_END
    OPERATOR_TERM
    "`->*`"
    "`~>`"
    "`.*`"
    "`++`"
    "`--`"
    "`<<`"
    "`>>`"
    "`<=`"
    "`>=`"
    "`&&`"
    "`||`"
    "`..`"
    "`+=`"
    "`-=`"
    "`*=`"
    "`/=`"
    "`%=`"
    "`<<=`"
    "`>>=`"
    "`&=`"
    "`|=`"
    "`^=`"
    "`<`"
    "`>`"
    "`-`"
    "`*`"
    "`/`"
    "`%`"
    "`&`"
    "`~`"
    "`^`"
    "`$`"
    "`?`"
    "`#`"
    AUTO
    THROW
    SIZEOF
    LOWEST
    EXTENDS
    TYPENAME


Grammar

    0 $accept: begin "end of file"

    1 begin: statement_any "end of file"
    2      | finished-statement-any "end of file"

    3 statement_any: %empty
    4              | statement
    5              | finished-statement-any statement

    6 finished-statement-any: finished-statement
    7                       | finished-statement-any "`;`"
    8                       | finished-statement-any finished-statement
    9                       | statement_any "`;`"

   10 statement: EXTERN VAR identifier "`:`" type-expr
   11          | EXTERN "`fn`" fn-decl
   12          | INCLUDE STRING
   13          | fn-start-decl fn-decl "`=>`" syntax-expression
   14          | generic-statement
   15          | STRUCT struct-decl

   16 let-decl: let-decl-start-with-opt-type
   17         | let-decl-start-with-opt-type "`=`" syntax-expression

   18 let-decl-start: LET identifier
   19               | LET "weak modifier" identifier

   20 let-decl-start-with-opt-type: let-decl-start
   21                             | let-decl-start "`:`" type-expr

   22 infunction-statement-any: %empty
   23                         | infunction-statement
   24                         | finished-infunction-statement-any infunction-statement

   25 finished-infunction-statement-any: finished-statement
   26                                  | finished-infunction-statement-any "`;`"
   27                                  | finished-infunction-statement-any finished-statement
   28                                  | infunction-statement-any "`;`"

   29 braced-statements: "`{`" infunction-statement-set "`}`"

   30 finished-statement: "`while`" syntax-expression braced-statements
   31                   | "`while`" syntax-expression "`;`" syntax-expression braced-statements
   32                   | "`for`" syntax-expression "`in`" syntax-expression braced-statements
   33                   | "`if`" syntax-expression braced-statements
   34                   | "`if`" syntax-expression braced-statements "`else`" braced-statements
   35                   | fn-start-decl fn-decl braced-statements
   36                   | STRUCT qname braced-statements
   37                   | STRUCT qname "`(`" parameter-list-opt "`)`" braced-statements
   38                   | ENUM enum-decl

   39 infunction-statement-set: infunction-statement-any
   40                         | finished-infunction-statement-any

   41 generic-statement: let-decl
   42                  | USING using-decl
   43                  | "`return`" syntax-expression
   44                  | compound-expression
   45                  | syntax-expression "`=`" syntax-expression

   46 infunction-statement: generic-statement
   47                     | "`break`"
   48                     | "`continue`"

   49 identifier: IDENTIFIER

   50 internal-identifier: INTERNAL_IDENTIFIER

   51 qname: "`::`" identifier
   52      | identifier
   53      | qname "`::`" identifier

   54 fn-start-decl: "`fn`"
   55              | INLINE "`fn`"

   56 fn-name: qname
   57        | "`new`"

   58 fn-decl: fn-name "`(`" parameter-list-opt "`)`"
   59        | fn-name "`(`" parameter-list-opt "`)`" "`->`" type-expr

   60 enum-decl: qname "`{`" case-list-opt "`}`"

   61 case-list-opt: %empty
   62              | case-list

   63 case-list: case-decl
   64          | case-list "," case-decl

   65 case-decl: identifier

   66 struct-decl: qname "`=>`" "`(`" field-list-opt "`)`"
   67            | qname "`(`" parameter-list-opt "`)`" "`=>`" "`(`" field-list-opt "`)`"

   68 using-decl: qname "`=>`" syntax-expression
   69           | qname "`(`" parameter-list-opt "`)`" "`=>`" syntax-expression

   70 argument-list-opt: %empty
   71                  | argument-list

   72 argument-list: argument
   73              | argument-list "," argument

   74 argument: argument-name syntax-expression
   75         | syntax-expression

   76 argument-name: identifier "`=`"
   77              | identifier "`:`"

   78 field-list-opt: %empty
   79               | field-list

   80 field-list: field
   81           | field-list "," field

   82 field-default-value-opt: %empty
   83                        | "`=`" syntax-expression

   84 field: identifier "`:`" field-type-expr field-default-value-opt
   85      | identifier "`=>`" field-type-expr field-default-value-opt

   86 field-type-expr: qname
   87                | qname "`(`" argument-list-opt "`)`"
   88                | INTERNAL_IDENTIFIER
   89                | field-type-expr "`|`" field-type-expr

   90 parameter-list-opt: %empty
   91                   | parameter-list

   92 parameter-list: parameter-decl
   93               | parameter-list "," parameter-decl

   94 internal-identifier-opt: %empty
   95                        | internal-identifier

   96 parameter-default-value-opt: %empty
   97                            | "`=`" syntax-expression

   98 parameter-decl: identifier internal-identifier-opt "`:`" parameter-constraint-set parameter-default-value-opt
   99               | identifier internal-identifier-opt "`:`" "const modifier" parameter-constraint-set parameter-default-value-opt
  100               | identifier internal-identifier-opt "`:`" "mut modifier" parameter-constraint-set parameter-default-value-opt
  101               | identifier internal-identifier-opt "`=>`" parameter-value-constraint-set
  102               | INTERNAL_IDENTIFIER "`:`" parameter-constraint-set parameter-default-value-opt
  103               | INTERNAL_IDENTIFIER "`:`" "const modifier" parameter-constraint-set parameter-default-value-opt
  104               | INTERNAL_IDENTIFIER "`:`" "mut modifier" parameter-constraint-set parameter-default-value-opt
  105               | INTERNAL_IDENTIFIER "`=>`" parameter-value-constraint-set
  106               | INTERNAL_IDENTIFIER "`...`" "`:`" parameter-constraint-set
  107               | INTERNAL_IDENTIFIER "`...`" "`:`" "const modifier" parameter-constraint-set
  108               | INTERNAL_IDENTIFIER "`...`" "`:`" "mut modifier" parameter-constraint-set
  109               | parameter-constraint-set parameter-default-value-opt
  110               | "const modifier" parameter-constraint-set parameter-default-value-opt
  111               | "mut modifier" parameter-constraint-set parameter-default-value-opt
  112               | "`=>`" parameter-value-constraint-set

  113 parameter-constraint-set: parameter-matched-type
  114                         | concept-expression
  115                         | parameter-constraint-set concept-expression

  116 parameter-value-constraint-set: parameter-matched-value
  117                               | concept-expression
  118                               | parameter-value-constraint-set concept-expression

  119 parameter-matched-value: syntax-expression

  120 parameter-matched-type: basic-parameter-matched-type
  121                       | basic-parameter-matched-type "`...`"
  122                       | INTERNAL_IDENTIFIER
  123                       | INTERNAL_IDENTIFIER "`...`"

  124 basic-parameter-matched-type: "`_`"
  125                             | qname
  126                             | qname "`(`" argument-list-opt "`)`"
  127                             | basic-parameter-matched-type "`|`" basic-parameter-matched-type

  128 concept-expression: "`@`" qname

  129 syntax-expression: INTERNAL_IDENTIFIER
  130                  | syntax-expression-wo-ii

  131 syntax-expression-wo-ii: "nil"
  132                        | "true"
  133                        | "false"
  134                        | INTEGER
  135                        | DECIMAL
  136                        | DECIMAL_S
  137                        | INTEGER_INDEX
  138                        | STRING
  139                        | RESERVED_IDENTIFIER
  140                        | qname
  141                        | "`(`" argument-list "`)`"
  142                        | "`.`" identifier
  143                        | syntax-expression "`.`" identifier
  144                        | syntax-expression "`.`" apostrophe-expression
  145                        | syntax-expression INTEGER_INDEX
  146                        | "`!`" syntax-expression
  147                        | syntax-expression "`+`" syntax-expression
  148                        | syntax-expression "`==`" syntax-expression
  149                        | syntax-expression "`!=`" syntax-expression
  150                        | apostrophe-expression
  151                        | new-expression
  152                        | compound-expression
  153                        | lambda-expression

  154 apostrophe-expression: "APOSTROPHE" syntax-expression "APOSTROPHE"

  155 new-expression: "`new`" qname
  156               | "`new`" apostrophe-expression
  157               | "`new`" qname "`(`" argument-list-opt "`)`"
  158               | "`new`" apostrophe-expression "`(`" argument-list-opt "`)`"

  159 call-expression: qname "`(`" argument-list-opt "`)`"
  160                | call-expression "`(`" argument-list-opt "`)`"
  161                | apostrophe-expression "`(`" argument-list-opt "`)`"
  162                | lambda-expression "`(`" argument-list-opt "`)`"

  163 lambda-expression: fn-start-decl "`(`" parameter-list-opt "`)`" braced-statements
  164                  | fn-start-decl "`(`" parameter-list-opt "`)`" "`->`" type-expr braced-statements

  165 compound-expression: call-expression
  166                    | syntax-expression "`...`"

  167 type-expr: qname
  168          | call-expression
  169          | INTERNAL_IDENTIFIER
  170          | "`[`" type-expr "`]`"
  171          | "`(`" argument-list-opt "`)`"
  172          | type-expr "`[`" INTEGER "`]`"
  173          | type-expr "`|`" type-expr
  174          | type-expr "`->`" type-expr


Terminals, with rules where they appear

    "end of file" (0) 0 1 2
    error (256)
    COMMENT_BEGIN (258)
    COMMENT_END (259)
    STRING <sonia::lang::bang::annotated_string_view> (260) 12 138
    IDENTIFIER <sonia::lang::bang::annotated_string_view> (261) 49
    INTERNAL_IDENTIFIER <sonia::lang::bang::annotated_string_view> (262) 50 88 102 103 104 105 106 107 108 122 123 129 169
    RESERVED_IDENTIFIER <sonia::lang::bang::annotated_string_view> (263) 139
    INTEGER_INDEX <sonia::lang::bang::annotated_string_view> (264) 137 145
    INTEGER <sonia::lang::bang::annotated_integer> (265) 134 172
    DECIMAL <sonia::lang::bang::annotated_decimal> (266) 135
    DECIMAL_S <sonia::lang::bang::annotated_decimal> (267) 136
    OPERATOR_TERM <sonia::string_view> (268)
    "`=`" <sonia::lang::lex::resource_location> (269) 17 45 76 83 97
    "APOSTROPHE" (270) 154
    "`@`" (271) 128
    "`_`" <sonia::lang::lex::resource_location> (272) 124
    "`->*`" (273)
    "`->`" (274) 59 164 174
    "`=>`" (275) 13 66 67 68 69 85 101 105 112
    "`~>`" (276)
    "`.*`" (277)
    "`++`" (278)
    "`--`" (279)
    "`<<`" (280)
    "`>>`" (281)
    "`<=`" (282)
    "`>=`" (283)
    "`==`" <sonia::lang::lex::resource_location> (284) 148
    "`!=`" <sonia::lang::lex::resource_location> (285) 149
    "`&&`" <sonia::lang::lex::resource_location> (286)
    "`||`" <sonia::lang::lex::resource_location> (287)
    "`..`" <sonia::lang::lex::resource_location> (288)
    "`...`" <sonia::lang::lex::resource_location> (289) 106 107 108 121 123 166
    "`+=`" (290)
    "`-=`" (291)
    "`*=`" (292)
    "`/=`" (293)
    "`%=`" (294)
    "`<<=`" (295)
    "`>>=`" (296)
    "`&=`" (297)
    "`|=`" (298)
    "`^=`" (299)
    "`:`" (300) 10 21 77 84 98 99 100 102 103 104 106 107 108
    "`::`" (301) 51 53
    "`(`" <sonia::lang::lex::resource_location> (302) 37 58 59 66 67 69 87 126 141 157 158 159 160 161 162 163 164 171
    "`)`" (303) 37 58 59 66 67 69 87 126 141 157 158 159 160 161 162 163 164 171
    "`{`" <sonia::lang::lex::resource_location> (304) 29 60
    "`}`" (305) 29 60
    "`[`" <sonia::lang::lex::resource_location> (306) 170 172
    "`]`" (307) 170 172
    "`<`" (308)
    "`>`" (309)
    "`;`" (310) 7 9 26 28 31
    "`.`" <sonia::lang::lex::resource_location> (311) 142 143 144
    "`+`" <sonia::lang::lex::resource_location> (312) 147
    "`-`" (313)
    "`*`" (314)
    "`/`" (315)
    "`%`" (316)
    "`&`" (317)
    "`|`" <sonia::lang::lex::resource_location> (318) 89 127 173
    "`!`" <sonia::lang::lex::resource_location> (319) 146
    "`~`" (320)
    "`^`" (321)
    "," (322) 64 73 81 93
    "`$`" (323)
    "`?`" (324)
    "`#`" (325)
    LET (326) 18 19
    VAR (327) 10
    EXTERN (328) 10 11
    "`new`" <sonia::lang::lex::resource_location> (329) 57 155 156 157 158
    "`while`" (330) 30 31
    "`for`" (331) 32
    "`in`" (332) 32
    "`if`" (333) 33 34
    "`else`" (334) 34
    "`continue`" <sonia::lang::lex::resource_location> (335) 48
    "`break`" <sonia::lang::lex::resource_location> (336) 47
    "`return`" (337) 43
    AUTO (338)
    USING (339) 42
    THROW (340)
    SIZEOF (341)
    LOWEST (342)
    INCLUDE (343) 12
    INLINE (344) 55
    "`fn`" <sonia::lang::lex::resource_location> (345) 11 54 55
    ENUM (346) 38
    STRUCT (347) 15 36 37
    EXTENDS (348)
    TYPENAME (349)
    "weak modifier" (350) 19
    "const modifier" (351) 99 103 107 110
    "mut modifier" (352) 100 104 108 111
    "nil" <annotated_nil> (353) 131
    "true" <annotated_bool> (354) 132
    "false" <annotated_bool> (355) 133


Nonterminals, with rules where they appear

    $accept (101)
        on left: 0
    begin (102)
        on left: 1 2
        on right: 0
    statement_any <managed_statement_list> (103)
        on left: 3 4 5
        on right: 1 9
    finished-statement-any <managed_statement_list> (104)
        on left: 6 7 8 9
        on right: 2 5 7 8
    statement <statement> (105)
        on left: 10 11 12 13 14 15
        on right: 4 5
    let-decl <let_statement> (106)
        on left: 16 17
        on right: 41
    let-decl-start <let_statement> (107)
        on left: 18 19
        on right: 20 21
    let-decl-start-with-opt-type <let_statement> (108)
        on left: 20 21
        on right: 16 17
    infunction-statement-any <managed_statement_list> (109)
        on left: 22 23 24
        on right: 28 39
    finished-infunction-statement-any <managed_statement_list> (110)
        on left: 25 26 27 28
        on right: 24 26 27 40
    braced-statements <managed_statement_list> (111)
        on left: 29
        on right: 30 31 32 33 34 35 36 37 163 164
    finished-statement <finished_statement_type> (112)
        on left: 30 31 32 33 34 35 36 37 38
        on right: 6 8 25 27
    infunction-statement-set <managed_statement_list> (113)
        on left: 39 40
        on right: 29
    generic-statement <generic_statement_type> (114)
        on left: 41 42 43 44 45
        on right: 14 46
    infunction-statement <statement> (115)
        on left: 46 47 48
        on right: 23 24
    identifier <sonia::lang::bang::annotated_identifier> (116)
        on left: 49
        on right: 10 18 19 51 52 53 65 76 77 84 85 98 99 100 101 142 143
    internal-identifier <sonia::lang::bang::annotated_identifier> (117)
        on left: 50
        on right: 95
    qname <sonia::lang::bang::annotated_qname> (118)
        on left: 51 52 53
        on right: 36 37 53 56 60 66 67 68 69 86 87 125 126 128 140 155 157 159 167
    fn-start-decl <fn_kind> (119)
        on left: 54 55
        on right: 13 35 163 164
    fn-name <sonia::lang::bang::annotated_qname> (120)
        on left: 56 57
        on right: 58 59
    fn-decl <fn_pure_t> (121)
        on left: 58 59
        on right: 11 13 35
    enum-decl <enum_decl> (122)
        on left: 60
        on right: 38
    case-list-opt <std::vector<sonia::lang::bang::identifier>> (123)
        on left: 61 62
        on right: 60
    case-list <std::vector<sonia::lang::bang::identifier>> (124)
        on left: 63 64
        on right: 62 64
    case-decl <sonia::lang::bang::identifier> (125)
        on left: 65
        on right: 63 64
    struct-decl <struct_decl> (126)
        on left: 66 67
        on right: 15
    using-decl <using_decl> (127)
        on left: 68 69
        on right: 42
    argument-list-opt <named_expression_list_t> (128)
        on left: 70 71
        on right: 87 126 157 158 159 160 161 162 171
    argument-list <named_expression_list_t> (129)
        on left: 72 73
        on right: 71 73 141
    argument <named_expression_t> (130)
        on left: 74 75
        on right: 72 73
    argument-name <sonia::lang::bang::annotated_identifier> (131)
        on left: 76 77
        on right: 74
    field-list-opt <field_list_t> (132)
        on left: 78 79
        on right: 66 67
    field-list <field_list_t> (133)
        on left: 80 81
        on right: 79 81
    field-default-value-opt <sonia::optional<syntax_expression_t>> (134)
        on left: 82 83
        on right: 84 85
    field <field_t> (135)
        on left: 84 85
        on right: 80 81
    field-type-expr <syntax_expression_t> (136)
        on left: 86 87 88 89
        on right: 84 85 89
    parameter-list-opt <parameter_list_t> (137)
        on left: 90 91
        on right: 37 58 59 67 69 163 164
    parameter-list <parameter_list_t> (138)
        on left: 92 93
        on right: 91 93
    internal-identifier-opt <sonia::lang::bang::annotated_identifier> (139)
        on left: 94 95
        on right: 98 99 100 101
    parameter-default-value-opt <sonia::optional<syntax_expression_t>> (140)
        on left: 96 97
        on right: 98 99 100 102 103 104 109 110 111
    parameter-decl <parameter_t> (141)
        on left: 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112
        on right: 92 93
    parameter-constraint-set <parameter_constraint_set_t> (142)
        on left: 113 114 115
        on right: 98 99 100 102 103 104 106 107 108 109 110 111 115
    parameter-value-constraint-set <parameter_constraint_set_t> (143)
        on left: 116 117 118
        on right: 101 105 112 118
    parameter-matched-value <syntax_expression_t> (144)
        on left: 119
        on right: 116
    parameter-matched-type <syntax_expression_t> (145)
        on left: 120 121 122 123
        on right: 113
    basic-parameter-matched-type <syntax_expression_t> (146)
        on left: 124 125 126 127
        on right: 120 121 127
    concept-expression <syntax_expression_t> (147)
        on left: 128
        on right: 114 115 117 118
    syntax-expression <syntax_expression_t> (148)
        on left: 129 130
        on right: 13 17 30 31 32 33 34 43 45 68 69 74 75 83 97 119 143 144 145 146 147 148 149 154 166
    syntax-expression-wo-ii <syntax_expression_t> (149)
        on left: 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153
        on right: 130
    apostrophe-expression <syntax_expression_t> (150)
        on left: 154
        on right: 144 150 156 158 161
    new-expression <syntax_expression_t> (151)
        on left: 155 156 157 158
        on right: 151
    call-expression <syntax_expression_t> (152)
        on left: 159 160 161 162
        on right: 160 165 168
    lambda-expression <syntax_expression_t> (153)
        on left: 163 164
        on right: 153 162
    compound-expression <syntax_expression_t> (154)
        on left: 165 166
        on right: 44 152
    type-expr <syntax_expression_t> (155)
        on left: 167 168 169 170 171 172 173 174
        on right: 10 21 59 164 170 172 173 174


State 0

    0 $accept: . begin "end of file"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    LET                  shift, and go to state 14
    EXTERN               shift, and go to state 15
    "`new`"              shift, and go to state 16
    "`while`"            shift, and go to state 17
    "`for`"              shift, and go to state 18
    "`if`"               shift, and go to state 19
    "`return`"           shift, and go to state 20
    USING                shift, and go to state 21
    INCLUDE              shift, and go to state 22
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    ENUM                 shift, and go to state 25
    STRUCT               shift, and go to state 26
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    $default  reduce using rule 3 (statement_any)

    begin                         go to state 30
    statement_any                 go to state 31
    finished-statement-any        go to state 32
    statement                     go to state 33
    let-decl                      go to state 34
    let-decl-start                go to state 35
    let-decl-start-with-opt-type  go to state 36
    finished-statement            go to state 37
    generic-statement             go to state 38
    identifier                    go to state 39
    qname                         go to state 40
    fn-start-decl                 go to state 41
    syntax-expression             go to state 42
    syntax-expression-wo-ii       go to state 43
    apostrophe-expression         go to state 44
    new-expression                go to state 45
    call-expression               go to state 46
    lambda-expression             go to state 47
    compound-expression           go to state 48


State 1

  138 syntax-expression-wo-ii: STRING .

    $default  reduce using rule 138 (syntax-expression-wo-ii)


State 2

   49 identifier: IDENTIFIER .

    $default  reduce using rule 49 (identifier)


State 3

  129 syntax-expression: INTERNAL_IDENTIFIER .

    $default  reduce using rule 129 (syntax-expression)


State 4

  139 syntax-expression-wo-ii: RESERVED_IDENTIFIER .

    $default  reduce using rule 139 (syntax-expression-wo-ii)


State 5

  137 syntax-expression-wo-ii: INTEGER_INDEX .

    $default  reduce using rule 137 (syntax-expression-wo-ii)


State 6

  134 syntax-expression-wo-ii: INTEGER .

    $default  reduce using rule 134 (syntax-expression-wo-ii)


State 7

  135 syntax-expression-wo-ii: DECIMAL .

    $default  reduce using rule 135 (syntax-expression-wo-ii)


State 8

  136 syntax-expression-wo-ii: DECIMAL_S .

    $default  reduce using rule 136 (syntax-expression-wo-ii)


State 9

  154 apostrophe-expression: "APOSTROPHE" . syntax-expression "APOSTROPHE"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    identifier               go to state 39
    qname                    go to state 40
    fn-start-decl            go to state 49
    syntax-expression        go to state 50
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 10

   51 qname: "`::`" . identifier

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 52


State 11

  141 syntax-expression-wo-ii: "`(`" . argument-list "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    identifier               go to state 53
    qname                    go to state 40
    fn-start-decl            go to state 49
    argument-list            go to state 54
    argument                 go to state 55
    argument-name            go to state 56
    syntax-expression        go to state 57
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 12

  142 syntax-expression-wo-ii: "`.`" . identifier

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 58


State 13

  146 syntax-expression-wo-ii: "`!`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    identifier               go to state 39
    qname                    go to state 40
    fn-start-decl            go to state 49
    syntax-expression        go to state 59
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 14

   18 let-decl-start: LET . identifier
   19               | LET . "weak modifier" identifier

    IDENTIFIER       shift, and go to state 2
    "weak modifier"  shift, and go to state 60

    identifier  go to state 61


State 15

   10 statement: EXTERN . VAR identifier "`:`" type-expr
   11          | EXTERN . "`fn`" fn-decl

    VAR     shift, and go to state 62
    "`fn`"  shift, and go to state 63


State 16

  155 new-expression: "`new`" . qname
  156               | "`new`" . apostrophe-expression
  157               | "`new`" . qname "`(`" argument-list-opt "`)`"
  158               | "`new`" . apostrophe-expression "`(`" argument-list-opt "`)`"

    IDENTIFIER    shift, and go to state 2
    "APOSTROPHE"  shift, and go to state 9
    "`::`"        shift, and go to state 10

    identifier             go to state 39
    qname                  go to state 64
    apostrophe-expression  go to state 65


State 17

   30 finished-statement: "`while`" . syntax-expression braced-statements
   31                   | "`while`" . syntax-expression "`;`" syntax-expression braced-statements

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    identifier               go to state 39
    qname                    go to state 40
    fn-start-decl            go to state 49
    syntax-expression        go to state 66
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 18

   32 finished-statement: "`for`" . syntax-expression "`in`" syntax-expression braced-statements

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    identifier               go to state 39
    qname                    go to state 40
    fn-start-decl            go to state 49
    syntax-expression        go to state 67
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 19

   33 finished-statement: "`if`" . syntax-expression braced-statements
   34                   | "`if`" . syntax-expression braced-statements "`else`" braced-statements

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    identifier               go to state 39
    qname                    go to state 40
    fn-start-decl            go to state 49
    syntax-expression        go to state 68
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 20

   43 generic-statement: "`return`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    identifier               go to state 39
    qname                    go to state 40
    fn-start-decl            go to state 49
    syntax-expression        go to state 69
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 21

   42 generic-statement: USING . using-decl

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 10

    identifier  go to state 39
    qname       go to state 70
    using-decl  go to state 71


State 22

   12 statement: INCLUDE . STRING

    STRING  shift, and go to state 72


State 23

   55 fn-start-decl: INLINE . "`fn`"

    "`fn`"  shift, and go to state 73


State 24

   54 fn-start-decl: "`fn`" .

    $default  reduce using rule 54 (fn-start-decl)


State 25

   38 finished-statement: ENUM . enum-decl

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 10

    identifier  go to state 39
    qname       go to state 74
    enum-decl   go to state 75


State 26

   15 statement: STRUCT . struct-decl
   36 finished-statement: STRUCT . qname braced-statements
   37                   | STRUCT . qname "`(`" parameter-list-opt "`)`" braced-statements

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 10

    identifier   go to state 39
    qname        go to state 76
    struct-decl  go to state 77


State 27

  131 syntax-expression-wo-ii: "nil" .

    $default  reduce using rule 131 (syntax-expression-wo-ii)


State 28

  132 syntax-expression-wo-ii: "true" .

    $default  reduce using rule 132 (syntax-expression-wo-ii)


State 29

  133 syntax-expression-wo-ii: "false" .

    $default  reduce using rule 133 (syntax-expression-wo-ii)


State 30

    0 $accept: begin . "end of file"

    "end of file"  shift, and go to state 78


State 31

    1 begin: statement_any . "end of file"
    9 finished-statement-any: statement_any . "`;`"

    "end of file"  shift, and go to state 79
    "`;`"          shift, and go to state 80


State 32

    2 begin: finished-statement-any . "end of file"
    5 statement_any: finished-statement-any . statement
    7 finished-statement-any: finished-statement-any . "`;`"
    8                       | finished-statement-any . finished-statement

    "end of file"        shift, and go to state 81
    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`;`"                shift, and go to state 82
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    LET                  shift, and go to state 14
    EXTERN               shift, and go to state 15
    "`new`"              shift, and go to state 16
    "`while`"            shift, and go to state 17
    "`for`"              shift, and go to state 18
    "`if`"               shift, and go to state 19
    "`return`"           shift, and go to state 20
    USING                shift, and go to state 21
    INCLUDE              shift, and go to state 22
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    ENUM                 shift, and go to state 25
    STRUCT               shift, and go to state 26
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    statement                     go to state 83
    let-decl                      go to state 34
    let-decl-start                go to state 35
    let-decl-start-with-opt-type  go to state 36
    finished-statement            go to state 84
    generic-statement             go to state 38
    identifier                    go to state 39
    qname                         go to state 40
    fn-start-decl                 go to state 41
    syntax-expression             go to state 42
    syntax-expression-wo-ii       go to state 43
    apostrophe-expression         go to state 44
    new-expression                go to state 45
    call-expression               go to state 46
    lambda-expression             go to state 47
    compound-expression           go to state 48


State 33

    4 statement_any: statement .

    $default  reduce using rule 4 (statement_any)


State 34

   41 generic-statement: let-decl .

    $default  reduce using rule 41 (generic-statement)


State 35

   20 let-decl-start-with-opt-type: let-decl-start .
   21                             | let-decl-start . "`:`" type-expr

    "`:`"  shift, and go to state 85

    $default  reduce using rule 20 (let-decl-start-with-opt-type)


State 36

   16 let-decl: let-decl-start-with-opt-type .
   17         | let-decl-start-with-opt-type . "`=`" syntax-expression

    "`=`"  shift, and go to state 86

    $default  reduce using rule 16 (let-decl)


State 37

    6 finished-statement-any: finished-statement .

    $default  reduce using rule 6 (finished-statement-any)


State 38

   14 statement: generic-statement .

    $default  reduce using rule 14 (statement)


State 39

   52 qname: identifier .

    $default  reduce using rule 52 (qname)


State 40

   53 qname: qname . "`::`" identifier
  140 syntax-expression-wo-ii: qname .
  159 call-expression: qname . "`(`" argument-list-opt "`)`"

    "`::`"  shift, and go to state 87
    "`(`"   shift, and go to state 88

    $default  reduce using rule 140 (syntax-expression-wo-ii)


State 41

   13 statement: fn-start-decl . fn-decl "`=>`" syntax-expression
   35 finished-statement: fn-start-decl . fn-decl braced-statements
  163 lambda-expression: fn-start-decl . "`(`" parameter-list-opt "`)`" braced-statements
  164                  | fn-start-decl . "`(`" parameter-list-opt "`)`" "`->`" type-expr braced-statements

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 10
    "`(`"       shift, and go to state 89
    "`new`"     shift, and go to state 90

    identifier  go to state 39
    qname       go to state 91
    fn-name     go to state 92
    fn-decl     go to state 93


State 42

   45 generic-statement: syntax-expression . "`=`" syntax-expression
  143 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  144                        | syntax-expression . "`.`" apostrophe-expression
  145                        | syntax-expression . INTEGER_INDEX
  147                        | syntax-expression . "`+`" syntax-expression
  148                        | syntax-expression . "`==`" syntax-expression
  149                        | syntax-expression . "`!=`" syntax-expression
  166 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 94
    "`=`"          shift, and go to state 95
    "`==`"         shift, and go to state 96
    "`!=`"         shift, and go to state 97
    "`...`"        shift, and go to state 98
    "`.`"          shift, and go to state 99
    "`+`"          shift, and go to state 100


State 43

  130 syntax-expression: syntax-expression-wo-ii .

    $default  reduce using rule 130 (syntax-expression)


State 44

  150 syntax-expression-wo-ii: apostrophe-expression .
  161 call-expression: apostrophe-expression . "`(`" argument-list-opt "`)`"

    "`(`"  shift, and go to state 101

    $default  reduce using rule 150 (syntax-expression-wo-ii)


State 45

  151 syntax-expression-wo-ii: new-expression .

    $default  reduce using rule 151 (syntax-expression-wo-ii)


State 46

  160 call-expression: call-expression . "`(`" argument-list-opt "`)`"
  165 compound-expression: call-expression .

    "`(`"  shift, and go to state 102

    $default  reduce using rule 165 (compound-expression)


State 47

  153 syntax-expression-wo-ii: lambda-expression .
  162 call-expression: lambda-expression . "`(`" argument-list-opt "`)`"

    "`(`"  shift, and go to state 103

    $default  reduce using rule 153 (syntax-expression-wo-ii)


State 48

   44 generic-statement: compound-expression .
  152 syntax-expression-wo-ii: compound-expression .

    "end of file"  reduce using rule 44 (generic-statement)
    "`}`"          reduce using rule 44 (generic-statement)
    "`;`"          reduce using rule 44 (generic-statement)
    $default       reduce using rule 152 (syntax-expression-wo-ii)


State 49

  163 lambda-expression: fn-start-decl . "`(`" parameter-list-opt "`)`" braced-statements
  164                  | fn-start-decl . "`(`" parameter-list-opt "`)`" "`->`" type-expr braced-statements

    "`(`"  shift, and go to state 89


State 50

  143 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  144                        | syntax-expression . "`.`" apostrophe-expression
  145                        | syntax-expression . INTEGER_INDEX
  147                        | syntax-expression . "`+`" syntax-expression
  148                        | syntax-expression . "`==`" syntax-expression
  149                        | syntax-expression . "`!=`" syntax-expression
  154 apostrophe-expression: "APOSTROPHE" syntax-expression . "APOSTROPHE"
  166 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 94
    "APOSTROPHE"   shift, and go to state 104
    "`==`"         shift, and go to state 96
    "`!=`"         shift, and go to state 97
    "`...`"        shift, and go to state 98
    "`.`"          shift, and go to state 99
    "`+`"          shift, and go to state 100


State 51

  152 syntax-expression-wo-ii: compound-expression .

    $default  reduce using rule 152 (syntax-expression-wo-ii)


State 52

   51 qname: "`::`" identifier .

    $default  reduce using rule 51 (qname)


State 53

   52 qname: identifier .
   76 argument-name: identifier . "`=`"
   77              | identifier . "`:`"

    "`=`"  shift, and go to state 105
    "`:`"  shift, and go to state 106

    $default  reduce using rule 52 (qname)


State 54

   73 argument-list: argument-list . "," argument
  141 syntax-expression-wo-ii: "`(`" argument-list . "`)`"

    "`)`"  shift, and go to state 107
    ","    shift, and go to state 108


State 55

   72 argument-list: argument .

    $default  reduce using rule 72 (argument-list)


State 56

   74 argument: argument-name . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    identifier               go to state 39
    qname                    go to state 40
    fn-start-decl            go to state 49
    syntax-expression        go to state 109
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 57

   75 argument: syntax-expression .
  143 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  144                        | syntax-expression . "`.`" apostrophe-expression
  145                        | syntax-expression . INTEGER_INDEX
  147                        | syntax-expression . "`+`" syntax-expression
  148                        | syntax-expression . "`==`" syntax-expression
  149                        | syntax-expression . "`!=`" syntax-expression
  166 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 94
    "`==`"         shift, and go to state 96
    "`!=`"         shift, and go to state 97
    "`...`"        shift, and go to state 98
    "`.`"          shift, and go to state 99
    "`+`"          shift, and go to state 100

    $default  reduce using rule 75 (argument)


State 58

  142 syntax-expression-wo-ii: "`.`" identifier .

    $default  reduce using rule 142 (syntax-expression-wo-ii)


State 59

  143 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  144                        | syntax-expression . "`.`" apostrophe-expression
  145                        | syntax-expression . INTEGER_INDEX
  146                        | "`!`" syntax-expression .
  147                        | syntax-expression . "`+`" syntax-expression
  148                        | syntax-expression . "`==`" syntax-expression
  149                        | syntax-expression . "`!=`" syntax-expression
  166 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 94
    "`.`"          shift, and go to state 99

    $default  reduce using rule 146 (syntax-expression-wo-ii)


State 60

   19 let-decl-start: LET "weak modifier" . identifier

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 110


State 61

   18 let-decl-start: LET identifier .

    $default  reduce using rule 18 (let-decl-start)


State 62

   10 statement: EXTERN VAR . identifier "`:`" type-expr

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 111


State 63

   11 statement: EXTERN "`fn`" . fn-decl

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 10
    "`new`"     shift, and go to state 90

    identifier  go to state 39
    qname       go to state 91
    fn-name     go to state 92
    fn-decl     go to state 112


State 64

   53 qname: qname . "`::`" identifier
  155 new-expression: "`new`" qname .
  157               | "`new`" qname . "`(`" argument-list-opt "`)`"

    "`::`"  shift, and go to state 87
    "`(`"   shift, and go to state 113

    $default  reduce using rule 155 (new-expression)


State 65

  156 new-expression: "`new`" apostrophe-expression .
  158               | "`new`" apostrophe-expression . "`(`" argument-list-opt "`)`"

    "`(`"  shift, and go to state 114

    $default  reduce using rule 156 (new-expression)


State 66

   30 finished-statement: "`while`" syntax-expression . braced-statements
   31                   | "`while`" syntax-expression . "`;`" syntax-expression braced-statements
  143 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  144                        | syntax-expression . "`.`" apostrophe-expression
  145                        | syntax-expression . INTEGER_INDEX
  147                        | syntax-expression . "`+`" syntax-expression
  148                        | syntax-expression . "`==`" syntax-expression
  149                        | syntax-expression . "`!=`" syntax-expression
  166 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 94
    "`==`"         shift, and go to state 96
    "`!=`"         shift, and go to state 97
    "`...`"        shift, and go to state 98
    "`{`"          shift, and go to state 115
    "`;`"          shift, and go to state 116
    "`.`"          shift, and go to state 99
    "`+`"          shift, and go to state 100

    braced-statements  go to state 117


State 67

   32 finished-statement: "`for`" syntax-expression . "`in`" syntax-expression braced-statements
  143 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  144                        | syntax-expression . "`.`" apostrophe-expression
  145                        | syntax-expression . INTEGER_INDEX
  147                        | syntax-expression . "`+`" syntax-expression
  148                        | syntax-expression . "`==`" syntax-expression
  149                        | syntax-expression . "`!=`" syntax-expression
  166 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 94
    "`==`"         shift, and go to state 96
    "`!=`"         shift, and go to state 97
    "`...`"        shift, and go to state 98
    "`.`"          shift, and go to state 99
    "`+`"          shift, and go to state 100
    "`in`"         shift, and go to state 118


State 68

   33 finished-statement: "`if`" syntax-expression . braced-statements
   34                   | "`if`" syntax-expression . braced-statements "`else`" braced-statements
  143 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  144                        | syntax-expression . "`.`" apostrophe-expression
  145                        | syntax-expression . INTEGER_INDEX
  147                        | syntax-expression . "`+`" syntax-expression
  148                        | syntax-expression . "`==`" syntax-expression
  149                        | syntax-expression . "`!=`" syntax-expression
  166 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 94
    "`==`"         shift, and go to state 96
    "`!=`"         shift, and go to state 97
    "`...`"        shift, and go to state 98
    "`{`"          shift, and go to state 115
    "`.`"          shift, and go to state 99
    "`+`"          shift, and go to state 100

    braced-statements  go to state 119


State 69

   43 generic-statement: "`return`" syntax-expression .
  143 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  144                        | syntax-expression . "`.`" apostrophe-expression
  145                        | syntax-expression . INTEGER_INDEX
  147                        | syntax-expression . "`+`" syntax-expression
  148                        | syntax-expression . "`==`" syntax-expression
  149                        | syntax-expression . "`!=`" syntax-expression
  166 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 94
    "`==`"         shift, and go to state 96
    "`!=`"         shift, and go to state 97
    "`...`"        shift, and go to state 98
    "`.`"          shift, and go to state 99
    "`+`"          shift, and go to state 100

    $default  reduce using rule 43 (generic-statement)


State 70

   53 qname: qname . "`::`" identifier
   68 using-decl: qname . "`=>`" syntax-expression
   69           | qname . "`(`" parameter-list-opt "`)`" "`=>`" syntax-expression

    "`=>`"  shift, and go to state 120
    "`::`"  shift, and go to state 87
    "`(`"   shift, and go to state 121


State 71

   42 generic-statement: USING using-decl .

    $default  reduce using rule 42 (generic-statement)


State 72

   12 statement: INCLUDE STRING .

    $default  reduce using rule 12 (statement)


State 73

   55 fn-start-decl: INLINE "`fn`" .

    $default  reduce using rule 55 (fn-start-decl)


State 74

   53 qname: qname . "`::`" identifier
   60 enum-decl: qname . "`{`" case-list-opt "`}`"

    "`::`"  shift, and go to state 87
    "`{`"   shift, and go to state 122


State 75

   38 finished-statement: ENUM enum-decl .

    $default  reduce using rule 38 (finished-statement)


State 76

   36 finished-statement: STRUCT qname . braced-statements
   37                   | STRUCT qname . "`(`" parameter-list-opt "`)`" braced-statements
   53 qname: qname . "`::`" identifier
   66 struct-decl: qname . "`=>`" "`(`" field-list-opt "`)`"
   67            | qname . "`(`" parameter-list-opt "`)`" "`=>`" "`(`" field-list-opt "`)`"

    "`=>`"  shift, and go to state 123
    "`::`"  shift, and go to state 87
    "`(`"   shift, and go to state 124
    "`{`"   shift, and go to state 115

    braced-statements  go to state 125


State 77

   15 statement: STRUCT struct-decl .

    $default  reduce using rule 15 (statement)


State 78

    0 $accept: begin "end of file" .

    $default  accept


State 79

    1 begin: statement_any "end of file" .

    $default  reduce using rule 1 (begin)


State 80

    9 finished-statement-any: statement_any "`;`" .

    $default  reduce using rule 9 (finished-statement-any)


State 81

    2 begin: finished-statement-any "end of file" .

    $default  reduce using rule 2 (begin)


State 82

    7 finished-statement-any: finished-statement-any "`;`" .

    $default  reduce using rule 7 (finished-statement-any)


State 83

    5 statement_any: finished-statement-any statement .

    $default  reduce using rule 5 (statement_any)


State 84

    8 finished-statement-any: finished-statement-any finished-statement .

    $default  reduce using rule 8 (finished-statement-any)


State 85

   21 let-decl-start-with-opt-type: let-decl-start "`:`" . type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 126
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 127
    "`[`"                shift, and go to state 128
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24

    identifier             go to state 39
    qname                  go to state 129
    fn-start-decl          go to state 49
    apostrophe-expression  go to state 130
    call-expression        go to state 131
    lambda-expression      go to state 132
    type-expr              go to state 133


State 86

   17 let-decl: let-decl-start-with-opt-type "`=`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    identifier               go to state 39
    qname                    go to state 40
    fn-start-decl            go to state 49
    syntax-expression        go to state 134
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 87

   53 qname: qname "`::`" . identifier

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 135


State 88

  159 call-expression: qname "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    $default  reduce using rule 70 (argument-list-opt)

    identifier               go to state 53
    qname                    go to state 40
    fn-start-decl            go to state 49
    argument-list-opt        go to state 136
    argument-list            go to state 137
    argument                 go to state 55
    argument-name            go to state 56
    syntax-expression        go to state 57
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 89

  163 lambda-expression: fn-start-decl "`(`" . parameter-list-opt "`)`" braced-statements
  164                  | fn-start-decl "`(`" . parameter-list-opt "`)`" "`->`" type-expr braced-statements

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 138
    "`@`"                shift, and go to state 139
    "`_`"                shift, and go to state 140
    "`=>`"               shift, and go to state 141
    "`::`"               shift, and go to state 10
    "const modifier"     shift, and go to state 142
    "mut modifier"       shift, and go to state 143

    $default  reduce using rule 90 (parameter-list-opt)

    identifier                    go to state 144
    qname                         go to state 145
    parameter-list-opt            go to state 146
    parameter-list                go to state 147
    parameter-decl                go to state 148
    parameter-constraint-set      go to state 149
    parameter-matched-type        go to state 150
    basic-parameter-matched-type  go to state 151
    concept-expression            go to state 152


State 90

   57 fn-name: "`new`" .

    $default  reduce using rule 57 (fn-name)


State 91

   53 qname: qname . "`::`" identifier
   56 fn-name: qname .

    "`::`"  shift, and go to state 87

    $default  reduce using rule 56 (fn-name)


State 92

   58 fn-decl: fn-name . "`(`" parameter-list-opt "`)`"
   59        | fn-name . "`(`" parameter-list-opt "`)`" "`->`" type-expr

    "`(`"  shift, and go to state 153


State 93

   13 statement: fn-start-decl fn-decl . "`=>`" syntax-expression
   35 finished-statement: fn-start-decl fn-decl . braced-statements

    "`=>`"  shift, and go to state 154
    "`{`"   shift, and go to state 115

    braced-statements  go to state 155


State 94

  145 syntax-expression-wo-ii: syntax-expression INTEGER_INDEX .

    $default  reduce using rule 145 (syntax-expression-wo-ii)


State 95

   45 generic-statement: syntax-expression "`=`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    identifier               go to state 39
    qname                    go to state 40
    fn-start-decl            go to state 49
    syntax-expression        go to state 156
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 96

  148 syntax-expression-wo-ii: syntax-expression "`==`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    identifier               go to state 39
    qname                    go to state 40
    fn-start-decl            go to state 49
    syntax-expression        go to state 157
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 97

  149 syntax-expression-wo-ii: syntax-expression "`!=`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    identifier               go to state 39
    qname                    go to state 40
    fn-start-decl            go to state 49
    syntax-expression        go to state 158
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 98

  166 compound-expression: syntax-expression "`...`" .

    $default  reduce using rule 166 (compound-expression)


State 99

  143 syntax-expression-wo-ii: syntax-expression "`.`" . identifier
  144                        | syntax-expression "`.`" . apostrophe-expression

    IDENTIFIER    shift, and go to state 2
    "APOSTROPHE"  shift, and go to state 9

    identifier             go to state 159
    apostrophe-expression  go to state 160


State 100

  147 syntax-expression-wo-ii: syntax-expression "`+`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    identifier               go to state 39
    qname                    go to state 40
    fn-start-decl            go to state 49
    syntax-expression        go to state 161
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 101

  161 call-expression: apostrophe-expression "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    $default  reduce using rule 70 (argument-list-opt)

    identifier               go to state 53
    qname                    go to state 40
    fn-start-decl            go to state 49
    argument-list-opt        go to state 162
    argument-list            go to state 137
    argument                 go to state 55
    argument-name            go to state 56
    syntax-expression        go to state 57
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 102

  160 call-expression: call-expression "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    $default  reduce using rule 70 (argument-list-opt)

    identifier               go to state 53
    qname                    go to state 40
    fn-start-decl            go to state 49
    argument-list-opt        go to state 163
    argument-list            go to state 137
    argument                 go to state 55
    argument-name            go to state 56
    syntax-expression        go to state 57
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 103

  162 call-expression: lambda-expression "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    $default  reduce using rule 70 (argument-list-opt)

    identifier               go to state 53
    qname                    go to state 40
    fn-start-decl            go to state 49
    argument-list-opt        go to state 164
    argument-list            go to state 137
    argument                 go to state 55
    argument-name            go to state 56
    syntax-expression        go to state 57
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 104

  154 apostrophe-expression: "APOSTROPHE" syntax-expression "APOSTROPHE" .

    $default  reduce using rule 154 (apostrophe-expression)


State 105

   76 argument-name: identifier "`=`" .

    $default  reduce using rule 76 (argument-name)


State 106

   77 argument-name: identifier "`:`" .

    $default  reduce using rule 77 (argument-name)


State 107

  141 syntax-expression-wo-ii: "`(`" argument-list "`)`" .

    $default  reduce using rule 141 (syntax-expression-wo-ii)


State 108

   73 argument-list: argument-list "," . argument

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    identifier               go to state 53
    qname                    go to state 40
    fn-start-decl            go to state 49
    argument                 go to state 165
    argument-name            go to state 56
    syntax-expression        go to state 57
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 109

   74 argument: argument-name syntax-expression .
  143 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  144                        | syntax-expression . "`.`" apostrophe-expression
  145                        | syntax-expression . INTEGER_INDEX
  147                        | syntax-expression . "`+`" syntax-expression
  148                        | syntax-expression . "`==`" syntax-expression
  149                        | syntax-expression . "`!=`" syntax-expression
  166 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 94
    "`==`"         shift, and go to state 96
    "`!=`"         shift, and go to state 97
    "`...`"        shift, and go to state 98
    "`.`"          shift, and go to state 99
    "`+`"          shift, and go to state 100

    $default  reduce using rule 74 (argument)


State 110

   19 let-decl-start: LET "weak modifier" identifier .

    $default  reduce using rule 19 (let-decl-start)


State 111

   10 statement: EXTERN VAR identifier . "`:`" type-expr

    "`:`"  shift, and go to state 166


State 112

   11 statement: EXTERN "`fn`" fn-decl .

    $default  reduce using rule 11 (statement)


State 113

  157 new-expression: "`new`" qname "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    $default  reduce using rule 70 (argument-list-opt)

    identifier               go to state 53
    qname                    go to state 40
    fn-start-decl            go to state 49
    argument-list-opt        go to state 167
    argument-list            go to state 137
    argument                 go to state 55
    argument-name            go to state 56
    syntax-expression        go to state 57
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 114

  158 new-expression: "`new`" apostrophe-expression "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    $default  reduce using rule 70 (argument-list-opt)

    identifier               go to state 53
    qname                    go to state 40
    fn-start-decl            go to state 49
    argument-list-opt        go to state 168
    argument-list            go to state 137
    argument                 go to state 55
    argument-name            go to state 56
    syntax-expression        go to state 57
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 115

   29 braced-statements: "`{`" . infunction-statement-set "`}`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    LET                  shift, and go to state 14
    "`new`"              shift, and go to state 16
    "`while`"            shift, and go to state 17
    "`for`"              shift, and go to state 18
    "`if`"               shift, and go to state 19
    "`continue`"         shift, and go to state 169
    "`break`"            shift, and go to state 170
    "`return`"           shift, and go to state 20
    USING                shift, and go to state 21
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    ENUM                 shift, and go to state 25
    STRUCT               shift, and go to state 171
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    $default  reduce using rule 22 (infunction-statement-any)

    let-decl                           go to state 34
    let-decl-start                     go to state 35
    let-decl-start-with-opt-type       go to state 36
    infunction-statement-any           go to state 172
    finished-infunction-statement-any  go to state 173
    finished-statement                 go to state 174
    infunction-statement-set           go to state 175
    generic-statement                  go to state 176
    infunction-statement               go to state 177
    identifier                         go to state 39
    qname                              go to state 40
    fn-start-decl                      go to state 178
    syntax-expression                  go to state 42
    syntax-expression-wo-ii            go to state 43
    apostrophe-expression              go to state 44
    new-expression                     go to state 45
    call-expression                    go to state 46
    lambda-expression                  go to state 47
    compound-expression                go to state 48


State 116

   31 finished-statement: "`while`" syntax-expression "`;`" . syntax-expression braced-statements

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    identifier               go to state 39
    qname                    go to state 40
    fn-start-decl            go to state 49
    syntax-expression        go to state 179
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 117

   30 finished-statement: "`while`" syntax-expression braced-statements .

    $default  reduce using rule 30 (finished-statement)


State 118

   32 finished-statement: "`for`" syntax-expression "`in`" . syntax-expression braced-statements

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    identifier               go to state 39
    qname                    go to state 40
    fn-start-decl            go to state 49
    syntax-expression        go to state 180
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 119

   33 finished-statement: "`if`" syntax-expression braced-statements .
   34                   | "`if`" syntax-expression braced-statements . "`else`" braced-statements

    "`else`"  shift, and go to state 181

    $default  reduce using rule 33 (finished-statement)


State 120

   68 using-decl: qname "`=>`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    identifier               go to state 39
    qname                    go to state 40
    fn-start-decl            go to state 49
    syntax-expression        go to state 182
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 121

   69 using-decl: qname "`(`" . parameter-list-opt "`)`" "`=>`" syntax-expression

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 138
    "`@`"                shift, and go to state 139
    "`_`"                shift, and go to state 140
    "`=>`"               shift, and go to state 141
    "`::`"               shift, and go to state 10
    "const modifier"     shift, and go to state 142
    "mut modifier"       shift, and go to state 143

    $default  reduce using rule 90 (parameter-list-opt)

    identifier                    go to state 144
    qname                         go to state 145
    parameter-list-opt            go to state 183
    parameter-list                go to state 147
    parameter-decl                go to state 148
    parameter-constraint-set      go to state 149
    parameter-matched-type        go to state 150
    basic-parameter-matched-type  go to state 151
    concept-expression            go to state 152


State 122

   60 enum-decl: qname "`{`" . case-list-opt "`}`"

    IDENTIFIER  shift, and go to state 2

    $default  reduce using rule 61 (case-list-opt)

    identifier     go to state 184
    case-list-opt  go to state 185
    case-list      go to state 186
    case-decl      go to state 187


State 123

   66 struct-decl: qname "`=>`" . "`(`" field-list-opt "`)`"

    "`(`"  shift, and go to state 188


State 124

   37 finished-statement: STRUCT qname "`(`" . parameter-list-opt "`)`" braced-statements
   67 struct-decl: qname "`(`" . parameter-list-opt "`)`" "`=>`" "`(`" field-list-opt "`)`"

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 138
    "`@`"                shift, and go to state 139
    "`_`"                shift, and go to state 140
    "`=>`"               shift, and go to state 141
    "`::`"               shift, and go to state 10
    "const modifier"     shift, and go to state 142
    "mut modifier"       shift, and go to state 143

    $default  reduce using rule 90 (parameter-list-opt)

    identifier                    go to state 144
    qname                         go to state 145
    parameter-list-opt            go to state 189
    parameter-list                go to state 147
    parameter-decl                go to state 148
    parameter-constraint-set      go to state 149
    parameter-matched-type        go to state 150
    basic-parameter-matched-type  go to state 151
    concept-expression            go to state 152


State 125

   36 finished-statement: STRUCT qname braced-statements .

    $default  reduce using rule 36 (finished-statement)


State 126

  169 type-expr: INTERNAL_IDENTIFIER .

    $default  reduce using rule 169 (type-expr)


State 127

  171 type-expr: "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    $default  reduce using rule 70 (argument-list-opt)

    identifier               go to state 53
    qname                    go to state 40
    fn-start-decl            go to state 49
    argument-list-opt        go to state 190
    argument-list            go to state 137
    argument                 go to state 55
    argument-name            go to state 56
    syntax-expression        go to state 57
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 128

  170 type-expr: "`[`" . type-expr "`]`"

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 126
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 127
    "`[`"                shift, and go to state 128
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24

    identifier             go to state 39
    qname                  go to state 129
    fn-start-decl          go to state 49
    apostrophe-expression  go to state 130
    call-expression        go to state 131
    lambda-expression      go to state 132
    type-expr              go to state 191


State 129

   53 qname: qname . "`::`" identifier
  159 call-expression: qname . "`(`" argument-list-opt "`)`"
  167 type-expr: qname .

    "`::`"  shift, and go to state 87
    "`(`"   shift, and go to state 88

    $default  reduce using rule 167 (type-expr)


State 130

  161 call-expression: apostrophe-expression . "`(`" argument-list-opt "`)`"

    "`(`"  shift, and go to state 101


State 131

  160 call-expression: call-expression . "`(`" argument-list-opt "`)`"
  168 type-expr: call-expression .

    "`(`"  shift, and go to state 102

    $default  reduce using rule 168 (type-expr)


State 132

  162 call-expression: lambda-expression . "`(`" argument-list-opt "`)`"

    "`(`"  shift, and go to state 103


State 133

   21 let-decl-start-with-opt-type: let-decl-start "`:`" type-expr .
  172 type-expr: type-expr . "`[`" INTEGER "`]`"
  173          | type-expr . "`|`" type-expr
  174          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 192
    "`[`"   shift, and go to state 193
    "`|`"   shift, and go to state 194

    $default  reduce using rule 21 (let-decl-start-with-opt-type)


State 134

   17 let-decl: let-decl-start-with-opt-type "`=`" syntax-expression .
  143 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  144                        | syntax-expression . "`.`" apostrophe-expression
  145                        | syntax-expression . INTEGER_INDEX
  147                        | syntax-expression . "`+`" syntax-expression
  148                        | syntax-expression . "`==`" syntax-expression
  149                        | syntax-expression . "`!=`" syntax-expression
  166 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 94
    "`==`"         shift, and go to state 96
    "`!=`"         shift, and go to state 97
    "`...`"        shift, and go to state 98
    "`.`"          shift, and go to state 99
    "`+`"          shift, and go to state 100

    $default  reduce using rule 17 (let-decl)


State 135

   53 qname: qname "`::`" identifier .

    $default  reduce using rule 53 (qname)


State 136

  159 call-expression: qname "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 195


State 137

   71 argument-list-opt: argument-list .
   73 argument-list: argument-list . "," argument

    ","  shift, and go to state 108

    $default  reduce using rule 71 (argument-list-opt)


State 138

  102 parameter-decl: INTERNAL_IDENTIFIER . "`:`" parameter-constraint-set parameter-default-value-opt
  103               | INTERNAL_IDENTIFIER . "`:`" "const modifier" parameter-constraint-set parameter-default-value-opt
  104               | INTERNAL_IDENTIFIER . "`:`" "mut modifier" parameter-constraint-set parameter-default-value-opt
  105               | INTERNAL_IDENTIFIER . "`=>`" parameter-value-constraint-set
  106               | INTERNAL_IDENTIFIER . "`...`" "`:`" parameter-constraint-set
  107               | INTERNAL_IDENTIFIER . "`...`" "`:`" "const modifier" parameter-constraint-set
  108               | INTERNAL_IDENTIFIER . "`...`" "`:`" "mut modifier" parameter-constraint-set
  122 parameter-matched-type: INTERNAL_IDENTIFIER .
  123                       | INTERNAL_IDENTIFIER . "`...`"

    "`=>`"   shift, and go to state 196
    "`...`"  shift, and go to state 197
    "`:`"    shift, and go to state 198

    $default  reduce using rule 122 (parameter-matched-type)


State 139

  128 concept-expression: "`@`" . qname

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 10

    identifier  go to state 39
    qname       go to state 199


State 140

  124 basic-parameter-matched-type: "`_`" .

    $default  reduce using rule 124 (basic-parameter-matched-type)


State 141

  112 parameter-decl: "`=>`" . parameter-value-constraint-set

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`@`"                shift, and go to state 139
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    identifier                      go to state 39
    qname                           go to state 40
    fn-start-decl                   go to state 49
    parameter-value-constraint-set  go to state 200
    parameter-matched-value         go to state 201
    concept-expression              go to state 202
    syntax-expression               go to state 203
    syntax-expression-wo-ii         go to state 43
    apostrophe-expression           go to state 44
    new-expression                  go to state 45
    call-expression                 go to state 46
    lambda-expression               go to state 47
    compound-expression             go to state 51


State 142

  110 parameter-decl: "const modifier" . parameter-constraint-set parameter-default-value-opt

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 204
    "`@`"                shift, and go to state 139
    "`_`"                shift, and go to state 140
    "`::`"               shift, and go to state 10

    identifier                    go to state 39
    qname                         go to state 145
    parameter-constraint-set      go to state 205
    parameter-matched-type        go to state 150
    basic-parameter-matched-type  go to state 151
    concept-expression            go to state 152


State 143

  111 parameter-decl: "mut modifier" . parameter-constraint-set parameter-default-value-opt

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 204
    "`@`"                shift, and go to state 139
    "`_`"                shift, and go to state 140
    "`::`"               shift, and go to state 10

    identifier                    go to state 39
    qname                         go to state 145
    parameter-constraint-set      go to state 206
    parameter-matched-type        go to state 150
    basic-parameter-matched-type  go to state 151
    concept-expression            go to state 152


State 144

   52 qname: identifier .
   98 parameter-decl: identifier . internal-identifier-opt "`:`" parameter-constraint-set parameter-default-value-opt
   99               | identifier . internal-identifier-opt "`:`" "const modifier" parameter-constraint-set parameter-default-value-opt
  100               | identifier . internal-identifier-opt "`:`" "mut modifier" parameter-constraint-set parameter-default-value-opt
  101               | identifier . internal-identifier-opt "`=>`" parameter-value-constraint-set

    INTERNAL_IDENTIFIER  shift, and go to state 207

    "`=>`"    reduce using rule 94 (internal-identifier-opt)
    "`:`"     reduce using rule 94 (internal-identifier-opt)
    $default  reduce using rule 52 (qname)

    internal-identifier      go to state 208
    internal-identifier-opt  go to state 209


State 145

   53 qname: qname . "`::`" identifier
  125 basic-parameter-matched-type: qname .
  126                             | qname . "`(`" argument-list-opt "`)`"

    "`::`"  shift, and go to state 87
    "`(`"   shift, and go to state 210

    $default  reduce using rule 125 (basic-parameter-matched-type)


State 146

  163 lambda-expression: fn-start-decl "`(`" parameter-list-opt . "`)`" braced-statements
  164                  | fn-start-decl "`(`" parameter-list-opt . "`)`" "`->`" type-expr braced-statements

    "`)`"  shift, and go to state 211


State 147

   91 parameter-list-opt: parameter-list .
   93 parameter-list: parameter-list . "," parameter-decl

    ","  shift, and go to state 212

    $default  reduce using rule 91 (parameter-list-opt)


State 148

   92 parameter-list: parameter-decl .

    $default  reduce using rule 92 (parameter-list)


State 149

  109 parameter-decl: parameter-constraint-set . parameter-default-value-opt
  115 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`=`"  shift, and go to state 213
    "`@`"  shift, and go to state 139

    $default  reduce using rule 96 (parameter-default-value-opt)

    parameter-default-value-opt  go to state 214
    concept-expression           go to state 215


State 150

  113 parameter-constraint-set: parameter-matched-type .

    $default  reduce using rule 113 (parameter-constraint-set)


State 151

  120 parameter-matched-type: basic-parameter-matched-type .
  121                       | basic-parameter-matched-type . "`...`"
  127 basic-parameter-matched-type: basic-parameter-matched-type . "`|`" basic-parameter-matched-type

    "`...`"  shift, and go to state 216
    "`|`"    shift, and go to state 217

    $default  reduce using rule 120 (parameter-matched-type)


State 152

  114 parameter-constraint-set: concept-expression .

    $default  reduce using rule 114 (parameter-constraint-set)


State 153

   58 fn-decl: fn-name "`(`" . parameter-list-opt "`)`"
   59        | fn-name "`(`" . parameter-list-opt "`)`" "`->`" type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 138
    "`@`"                shift, and go to state 139
    "`_`"                shift, and go to state 140
    "`=>`"               shift, and go to state 141
    "`::`"               shift, and go to state 10
    "const modifier"     shift, and go to state 142
    "mut modifier"       shift, and go to state 143

    $default  reduce using rule 90 (parameter-list-opt)

    identifier                    go to state 144
    qname                         go to state 145
    parameter-list-opt            go to state 218
    parameter-list                go to state 147
    parameter-decl                go to state 148
    parameter-constraint-set      go to state 149
    parameter-matched-type        go to state 150
    basic-parameter-matched-type  go to state 151
    concept-expression            go to state 152


State 154

   13 statement: fn-start-decl fn-decl "`=>`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    identifier               go to state 39
    qname                    go to state 40
    fn-start-decl            go to state 49
    syntax-expression        go to state 219
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 155

   35 finished-statement: fn-start-decl fn-decl braced-statements .

    $default  reduce using rule 35 (finished-statement)


State 156

   45 generic-statement: syntax-expression "`=`" syntax-expression .
  143 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  144                        | syntax-expression . "`.`" apostrophe-expression
  145                        | syntax-expression . INTEGER_INDEX
  147                        | syntax-expression . "`+`" syntax-expression
  148                        | syntax-expression . "`==`" syntax-expression
  149                        | syntax-expression . "`!=`" syntax-expression
  166 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 94
    "`==`"         shift, and go to state 96
    "`!=`"         shift, and go to state 97
    "`...`"        shift, and go to state 98
    "`.`"          shift, and go to state 99
    "`+`"          shift, and go to state 100

    $default  reduce using rule 45 (generic-statement)


State 157

  143 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  144                        | syntax-expression . "`.`" apostrophe-expression
  145                        | syntax-expression . INTEGER_INDEX
  147                        | syntax-expression . "`+`" syntax-expression
  148                        | syntax-expression . "`==`" syntax-expression
  148                        | syntax-expression "`==`" syntax-expression .
  149                        | syntax-expression . "`!=`" syntax-expression
  166 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 94
    "`.`"          shift, and go to state 99
    "`+`"          shift, and go to state 100

    $default  reduce using rule 148 (syntax-expression-wo-ii)


State 158

  143 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  144                        | syntax-expression . "`.`" apostrophe-expression
  145                        | syntax-expression . INTEGER_INDEX
  147                        | syntax-expression . "`+`" syntax-expression
  148                        | syntax-expression . "`==`" syntax-expression
  149                        | syntax-expression . "`!=`" syntax-expression
  149                        | syntax-expression "`!=`" syntax-expression .
  166 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 94
    "`.`"          shift, and go to state 99
    "`+`"          shift, and go to state 100

    $default  reduce using rule 149 (syntax-expression-wo-ii)


State 159

  143 syntax-expression-wo-ii: syntax-expression "`.`" identifier .

    $default  reduce using rule 143 (syntax-expression-wo-ii)


State 160

  144 syntax-expression-wo-ii: syntax-expression "`.`" apostrophe-expression .

    $default  reduce using rule 144 (syntax-expression-wo-ii)


State 161

  143 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  144                        | syntax-expression . "`.`" apostrophe-expression
  145                        | syntax-expression . INTEGER_INDEX
  147                        | syntax-expression . "`+`" syntax-expression
  147                        | syntax-expression "`+`" syntax-expression .
  148                        | syntax-expression . "`==`" syntax-expression
  149                        | syntax-expression . "`!=`" syntax-expression
  166 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 94
    "`.`"          shift, and go to state 99

    $default  reduce using rule 147 (syntax-expression-wo-ii)


State 162

  161 call-expression: apostrophe-expression "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 220


State 163

  160 call-expression: call-expression "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 221


State 164

  162 call-expression: lambda-expression "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 222


State 165

   73 argument-list: argument-list "," argument .

    $default  reduce using rule 73 (argument-list)


State 166

   10 statement: EXTERN VAR identifier "`:`" . type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 126
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 127
    "`[`"                shift, and go to state 128
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24

    identifier             go to state 39
    qname                  go to state 129
    fn-start-decl          go to state 49
    apostrophe-expression  go to state 130
    call-expression        go to state 131
    lambda-expression      go to state 132
    type-expr              go to state 223


State 167

  157 new-expression: "`new`" qname "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 224


State 168

  158 new-expression: "`new`" apostrophe-expression "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 225


State 169

   48 infunction-statement: "`continue`" .

    $default  reduce using rule 48 (infunction-statement)


State 170

   47 infunction-statement: "`break`" .

    $default  reduce using rule 47 (infunction-statement)


State 171

   36 finished-statement: STRUCT . qname braced-statements
   37                   | STRUCT . qname "`(`" parameter-list-opt "`)`" braced-statements

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 10

    identifier  go to state 39
    qname       go to state 226


State 172

   28 finished-infunction-statement-any: infunction-statement-any . "`;`"
   39 infunction-statement-set: infunction-statement-any .

    "`;`"  shift, and go to state 227

    $default  reduce using rule 39 (infunction-statement-set)


State 173

   24 infunction-statement-any: finished-infunction-statement-any . infunction-statement
   26 finished-infunction-statement-any: finished-infunction-statement-any . "`;`"
   27                                  | finished-infunction-statement-any . finished-statement
   40 infunction-statement-set: finished-infunction-statement-any .

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`;`"                shift, and go to state 228
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    LET                  shift, and go to state 14
    "`new`"              shift, and go to state 16
    "`while`"            shift, and go to state 17
    "`for`"              shift, and go to state 18
    "`if`"               shift, and go to state 19
    "`continue`"         shift, and go to state 169
    "`break`"            shift, and go to state 170
    "`return`"           shift, and go to state 20
    USING                shift, and go to state 21
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    ENUM                 shift, and go to state 25
    STRUCT               shift, and go to state 171
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    $default  reduce using rule 40 (infunction-statement-set)

    let-decl                      go to state 34
    let-decl-start                go to state 35
    let-decl-start-with-opt-type  go to state 36
    finished-statement            go to state 229
    generic-statement             go to state 176
    infunction-statement          go to state 230
    identifier                    go to state 39
    qname                         go to state 40
    fn-start-decl                 go to state 178
    syntax-expression             go to state 42
    syntax-expression-wo-ii       go to state 43
    apostrophe-expression         go to state 44
    new-expression                go to state 45
    call-expression               go to state 46
    lambda-expression             go to state 47
    compound-expression           go to state 48


State 174

   25 finished-infunction-statement-any: finished-statement .

    $default  reduce using rule 25 (finished-infunction-statement-any)


State 175

   29 braced-statements: "`{`" infunction-statement-set . "`}`"

    "`}`"  shift, and go to state 231


State 176

   46 infunction-statement: generic-statement .

    $default  reduce using rule 46 (infunction-statement)


State 177

   23 infunction-statement-any: infunction-statement .

    $default  reduce using rule 23 (infunction-statement-any)


State 178

   35 finished-statement: fn-start-decl . fn-decl braced-statements
  163 lambda-expression: fn-start-decl . "`(`" parameter-list-opt "`)`" braced-statements
  164                  | fn-start-decl . "`(`" parameter-list-opt "`)`" "`->`" type-expr braced-statements

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 10
    "`(`"       shift, and go to state 89
    "`new`"     shift, and go to state 90

    identifier  go to state 39
    qname       go to state 91
    fn-name     go to state 92
    fn-decl     go to state 232


State 179

   31 finished-statement: "`while`" syntax-expression "`;`" syntax-expression . braced-statements
  143 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  144                        | syntax-expression . "`.`" apostrophe-expression
  145                        | syntax-expression . INTEGER_INDEX
  147                        | syntax-expression . "`+`" syntax-expression
  148                        | syntax-expression . "`==`" syntax-expression
  149                        | syntax-expression . "`!=`" syntax-expression
  166 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 94
    "`==`"         shift, and go to state 96
    "`!=`"         shift, and go to state 97
    "`...`"        shift, and go to state 98
    "`{`"          shift, and go to state 115
    "`.`"          shift, and go to state 99
    "`+`"          shift, and go to state 100

    braced-statements  go to state 233


State 180

   32 finished-statement: "`for`" syntax-expression "`in`" syntax-expression . braced-statements
  143 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  144                        | syntax-expression . "`.`" apostrophe-expression
  145                        | syntax-expression . INTEGER_INDEX
  147                        | syntax-expression . "`+`" syntax-expression
  148                        | syntax-expression . "`==`" syntax-expression
  149                        | syntax-expression . "`!=`" syntax-expression
  166 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 94
    "`==`"         shift, and go to state 96
    "`!=`"         shift, and go to state 97
    "`...`"        shift, and go to state 98
    "`{`"          shift, and go to state 115
    "`.`"          shift, and go to state 99
    "`+`"          shift, and go to state 100

    braced-statements  go to state 234


State 181

   34 finished-statement: "`if`" syntax-expression braced-statements "`else`" . braced-statements

    "`{`"  shift, and go to state 115

    braced-statements  go to state 235


State 182

   68 using-decl: qname "`=>`" syntax-expression .
  143 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  144                        | syntax-expression . "`.`" apostrophe-expression
  145                        | syntax-expression . INTEGER_INDEX
  147                        | syntax-expression . "`+`" syntax-expression
  148                        | syntax-expression . "`==`" syntax-expression
  149                        | syntax-expression . "`!=`" syntax-expression
  166 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 94
    "`==`"         shift, and go to state 96
    "`!=`"         shift, and go to state 97
    "`...`"        shift, and go to state 98
    "`.`"          shift, and go to state 99
    "`+`"          shift, and go to state 100

    $default  reduce using rule 68 (using-decl)


State 183

   69 using-decl: qname "`(`" parameter-list-opt . "`)`" "`=>`" syntax-expression

    "`)`"  shift, and go to state 236


State 184

   65 case-decl: identifier .

    $default  reduce using rule 65 (case-decl)


State 185

   60 enum-decl: qname "`{`" case-list-opt . "`}`"

    "`}`"  shift, and go to state 237


State 186

   62 case-list-opt: case-list .
   64 case-list: case-list . "," case-decl

    ","  shift, and go to state 238

    $default  reduce using rule 62 (case-list-opt)


State 187

   63 case-list: case-decl .

    $default  reduce using rule 63 (case-list)


State 188

   66 struct-decl: qname "`=>`" "`(`" . field-list-opt "`)`"

    IDENTIFIER  shift, and go to state 2

    $default  reduce using rule 78 (field-list-opt)

    identifier      go to state 239
    field-list-opt  go to state 240
    field-list      go to state 241
    field           go to state 242


State 189

   37 finished-statement: STRUCT qname "`(`" parameter-list-opt . "`)`" braced-statements
   67 struct-decl: qname "`(`" parameter-list-opt . "`)`" "`=>`" "`(`" field-list-opt "`)`"

    "`)`"  shift, and go to state 243


State 190

  171 type-expr: "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 244


State 191

  170 type-expr: "`[`" type-expr . "`]`"
  172          | type-expr . "`[`" INTEGER "`]`"
  173          | type-expr . "`|`" type-expr
  174          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 192
    "`[`"   shift, and go to state 193
    "`]`"   shift, and go to state 245
    "`|`"   shift, and go to state 194


State 192

  174 type-expr: type-expr "`->`" . type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 126
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 127
    "`[`"                shift, and go to state 128
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24

    identifier             go to state 39
    qname                  go to state 129
    fn-start-decl          go to state 49
    apostrophe-expression  go to state 130
    call-expression        go to state 131
    lambda-expression      go to state 132
    type-expr              go to state 246


State 193

  172 type-expr: type-expr "`[`" . INTEGER "`]`"

    INTEGER  shift, and go to state 247


State 194

  173 type-expr: type-expr "`|`" . type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 126
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 127
    "`[`"                shift, and go to state 128
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24

    identifier             go to state 39
    qname                  go to state 129
    fn-start-decl          go to state 49
    apostrophe-expression  go to state 130
    call-expression        go to state 131
    lambda-expression      go to state 132
    type-expr              go to state 248


State 195

  159 call-expression: qname "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 159 (call-expression)


State 196

  105 parameter-decl: INTERNAL_IDENTIFIER "`=>`" . parameter-value-constraint-set

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`@`"                shift, and go to state 139
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    identifier                      go to state 39
    qname                           go to state 40
    fn-start-decl                   go to state 49
    parameter-value-constraint-set  go to state 249
    parameter-matched-value         go to state 201
    concept-expression              go to state 202
    syntax-expression               go to state 203
    syntax-expression-wo-ii         go to state 43
    apostrophe-expression           go to state 44
    new-expression                  go to state 45
    call-expression                 go to state 46
    lambda-expression               go to state 47
    compound-expression             go to state 51


State 197

  106 parameter-decl: INTERNAL_IDENTIFIER "`...`" . "`:`" parameter-constraint-set
  107               | INTERNAL_IDENTIFIER "`...`" . "`:`" "const modifier" parameter-constraint-set
  108               | INTERNAL_IDENTIFIER "`...`" . "`:`" "mut modifier" parameter-constraint-set
  123 parameter-matched-type: INTERNAL_IDENTIFIER "`...`" .

    "`:`"  shift, and go to state 250

    $default  reduce using rule 123 (parameter-matched-type)


State 198

  102 parameter-decl: INTERNAL_IDENTIFIER "`:`" . parameter-constraint-set parameter-default-value-opt
  103               | INTERNAL_IDENTIFIER "`:`" . "const modifier" parameter-constraint-set parameter-default-value-opt
  104               | INTERNAL_IDENTIFIER "`:`" . "mut modifier" parameter-constraint-set parameter-default-value-opt

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 204
    "`@`"                shift, and go to state 139
    "`_`"                shift, and go to state 140
    "`::`"               shift, and go to state 10
    "const modifier"     shift, and go to state 251
    "mut modifier"       shift, and go to state 252

    identifier                    go to state 39
    qname                         go to state 145
    parameter-constraint-set      go to state 253
    parameter-matched-type        go to state 150
    basic-parameter-matched-type  go to state 151
    concept-expression            go to state 152


State 199

   53 qname: qname . "`::`" identifier
  128 concept-expression: "`@`" qname .

    "`::`"  shift, and go to state 87

    $default  reduce using rule 128 (concept-expression)


State 200

  112 parameter-decl: "`=>`" parameter-value-constraint-set .
  118 parameter-value-constraint-set: parameter-value-constraint-set . concept-expression

    "`@`"  shift, and go to state 139

    $default  reduce using rule 112 (parameter-decl)

    concept-expression  go to state 254


State 201

  116 parameter-value-constraint-set: parameter-matched-value .

    $default  reduce using rule 116 (parameter-value-constraint-set)


State 202

  117 parameter-value-constraint-set: concept-expression .

    $default  reduce using rule 117 (parameter-value-constraint-set)


State 203

  119 parameter-matched-value: syntax-expression .
  143 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  144                        | syntax-expression . "`.`" apostrophe-expression
  145                        | syntax-expression . INTEGER_INDEX
  147                        | syntax-expression . "`+`" syntax-expression
  148                        | syntax-expression . "`==`" syntax-expression
  149                        | syntax-expression . "`!=`" syntax-expression
  166 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 94
    "`==`"         shift, and go to state 96
    "`!=`"         shift, and go to state 97
    "`...`"        shift, and go to state 98
    "`.`"          shift, and go to state 99
    "`+`"          shift, and go to state 100

    $default  reduce using rule 119 (parameter-matched-value)


State 204

  122 parameter-matched-type: INTERNAL_IDENTIFIER .
  123                       | INTERNAL_IDENTIFIER . "`...`"

    "`...`"  shift, and go to state 255

    $default  reduce using rule 122 (parameter-matched-type)


State 205

  110 parameter-decl: "const modifier" parameter-constraint-set . parameter-default-value-opt
  115 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`=`"  shift, and go to state 213
    "`@`"  shift, and go to state 139

    $default  reduce using rule 96 (parameter-default-value-opt)

    parameter-default-value-opt  go to state 256
    concept-expression           go to state 215


State 206

  111 parameter-decl: "mut modifier" parameter-constraint-set . parameter-default-value-opt
  115 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`=`"  shift, and go to state 213
    "`@`"  shift, and go to state 139

    $default  reduce using rule 96 (parameter-default-value-opt)

    parameter-default-value-opt  go to state 257
    concept-expression           go to state 215


State 207

   50 internal-identifier: INTERNAL_IDENTIFIER .

    $default  reduce using rule 50 (internal-identifier)


State 208

   95 internal-identifier-opt: internal-identifier .

    $default  reduce using rule 95 (internal-identifier-opt)


State 209

   98 parameter-decl: identifier internal-identifier-opt . "`:`" parameter-constraint-set parameter-default-value-opt
   99               | identifier internal-identifier-opt . "`:`" "const modifier" parameter-constraint-set parameter-default-value-opt
  100               | identifier internal-identifier-opt . "`:`" "mut modifier" parameter-constraint-set parameter-default-value-opt
  101               | identifier internal-identifier-opt . "`=>`" parameter-value-constraint-set

    "`=>`"  shift, and go to state 258
    "`:`"   shift, and go to state 259


State 210

  126 basic-parameter-matched-type: qname "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    $default  reduce using rule 70 (argument-list-opt)

    identifier               go to state 53
    qname                    go to state 40
    fn-start-decl            go to state 49
    argument-list-opt        go to state 260
    argument-list            go to state 137
    argument                 go to state 55
    argument-name            go to state 56
    syntax-expression        go to state 57
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 211

  163 lambda-expression: fn-start-decl "`(`" parameter-list-opt "`)`" . braced-statements
  164                  | fn-start-decl "`(`" parameter-list-opt "`)`" . "`->`" type-expr braced-statements

    "`->`"  shift, and go to state 261
    "`{`"   shift, and go to state 115

    braced-statements  go to state 262


State 212

   93 parameter-list: parameter-list "," . parameter-decl

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 138
    "`@`"                shift, and go to state 139
    "`_`"                shift, and go to state 140
    "`=>`"               shift, and go to state 141
    "`::`"               shift, and go to state 10
    "const modifier"     shift, and go to state 142
    "mut modifier"       shift, and go to state 143

    identifier                    go to state 144
    qname                         go to state 145
    parameter-decl                go to state 263
    parameter-constraint-set      go to state 149
    parameter-matched-type        go to state 150
    basic-parameter-matched-type  go to state 151
    concept-expression            go to state 152


State 213

   97 parameter-default-value-opt: "`=`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    identifier               go to state 39
    qname                    go to state 40
    fn-start-decl            go to state 49
    syntax-expression        go to state 264
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 214

  109 parameter-decl: parameter-constraint-set parameter-default-value-opt .

    $default  reduce using rule 109 (parameter-decl)


State 215

  115 parameter-constraint-set: parameter-constraint-set concept-expression .

    $default  reduce using rule 115 (parameter-constraint-set)


State 216

  121 parameter-matched-type: basic-parameter-matched-type "`...`" .

    $default  reduce using rule 121 (parameter-matched-type)


State 217

  127 basic-parameter-matched-type: basic-parameter-matched-type "`|`" . basic-parameter-matched-type

    IDENTIFIER  shift, and go to state 2
    "`_`"       shift, and go to state 140
    "`::`"      shift, and go to state 10

    identifier                    go to state 39
    qname                         go to state 145
    basic-parameter-matched-type  go to state 265


State 218

   58 fn-decl: fn-name "`(`" parameter-list-opt . "`)`"
   59        | fn-name "`(`" parameter-list-opt . "`)`" "`->`" type-expr

    "`)`"  shift, and go to state 266


State 219

   13 statement: fn-start-decl fn-decl "`=>`" syntax-expression .
  143 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  144                        | syntax-expression . "`.`" apostrophe-expression
  145                        | syntax-expression . INTEGER_INDEX
  147                        | syntax-expression . "`+`" syntax-expression
  148                        | syntax-expression . "`==`" syntax-expression
  149                        | syntax-expression . "`!=`" syntax-expression
  166 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 94
    "`==`"         shift, and go to state 96
    "`!=`"         shift, and go to state 97
    "`...`"        shift, and go to state 98
    "`.`"          shift, and go to state 99
    "`+`"          shift, and go to state 100

    $default  reduce using rule 13 (statement)


State 220

  161 call-expression: apostrophe-expression "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 161 (call-expression)


State 221

  160 call-expression: call-expression "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 160 (call-expression)


State 222

  162 call-expression: lambda-expression "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 162 (call-expression)


State 223

   10 statement: EXTERN VAR identifier "`:`" type-expr .
  172 type-expr: type-expr . "`[`" INTEGER "`]`"
  173          | type-expr . "`|`" type-expr
  174          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 192
    "`[`"   shift, and go to state 193
    "`|`"   shift, and go to state 194

    $default  reduce using rule 10 (statement)


State 224

  157 new-expression: "`new`" qname "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 157 (new-expression)


State 225

  158 new-expression: "`new`" apostrophe-expression "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 158 (new-expression)


State 226

   36 finished-statement: STRUCT qname . braced-statements
   37                   | STRUCT qname . "`(`" parameter-list-opt "`)`" braced-statements
   53 qname: qname . "`::`" identifier

    "`::`"  shift, and go to state 87
    "`(`"   shift, and go to state 267
    "`{`"   shift, and go to state 115

    braced-statements  go to state 125


State 227

   28 finished-infunction-statement-any: infunction-statement-any "`;`" .

    $default  reduce using rule 28 (finished-infunction-statement-any)


State 228

   26 finished-infunction-statement-any: finished-infunction-statement-any "`;`" .

    $default  reduce using rule 26 (finished-infunction-statement-any)


State 229

   27 finished-infunction-statement-any: finished-infunction-statement-any finished-statement .

    $default  reduce using rule 27 (finished-infunction-statement-any)


State 230

   24 infunction-statement-any: finished-infunction-statement-any infunction-statement .

    $default  reduce using rule 24 (infunction-statement-any)


State 231

   29 braced-statements: "`{`" infunction-statement-set "`}`" .

    $default  reduce using rule 29 (braced-statements)


State 232

   35 finished-statement: fn-start-decl fn-decl . braced-statements

    "`{`"  shift, and go to state 115

    braced-statements  go to state 155


State 233

   31 finished-statement: "`while`" syntax-expression "`;`" syntax-expression braced-statements .

    $default  reduce using rule 31 (finished-statement)


State 234

   32 finished-statement: "`for`" syntax-expression "`in`" syntax-expression braced-statements .

    $default  reduce using rule 32 (finished-statement)


State 235

   34 finished-statement: "`if`" syntax-expression braced-statements "`else`" braced-statements .

    $default  reduce using rule 34 (finished-statement)


State 236

   69 using-decl: qname "`(`" parameter-list-opt "`)`" . "`=>`" syntax-expression

    "`=>`"  shift, and go to state 268


State 237

   60 enum-decl: qname "`{`" case-list-opt "`}`" .

    $default  reduce using rule 60 (enum-decl)


State 238

   64 case-list: case-list "," . case-decl

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 184
    case-decl   go to state 269


State 239

   84 field: identifier . "`:`" field-type-expr field-default-value-opt
   85      | identifier . "`=>`" field-type-expr field-default-value-opt

    "`=>`"  shift, and go to state 270
    "`:`"   shift, and go to state 271


State 240

   66 struct-decl: qname "`=>`" "`(`" field-list-opt . "`)`"

    "`)`"  shift, and go to state 272


State 241

   79 field-list-opt: field-list .
   81 field-list: field-list . "," field

    ","  shift, and go to state 273

    $default  reduce using rule 79 (field-list-opt)


State 242

   80 field-list: field .

    $default  reduce using rule 80 (field-list)


State 243

   37 finished-statement: STRUCT qname "`(`" parameter-list-opt "`)`" . braced-statements
   67 struct-decl: qname "`(`" parameter-list-opt "`)`" . "`=>`" "`(`" field-list-opt "`)`"

    "`=>`"  shift, and go to state 274
    "`{`"   shift, and go to state 115

    braced-statements  go to state 275


State 244

  171 type-expr: "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 171 (type-expr)


State 245

  170 type-expr: "`[`" type-expr "`]`" .

    $default  reduce using rule 170 (type-expr)


State 246

  172 type-expr: type-expr . "`[`" INTEGER "`]`"
  173          | type-expr . "`|`" type-expr
  174          | type-expr . "`->`" type-expr
  174          | type-expr "`->`" type-expr .

    $default  reduce using rule 174 (type-expr)


State 247

  172 type-expr: type-expr "`[`" INTEGER . "`]`"

    "`]`"  shift, and go to state 276


State 248

  172 type-expr: type-expr . "`[`" INTEGER "`]`"
  173          | type-expr . "`|`" type-expr
  173          | type-expr "`|`" type-expr .
  174          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 192
    "`[`"   shift, and go to state 193

    $default  reduce using rule 173 (type-expr)


State 249

  105 parameter-decl: INTERNAL_IDENTIFIER "`=>`" parameter-value-constraint-set .
  118 parameter-value-constraint-set: parameter-value-constraint-set . concept-expression

    "`@`"  shift, and go to state 139

    $default  reduce using rule 105 (parameter-decl)

    concept-expression  go to state 254


State 250

  106 parameter-decl: INTERNAL_IDENTIFIER "`...`" "`:`" . parameter-constraint-set
  107               | INTERNAL_IDENTIFIER "`...`" "`:`" . "const modifier" parameter-constraint-set
  108               | INTERNAL_IDENTIFIER "`...`" "`:`" . "mut modifier" parameter-constraint-set

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 204
    "`@`"                shift, and go to state 139
    "`_`"                shift, and go to state 140
    "`::`"               shift, and go to state 10
    "const modifier"     shift, and go to state 277
    "mut modifier"       shift, and go to state 278

    identifier                    go to state 39
    qname                         go to state 145
    parameter-constraint-set      go to state 279
    parameter-matched-type        go to state 150
    basic-parameter-matched-type  go to state 151
    concept-expression            go to state 152


State 251

  103 parameter-decl: INTERNAL_IDENTIFIER "`:`" "const modifier" . parameter-constraint-set parameter-default-value-opt

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 204
    "`@`"                shift, and go to state 139
    "`_`"                shift, and go to state 140
    "`::`"               shift, and go to state 10

    identifier                    go to state 39
    qname                         go to state 145
    parameter-constraint-set      go to state 280
    parameter-matched-type        go to state 150
    basic-parameter-matched-type  go to state 151
    concept-expression            go to state 152


State 252

  104 parameter-decl: INTERNAL_IDENTIFIER "`:`" "mut modifier" . parameter-constraint-set parameter-default-value-opt

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 204
    "`@`"                shift, and go to state 139
    "`_`"                shift, and go to state 140
    "`::`"               shift, and go to state 10

    identifier                    go to state 39
    qname                         go to state 145
    parameter-constraint-set      go to state 281
    parameter-matched-type        go to state 150
    basic-parameter-matched-type  go to state 151
    concept-expression            go to state 152


State 253

  102 parameter-decl: INTERNAL_IDENTIFIER "`:`" parameter-constraint-set . parameter-default-value-opt
  115 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`=`"  shift, and go to state 213
    "`@`"  shift, and go to state 139

    $default  reduce using rule 96 (parameter-default-value-opt)

    parameter-default-value-opt  go to state 282
    concept-expression           go to state 215


State 254

  118 parameter-value-constraint-set: parameter-value-constraint-set concept-expression .

    $default  reduce using rule 118 (parameter-value-constraint-set)


State 255

  123 parameter-matched-type: INTERNAL_IDENTIFIER "`...`" .

    $default  reduce using rule 123 (parameter-matched-type)


State 256

  110 parameter-decl: "const modifier" parameter-constraint-set parameter-default-value-opt .

    $default  reduce using rule 110 (parameter-decl)


State 257

  111 parameter-decl: "mut modifier" parameter-constraint-set parameter-default-value-opt .

    $default  reduce using rule 111 (parameter-decl)


State 258

  101 parameter-decl: identifier internal-identifier-opt "`=>`" . parameter-value-constraint-set

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`@`"                shift, and go to state 139
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    identifier                      go to state 39
    qname                           go to state 40
    fn-start-decl                   go to state 49
    parameter-value-constraint-set  go to state 283
    parameter-matched-value         go to state 201
    concept-expression              go to state 202
    syntax-expression               go to state 203
    syntax-expression-wo-ii         go to state 43
    apostrophe-expression           go to state 44
    new-expression                  go to state 45
    call-expression                 go to state 46
    lambda-expression               go to state 47
    compound-expression             go to state 51


State 259

   98 parameter-decl: identifier internal-identifier-opt "`:`" . parameter-constraint-set parameter-default-value-opt
   99               | identifier internal-identifier-opt "`:`" . "const modifier" parameter-constraint-set parameter-default-value-opt
  100               | identifier internal-identifier-opt "`:`" . "mut modifier" parameter-constraint-set parameter-default-value-opt

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 204
    "`@`"                shift, and go to state 139
    "`_`"                shift, and go to state 140
    "`::`"               shift, and go to state 10
    "const modifier"     shift, and go to state 284
    "mut modifier"       shift, and go to state 285

    identifier                    go to state 39
    qname                         go to state 145
    parameter-constraint-set      go to state 286
    parameter-matched-type        go to state 150
    basic-parameter-matched-type  go to state 151
    concept-expression            go to state 152


State 260

  126 basic-parameter-matched-type: qname "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 287


State 261

  164 lambda-expression: fn-start-decl "`(`" parameter-list-opt "`)`" "`->`" . type-expr braced-statements

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 126
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 127
    "`[`"                shift, and go to state 128
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24

    identifier             go to state 39
    qname                  go to state 129
    fn-start-decl          go to state 49
    apostrophe-expression  go to state 130
    call-expression        go to state 131
    lambda-expression      go to state 132
    type-expr              go to state 288


State 262

  163 lambda-expression: fn-start-decl "`(`" parameter-list-opt "`)`" braced-statements .

    $default  reduce using rule 163 (lambda-expression)


State 263

   93 parameter-list: parameter-list "," parameter-decl .

    $default  reduce using rule 93 (parameter-list)


State 264

   97 parameter-default-value-opt: "`=`" syntax-expression .
  143 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  144                        | syntax-expression . "`.`" apostrophe-expression
  145                        | syntax-expression . INTEGER_INDEX
  147                        | syntax-expression . "`+`" syntax-expression
  148                        | syntax-expression . "`==`" syntax-expression
  149                        | syntax-expression . "`!=`" syntax-expression
  166 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 94
    "`==`"         shift, and go to state 96
    "`!=`"         shift, and go to state 97
    "`...`"        shift, and go to state 98
    "`.`"          shift, and go to state 99
    "`+`"          shift, and go to state 100

    $default  reduce using rule 97 (parameter-default-value-opt)


State 265

  127 basic-parameter-matched-type: basic-parameter-matched-type . "`|`" basic-parameter-matched-type
  127                             | basic-parameter-matched-type "`|`" basic-parameter-matched-type .

    $default  reduce using rule 127 (basic-parameter-matched-type)


State 266

   58 fn-decl: fn-name "`(`" parameter-list-opt "`)`" .
   59        | fn-name "`(`" parameter-list-opt "`)`" . "`->`" type-expr

    "`->`"  shift, and go to state 289

    $default  reduce using rule 58 (fn-decl)


State 267

   37 finished-statement: STRUCT qname "`(`" . parameter-list-opt "`)`" braced-statements

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 138
    "`@`"                shift, and go to state 139
    "`_`"                shift, and go to state 140
    "`=>`"               shift, and go to state 141
    "`::`"               shift, and go to state 10
    "const modifier"     shift, and go to state 142
    "mut modifier"       shift, and go to state 143

    $default  reduce using rule 90 (parameter-list-opt)

    identifier                    go to state 144
    qname                         go to state 145
    parameter-list-opt            go to state 290
    parameter-list                go to state 147
    parameter-decl                go to state 148
    parameter-constraint-set      go to state 149
    parameter-matched-type        go to state 150
    basic-parameter-matched-type  go to state 151
    concept-expression            go to state 152


State 268

   69 using-decl: qname "`(`" parameter-list-opt "`)`" "`=>`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    identifier               go to state 39
    qname                    go to state 40
    fn-start-decl            go to state 49
    syntax-expression        go to state 291
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 269

   64 case-list: case-list "," case-decl .

    $default  reduce using rule 64 (case-list)


State 270

   85 field: identifier "`=>`" . field-type-expr field-default-value-opt

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 292
    "`::`"               shift, and go to state 10

    identifier       go to state 39
    qname            go to state 293
    field-type-expr  go to state 294


State 271

   84 field: identifier "`:`" . field-type-expr field-default-value-opt

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 292
    "`::`"               shift, and go to state 10

    identifier       go to state 39
    qname            go to state 293
    field-type-expr  go to state 295


State 272

   66 struct-decl: qname "`=>`" "`(`" field-list-opt "`)`" .

    $default  reduce using rule 66 (struct-decl)


State 273

   81 field-list: field-list "," . field

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 239
    field       go to state 296


State 274

   67 struct-decl: qname "`(`" parameter-list-opt "`)`" "`=>`" . "`(`" field-list-opt "`)`"

    "`(`"  shift, and go to state 297


State 275

   37 finished-statement: STRUCT qname "`(`" parameter-list-opt "`)`" braced-statements .

    $default  reduce using rule 37 (finished-statement)


State 276

  172 type-expr: type-expr "`[`" INTEGER "`]`" .

    $default  reduce using rule 172 (type-expr)


State 277

  107 parameter-decl: INTERNAL_IDENTIFIER "`...`" "`:`" "const modifier" . parameter-constraint-set

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 204
    "`@`"                shift, and go to state 139
    "`_`"                shift, and go to state 140
    "`::`"               shift, and go to state 10

    identifier                    go to state 39
    qname                         go to state 145
    parameter-constraint-set      go to state 298
    parameter-matched-type        go to state 150
    basic-parameter-matched-type  go to state 151
    concept-expression            go to state 152


State 278

  108 parameter-decl: INTERNAL_IDENTIFIER "`...`" "`:`" "mut modifier" . parameter-constraint-set

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 204
    "`@`"                shift, and go to state 139
    "`_`"                shift, and go to state 140
    "`::`"               shift, and go to state 10

    identifier                    go to state 39
    qname                         go to state 145
    parameter-constraint-set      go to state 299
    parameter-matched-type        go to state 150
    basic-parameter-matched-type  go to state 151
    concept-expression            go to state 152


State 279

  106 parameter-decl: INTERNAL_IDENTIFIER "`...`" "`:`" parameter-constraint-set .
  115 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`@`"  shift, and go to state 139

    $default  reduce using rule 106 (parameter-decl)

    concept-expression  go to state 215


State 280

  103 parameter-decl: INTERNAL_IDENTIFIER "`:`" "const modifier" parameter-constraint-set . parameter-default-value-opt
  115 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`=`"  shift, and go to state 213
    "`@`"  shift, and go to state 139

    $default  reduce using rule 96 (parameter-default-value-opt)

    parameter-default-value-opt  go to state 300
    concept-expression           go to state 215


State 281

  104 parameter-decl: INTERNAL_IDENTIFIER "`:`" "mut modifier" parameter-constraint-set . parameter-default-value-opt
  115 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`=`"  shift, and go to state 213
    "`@`"  shift, and go to state 139

    $default  reduce using rule 96 (parameter-default-value-opt)

    parameter-default-value-opt  go to state 301
    concept-expression           go to state 215


State 282

  102 parameter-decl: INTERNAL_IDENTIFIER "`:`" parameter-constraint-set parameter-default-value-opt .

    $default  reduce using rule 102 (parameter-decl)


State 283

  101 parameter-decl: identifier internal-identifier-opt "`=>`" parameter-value-constraint-set .
  118 parameter-value-constraint-set: parameter-value-constraint-set . concept-expression

    "`@`"  shift, and go to state 139

    $default  reduce using rule 101 (parameter-decl)

    concept-expression  go to state 254


State 284

   99 parameter-decl: identifier internal-identifier-opt "`:`" "const modifier" . parameter-constraint-set parameter-default-value-opt

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 204
    "`@`"                shift, and go to state 139
    "`_`"                shift, and go to state 140
    "`::`"               shift, and go to state 10

    identifier                    go to state 39
    qname                         go to state 145
    parameter-constraint-set      go to state 302
    parameter-matched-type        go to state 150
    basic-parameter-matched-type  go to state 151
    concept-expression            go to state 152


State 285

  100 parameter-decl: identifier internal-identifier-opt "`:`" "mut modifier" . parameter-constraint-set parameter-default-value-opt

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 204
    "`@`"                shift, and go to state 139
    "`_`"                shift, and go to state 140
    "`::`"               shift, and go to state 10

    identifier                    go to state 39
    qname                         go to state 145
    parameter-constraint-set      go to state 303
    parameter-matched-type        go to state 150
    basic-parameter-matched-type  go to state 151
    concept-expression            go to state 152


State 286

   98 parameter-decl: identifier internal-identifier-opt "`:`" parameter-constraint-set . parameter-default-value-opt
  115 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`=`"  shift, and go to state 213
    "`@`"  shift, and go to state 139

    $default  reduce using rule 96 (parameter-default-value-opt)

    parameter-default-value-opt  go to state 304
    concept-expression           go to state 215


State 287

  126 basic-parameter-matched-type: qname "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 126 (basic-parameter-matched-type)


State 288

  164 lambda-expression: fn-start-decl "`(`" parameter-list-opt "`)`" "`->`" type-expr . braced-statements
  172 type-expr: type-expr . "`[`" INTEGER "`]`"
  173          | type-expr . "`|`" type-expr
  174          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 192
    "`{`"   shift, and go to state 115
    "`[`"   shift, and go to state 193
    "`|`"   shift, and go to state 194

    braced-statements  go to state 305


State 289

   59 fn-decl: fn-name "`(`" parameter-list-opt "`)`" "`->`" . type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 126
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 127
    "`[`"                shift, and go to state 128
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24

    identifier             go to state 39
    qname                  go to state 129
    fn-start-decl          go to state 49
    apostrophe-expression  go to state 130
    call-expression        go to state 131
    lambda-expression      go to state 132
    type-expr              go to state 306


State 290

   37 finished-statement: STRUCT qname "`(`" parameter-list-opt . "`)`" braced-statements

    "`)`"  shift, and go to state 307


State 291

   69 using-decl: qname "`(`" parameter-list-opt "`)`" "`=>`" syntax-expression .
  143 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  144                        | syntax-expression . "`.`" apostrophe-expression
  145                        | syntax-expression . INTEGER_INDEX
  147                        | syntax-expression . "`+`" syntax-expression
  148                        | syntax-expression . "`==`" syntax-expression
  149                        | syntax-expression . "`!=`" syntax-expression
  166 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 94
    "`==`"         shift, and go to state 96
    "`!=`"         shift, and go to state 97
    "`...`"        shift, and go to state 98
    "`.`"          shift, and go to state 99
    "`+`"          shift, and go to state 100

    $default  reduce using rule 69 (using-decl)


State 292

   88 field-type-expr: INTERNAL_IDENTIFIER .

    $default  reduce using rule 88 (field-type-expr)


State 293

   53 qname: qname . "`::`" identifier
   86 field-type-expr: qname .
   87                | qname . "`(`" argument-list-opt "`)`"

    "`::`"  shift, and go to state 87
    "`(`"   shift, and go to state 308

    $default  reduce using rule 86 (field-type-expr)


State 294

   85 field: identifier "`=>`" field-type-expr . field-default-value-opt
   89 field-type-expr: field-type-expr . "`|`" field-type-expr

    "`=`"  shift, and go to state 309
    "`|`"  shift, and go to state 310

    $default  reduce using rule 82 (field-default-value-opt)

    field-default-value-opt  go to state 311


State 295

   84 field: identifier "`:`" field-type-expr . field-default-value-opt
   89 field-type-expr: field-type-expr . "`|`" field-type-expr

    "`=`"  shift, and go to state 309
    "`|`"  shift, and go to state 310

    $default  reduce using rule 82 (field-default-value-opt)

    field-default-value-opt  go to state 312


State 296

   81 field-list: field-list "," field .

    $default  reduce using rule 81 (field-list)


State 297

   67 struct-decl: qname "`(`" parameter-list-opt "`)`" "`=>`" "`(`" . field-list-opt "`)`"

    IDENTIFIER  shift, and go to state 2

    $default  reduce using rule 78 (field-list-opt)

    identifier      go to state 239
    field-list-opt  go to state 313
    field-list      go to state 241
    field           go to state 242


State 298

  107 parameter-decl: INTERNAL_IDENTIFIER "`...`" "`:`" "const modifier" parameter-constraint-set .
  115 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`@`"  shift, and go to state 139

    $default  reduce using rule 107 (parameter-decl)

    concept-expression  go to state 215


State 299

  108 parameter-decl: INTERNAL_IDENTIFIER "`...`" "`:`" "mut modifier" parameter-constraint-set .
  115 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`@`"  shift, and go to state 139

    $default  reduce using rule 108 (parameter-decl)

    concept-expression  go to state 215


State 300

  103 parameter-decl: INTERNAL_IDENTIFIER "`:`" "const modifier" parameter-constraint-set parameter-default-value-opt .

    $default  reduce using rule 103 (parameter-decl)


State 301

  104 parameter-decl: INTERNAL_IDENTIFIER "`:`" "mut modifier" parameter-constraint-set parameter-default-value-opt .

    $default  reduce using rule 104 (parameter-decl)


State 302

   99 parameter-decl: identifier internal-identifier-opt "`:`" "const modifier" parameter-constraint-set . parameter-default-value-opt
  115 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`=`"  shift, and go to state 213
    "`@`"  shift, and go to state 139

    $default  reduce using rule 96 (parameter-default-value-opt)

    parameter-default-value-opt  go to state 314
    concept-expression           go to state 215


State 303

  100 parameter-decl: identifier internal-identifier-opt "`:`" "mut modifier" parameter-constraint-set . parameter-default-value-opt
  115 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`=`"  shift, and go to state 213
    "`@`"  shift, and go to state 139

    $default  reduce using rule 96 (parameter-default-value-opt)

    parameter-default-value-opt  go to state 315
    concept-expression           go to state 215


State 304

   98 parameter-decl: identifier internal-identifier-opt "`:`" parameter-constraint-set parameter-default-value-opt .

    $default  reduce using rule 98 (parameter-decl)


State 305

  164 lambda-expression: fn-start-decl "`(`" parameter-list-opt "`)`" "`->`" type-expr braced-statements .

    $default  reduce using rule 164 (lambda-expression)


State 306

   59 fn-decl: fn-name "`(`" parameter-list-opt "`)`" "`->`" type-expr .
  172 type-expr: type-expr . "`[`" INTEGER "`]`"
  173          | type-expr . "`|`" type-expr
  174          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 192
    "`[`"   shift, and go to state 193
    "`|`"   shift, and go to state 194

    $default  reduce using rule 59 (fn-decl)


State 307

   37 finished-statement: STRUCT qname "`(`" parameter-list-opt "`)`" . braced-statements

    "`{`"  shift, and go to state 115

    braced-statements  go to state 275


State 308

   87 field-type-expr: qname "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    $default  reduce using rule 70 (argument-list-opt)

    identifier               go to state 53
    qname                    go to state 40
    fn-start-decl            go to state 49
    argument-list-opt        go to state 316
    argument-list            go to state 137
    argument                 go to state 55
    argument-name            go to state 56
    syntax-expression        go to state 57
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 309

   83 field-default-value-opt: "`=`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`.`"                shift, and go to state 12
    "`!`"                shift, and go to state 13
    "`new`"              shift, and go to state 16
    INLINE               shift, and go to state 23
    "`fn`"               shift, and go to state 24
    "nil"                shift, and go to state 27
    "true"               shift, and go to state 28
    "false"              shift, and go to state 29

    identifier               go to state 39
    qname                    go to state 40
    fn-start-decl            go to state 49
    syntax-expression        go to state 317
    syntax-expression-wo-ii  go to state 43
    apostrophe-expression    go to state 44
    new-expression           go to state 45
    call-expression          go to state 46
    lambda-expression        go to state 47
    compound-expression      go to state 51


State 310

   89 field-type-expr: field-type-expr "`|`" . field-type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 292
    "`::`"               shift, and go to state 10

    identifier       go to state 39
    qname            go to state 293
    field-type-expr  go to state 318


State 311

   85 field: identifier "`=>`" field-type-expr field-default-value-opt .

    $default  reduce using rule 85 (field)


State 312

   84 field: identifier "`:`" field-type-expr field-default-value-opt .

    $default  reduce using rule 84 (field)


State 313

   67 struct-decl: qname "`(`" parameter-list-opt "`)`" "`=>`" "`(`" field-list-opt . "`)`"

    "`)`"  shift, and go to state 319


State 314

   99 parameter-decl: identifier internal-identifier-opt "`:`" "const modifier" parameter-constraint-set parameter-default-value-opt .

    $default  reduce using rule 99 (parameter-decl)


State 315

  100 parameter-decl: identifier internal-identifier-opt "`:`" "mut modifier" parameter-constraint-set parameter-default-value-opt .

    $default  reduce using rule 100 (parameter-decl)


State 316

   87 field-type-expr: qname "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 320


State 317

   83 field-default-value-opt: "`=`" syntax-expression .
  143 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  144                        | syntax-expression . "`.`" apostrophe-expression
  145                        | syntax-expression . INTEGER_INDEX
  147                        | syntax-expression . "`+`" syntax-expression
  148                        | syntax-expression . "`==`" syntax-expression
  149                        | syntax-expression . "`!=`" syntax-expression
  166 compound-expression: syntax-expression . "`...`"

    INTEGER_INDEX  shift, and go to state 94
    "`==`"         shift, and go to state 96
    "`!=`"         shift, and go to state 97
    "`...`"        shift, and go to state 98
    "`.`"          shift, and go to state 99
    "`+`"          shift, and go to state 100

    $default  reduce using rule 83 (field-default-value-opt)


State 318

   89 field-type-expr: field-type-expr . "`|`" field-type-expr
   89                | field-type-expr "`|`" field-type-expr .

    $default  reduce using rule 89 (field-type-expr)


State 319

   67 struct-decl: qname "`(`" parameter-list-opt "`)`" "`=>`" "`(`" field-list-opt "`)`" .

    $default  reduce using rule 67 (struct-decl)


State 320

   87 field-type-expr: qname "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 87 (field-type-expr)
