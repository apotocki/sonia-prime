Nonterminals useless in grammar

    type-decl
    type-extension-any
    type-extension-list
    parameter-woa-list-opt
    parameter-woa-list
    parameter-woa-decl
    expression-list-any


Terminals unused in grammar

    COMMENT_BEGIN
    COMMENT_END
    OPERATOR_TERM
    "`->*`"
    "`~>`"
    "`.*`"
    "`++`"
    "`--`"
    "`<<`"
    "`>>`"
    "`<=`"
    "`>=`"
    "`&&`"
    "`||`"
    "`..`"
    "`+=`"
    "`-=`"
    "`*=`"
    "`/=`"
    "`%=`"
    "`<<=`"
    "`>>=`"
    "`&=`"
    "`|=`"
    "`^=`"
    "`<`"
    "`>`"
    "`.`"
    "`-`"
    "`*`"
    "`/`"
    "`%`"
    "`&`"
    "`~`"
    "`^`"
    "`$`"
    "`?`"
    "`#`"
    FOR
    VOID_
    AUTO
    CONST_
    USING
    THROW
    DELETE_
    SIZEOF
    LOWEST
    TYPE
    EXTENDS
    INT
    FLOAT


Rules useless in grammar

  100 type-decl: TYPE qname type-extension-any "`{`" parameter-woa-list-opt "`}`"

  101 type-extension-any: %empty
  102                   | EXTENDS type-extension-list

  103 type-extension-list: qname
  104                    | type-extension-list "," qname

  105 parameter-woa-list-opt: %empty
  106                       | parameter-woa-list

  107 parameter-woa-list: parameter-woa-decl
  108                   | parameter-woa-list "," parameter-woa-decl

  109 parameter-woa-decl: parameter-decl
  110                   | parameter-decl "`=`" syntax-expression

  111 expression-list-any: %empty
  112                    | syntax-expression
  113                    | expression-list-any "," syntax-expression


Grammar

    0 $accept: begin "end of file"

    1 begin: declaration_any "end of file"

    2 declaration_any: %empty
    3                | declaration_any "`;`"
    4                | declaration_any generic-decl

    5 generic-decl: EXTERN VAR identifier "`:`" type-expr "`;`"
    6             | EXTERN "`fn`" fn-decl "`;`"
    7             | INCLUDE STRING
    8             | enum-decl
    9             | fn-start-decl fn-decl "`{`" infunction_declaration_any "`}`"
   10             | fn-start-decl fn-decl "`=>`" syntax-expression "`;`"
   11             | let-decl
   12             | compound-expression "`;`"

   13 let-decl: let-decl-start-with-opt-type "`;`"
   14         | let-decl-start-with-opt-type "`=`" syntax-expression "`;`"

   15 let-decl-start: LET identifier
   16               | LET "weak modifier" identifier

   17 let-decl-start-with-opt-type: let-decl-start
   18                             | let-decl-start "`:`" type-expr

   19 infunction_declaration_any: %empty
   20                           | infunction_declaration_any "`;`"
   21                           | infunction_declaration_any opt-infunction-decl

   22 opt-infunction-decl: let-decl
   23                    | RETURN syntax-expression "`;`"
   24                    | compound-expression "`;`"

   25 identifier: IDENTIFIER

   26 qname: "`::`" identifier
   27      | identifier
   28      | qname "`::`" identifier

   29 fn-start-decl: "`fn`"
   30              | INLINE "`fn`"

   31 fn-decl: qname "`(`" parameter-list-opt "`)`"
   32        | qname "`(`" parameter-list-opt "`)`" "`->`" syntax-expression

   33 enum-decl: ENUM qname "`{`" case-list-opt "`}`"

   34 case-list-opt: %empty
   35              | case-list

   36 case-list: case-decl
   37          | case-list "," case-decl

   38 case-decl: identifier

   39 field-list-opt: %empty
   40               | field-list

   41 field-list: field-decl
   42           | field-list "," field-decl

   43 field-decl: IDENTIFIER "`:`" type-expr
   44           | type-expr

   45 parameter-name-decl: IDENTIFIER INTERNAL_IDENTIFIER "`:`"
   46                    | IDENTIFIER "`:`"
   47                    | INTERNAL_IDENTIFIER "`:`"

   48 parameter-constraint-modifier: TYPENAME
   49                              | "const modifier"

   50 parameter-constraint-modifier-opt: parameter-constraint-modifier
   51                                  | %empty

   52 parameter-constraint-set: syntax-expression-wo-ii
   53                         | INTERNAL_IDENTIFIER
   54                         | concept-expression
   55                         | parameter-constraint-set INTERNAL_IDENTIFIER
   56                         | parameter-constraint-set concept-expression

   57 concept-expression: "`@`" qname

   58 syntax-expression-wo-ii: "true"
   59                        | "false"
   60                        | INTEGER
   61                        | DECIMAL
   62                        | STRING
   63                        | RESERVED_IDENTIFIER
   64                        | qname
   65                        | "`(`" syntax-expression "`)`"
   66                        | "`!`" syntax-expression
   67                        | syntax-expression "`...`"
   68                        | syntax-expression "`+`" syntax-expression
   69                        | syntax-expression "`==`" syntax-expression
   70                        | syntax-expression "`!=`" syntax-expression
   71                        | compound-expression

   72 syntax-expression: INTERNAL_IDENTIFIER
   73                  | syntax-expression-wo-ii

   74 parameter-decl: parameter-name-decl parameter-constraint-modifier-opt parameter-constraint-set
   75               | parameter-constraint-modifier parameter-constraint-set
   76               | parameter-constraint-set
   77               | "`_`"

   78 parameter-list-opt: %empty
   79                   | parameter-list

   80 parameter-list: parameter-decl
   81               | parameter-list "," parameter-decl

   82 type-expr: qname
   83          | qname "`(`" opt-named-expr-list-any "`)`"
   84          | INTERNAL_IDENTIFIER
   85          | INTERNAL_IDENTIFIER "`(`" opt-named-expr-list-any "`)`"
   86          | "`[`" type-expr "`]`"
   87          | "`(`" field-list-opt "`)`"
   88          | type-expr "`[`" INTEGER "`]`"
   89          | type-expr "`|`" type-expr
   90          | type-expr "`->`" type-expr

   91 compound-expression: syntax-expression "`(`" opt-named-expr-list-any "`)`"
   92                    | syntax-expression "`{`" opt-named-expr-list-any "`}`"
   93                    | syntax-expression "`=`" syntax-expression

   94 opt-named-expr-list-any: %empty
   95                        | opt-named-expr-list

   96 opt-named-expr-list: opt-named-expr
   97                    | opt-named-expr-list "," opt-named-expr

   98 opt-named-expr: IDENTIFIER "`:`" syntax-expression
   99               | syntax-expression


Terminals, with rules where they appear

    "end of file" (0) 0 1
    error (256)
    COMMENT_BEGIN (258)
    COMMENT_END (259)
    STRING <sonia::lang::bang::annotated_string_view> (260) 7 62
    IDENTIFIER <sonia::lang::bang::annotated_string_view> (261) 25 43 45 46 98
    INTERNAL_IDENTIFIER <sonia::lang::bang::annotated_string_view> (262) 45 47 53 55 72 84 85
    RESERVED_IDENTIFIER <sonia::lang::bang::annotated_string_view> (263) 63
    INTEGER <sonia::lang::bang::annotated_integer> (264) 60 88
    DECIMAL <sonia::lang::bang::annotated_decimal> (265) 61
    OPERATOR_TERM <sonia::string_view> (266)
    "`=`" <sonia::lang::lex::resource_location> (267) 14 93
    "`@`" (268) 57
    "`_`" (269) 77
    "`->*`" (270)
    "`->`" (271) 32 90
    "`=>`" (272) 10
    "`~>`" (273)
    "`.*`" (274)
    "`++`" (275)
    "`--`" (276)
    "`<<`" (277)
    "`>>`" (278)
    "`<=`" (279)
    "`>=`" (280)
    "`==`" <sonia::lang::lex::resource_location> (281) 69
    "`!=`" <sonia::lang::lex::resource_location> (282) 70
    "`&&`" <sonia::lang::lex::resource_location> (283)
    "`||`" <sonia::lang::lex::resource_location> (284)
    "`..`" <sonia::lang::lex::resource_location> (285)
    "`...`" <sonia::lang::lex::resource_location> (286) 67
    "`+=`" (287)
    "`-=`" (288)
    "`*=`" (289)
    "`/=`" (290)
    "`%=`" (291)
    "`<<=`" (292)
    "`>>=`" (293)
    "`&=`" (294)
    "`|=`" (295)
    "`^=`" (296)
    "`:`" (297) 5 18 43 45 46 47 98
    "`::`" (298) 26 28
    "`(`" <sonia::lang::lex::resource_location> (299) 31 32 65 83 85 87 91
    "`)`" (300) 31 32 65 83 85 87 91
    "`{`" <sonia::lang::lex::resource_location> (301) 9 33 92
    "`}`" (302) 9 33 92
    "`[`" <sonia::lang::lex::resource_location> (303) 86 88
    "`]`" (304) 86 88
    "`<`" (305)
    "`>`" (306)
    "`;`" (307) 3 5 6 10 12 13 14 20 23 24
    "`.`" <sonia::lang::lex::resource_location> (308)
    "`+`" <sonia::lang::lex::resource_location> (309) 68
    "`-`" (310)
    "`*`" (311)
    "`/`" (312)
    "`%`" (313)
    "`&`" (314)
    "`|`" (315) 89
    "`!`" <sonia::lang::lex::resource_location> (316) 66
    "`~`" (317)
    "`^`" (318)
    "," (319) 37 42 81 97
    "`$`" (320)
    "`?`" (321)
    "`#`" (322)
    LET (323) 15 16
    VAR (324) 5
    RETURN (325) 23
    EXTERN (326) 5 6
    FOR (327)
    VOID_ (328)
    AUTO (329)
    CONST_ (330)
    USING (331)
    THROW (332)
    DELETE_ (333)
    SIZEOF (334)
    LOWEST (335)
    INCLUDE (336) 7
    INLINE (337) 30
    "`fn`" <sonia::lang::lex::resource_location> (338) 6 29 30
    ENUM (339) 33
    TYPE (340)
    EXTENDS (341)
    TYPENAME (342) 48
    INT (343)
    FLOAT (344)
    "weak modifier" (345) 16
    "const modifier" (346) 49
    "true" <annotated_bool> (347) 58
    "false" <annotated_bool> (348) 59


Nonterminals, with rules where they appear

    $accept (94)
        on left: 0
    begin (95)
        on left: 1
        on right: 0
    declaration_any <declaration_set_t> (96)
        on left: 2 3 4
        on right: 1 3 4
    generic-decl <generic_declaration_t> (97)
        on left: 5 6 7 8 9 10 11 12
        on right: 4
    let-decl <let_statement_decl_t> (98)
        on left: 13 14
        on right: 11 22
    let-decl-start <let_statement_decl_t> (99)
        on left: 15 16
        on right: 17 18
    let-decl-start-with-opt-type <let_statement_decl_t> (100)
        on left: 17 18
        on right: 13 14
    infunction_declaration_any <std::vector<infunction_declaration_t>> (101)
        on left: 19 20 21
        on right: 9 20 21
    opt-infunction-decl <infunction_declaration_t> (102)
        on left: 22 23 24
        on right: 21
    identifier <sonia::lang::bang::annotated_identifier> (103)
        on left: 25
        on right: 5 15 16 26 27 28 38
    qname <sonia::lang::bang::annotated_qname> (104)
        on left: 26 27 28
        on right: 28 31 32 33 57 64 82 83
    fn-start-decl <fn_kind> (105)
        on left: 29 30
        on right: 9 10
    fn-decl <fn_pure_t> (106)
        on left: 31 32
        on right: 6 9 10
    enum-decl <enum_decl> (107)
        on left: 33
        on right: 8
    case-list-opt <std::vector<sonia::lang::bang::identifier>> (108)
        on left: 34 35
        on right: 33
    case-list <std::vector<sonia::lang::bang::identifier>> (109)
        on left: 36 37
        on right: 35 37
    case-decl <sonia::lang::bang::identifier> (110)
        on left: 38
        on right: 36 37
    field-list-opt <field_list_t> (111)
        on left: 39 40
        on right: 87
    field-list <field_list_t> (112)
        on left: 41 42
        on right: 40 42
    field-decl <field_t> (113)
        on left: 43 44
        on right: 41 42
    parameter-name-decl <parameter_name> (114)
        on left: 45 46 47
        on right: 74
    parameter-constraint-modifier <parameter_constraint_modifier_t> (115)
        on left: 48 49
        on right: 50 75
    parameter-constraint-modifier-opt <parameter_constraint_modifier_t> (116)
        on left: 50 51
        on right: 74
    parameter-constraint-set <parameter_constraint_set_t> (117)
        on left: 52 53 54 55 56
        on right: 55 56 74 75 76
    concept-expression <syntax_expression_t> (118)
        on left: 57
        on right: 54 56
    syntax-expression-wo-ii <syntax_expression_t> (119)
        on left: 58 59 60 61 62 63 64 65 66 67 68 69 70 71
        on right: 52 73
    syntax-expression <syntax_expression_t> (120)
        on left: 72 73
        on right: 10 14 23 32 65 66 67 68 69 70 91 92 93 98 99
    parameter-decl <parameter_t> (121)
        on left: 74 75 76 77
        on right: 80 81
    parameter-list-opt <parameter_woa_list_t> (122)
        on left: 78 79
        on right: 31 32
    parameter-list <parameter_woa_list_t> (123)
        on left: 80 81
        on right: 79 81
    type-expr <bang_preliminary_type> (124)
        on left: 82 83 84 85 86 87 88 89 90
        on right: 5 18 43 44 86 88 89 90
    compound-expression <syntax_expression_t> (125)
        on left: 91 92 93
        on right: 12 24 71
    opt-named-expr-list-any <named_expression_term_list_t> (126)
        on left: 94 95
        on right: 83 85 91 92
    opt-named-expr-list <named_expression_term_list_t> (127)
        on left: 96 97
        on right: 95 97
    opt-named-expr <named_expression_term_t> (128)
        on left: 98 99
        on right: 96 97


State 0

    0 $accept: . begin "end of file"

    $default  reduce using rule 2 (declaration_any)

    begin            go to state 1
    declaration_any  go to state 2


State 1

    0 $accept: begin . "end of file"

    "end of file"  shift, and go to state 3


State 2

    1 begin: declaration_any . "end of file"
    3 declaration_any: declaration_any . "`;`"
    4                | declaration_any . generic-decl

    "end of file"        shift, and go to state 4
    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`;`"                shift, and go to state 13
    "`!`"                shift, and go to state 14
    LET                  shift, and go to state 15
    EXTERN               shift, and go to state 16
    INCLUDE              shift, and go to state 17
    INLINE               shift, and go to state 18
    "`fn`"               shift, and go to state 19
    ENUM                 shift, and go to state 20
    "true"               shift, and go to state 21
    "false"              shift, and go to state 22

    generic-decl                  go to state 23
    let-decl                      go to state 24
    let-decl-start                go to state 25
    let-decl-start-with-opt-type  go to state 26
    identifier                    go to state 27
    qname                         go to state 28
    fn-start-decl                 go to state 29
    enum-decl                     go to state 30
    syntax-expression-wo-ii       go to state 31
    syntax-expression             go to state 32
    compound-expression           go to state 33


State 3

    0 $accept: begin "end of file" .

    $default  accept


State 4

    1 begin: declaration_any "end of file" .

    $default  reduce using rule 1 (begin)


State 5

   62 syntax-expression-wo-ii: STRING .

    $default  reduce using rule 62 (syntax-expression-wo-ii)


State 6

   25 identifier: IDENTIFIER .

    $default  reduce using rule 25 (identifier)


State 7

   72 syntax-expression: INTERNAL_IDENTIFIER .

    $default  reduce using rule 72 (syntax-expression)


State 8

   63 syntax-expression-wo-ii: RESERVED_IDENTIFIER .

    $default  reduce using rule 63 (syntax-expression-wo-ii)


State 9

   60 syntax-expression-wo-ii: INTEGER .

    $default  reduce using rule 60 (syntax-expression-wo-ii)


State 10

   61 syntax-expression-wo-ii: DECIMAL .

    $default  reduce using rule 61 (syntax-expression-wo-ii)


State 11

   26 qname: "`::`" . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 34


State 12

   65 syntax-expression-wo-ii: "`(`" . syntax-expression "`)`"

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 21
    "false"              shift, and go to state 22

    identifier               go to state 27
    qname                    go to state 28
    syntax-expression-wo-ii  go to state 31
    syntax-expression        go to state 35
    compound-expression      go to state 36


State 13

    3 declaration_any: declaration_any "`;`" .

    $default  reduce using rule 3 (declaration_any)


State 14

   66 syntax-expression-wo-ii: "`!`" . syntax-expression

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 21
    "false"              shift, and go to state 22

    identifier               go to state 27
    qname                    go to state 28
    syntax-expression-wo-ii  go to state 31
    syntax-expression        go to state 37
    compound-expression      go to state 36


State 15

   15 let-decl-start: LET . identifier
   16               | LET . "weak modifier" identifier

    IDENTIFIER       shift, and go to state 6
    "weak modifier"  shift, and go to state 38

    identifier  go to state 39


State 16

    5 generic-decl: EXTERN . VAR identifier "`:`" type-expr "`;`"
    6             | EXTERN . "`fn`" fn-decl "`;`"

    VAR     shift, and go to state 40
    "`fn`"  shift, and go to state 41


State 17

    7 generic-decl: INCLUDE . STRING

    STRING  shift, and go to state 42


State 18

   30 fn-start-decl: INLINE . "`fn`"

    "`fn`"  shift, and go to state 43


State 19

   29 fn-start-decl: "`fn`" .

    $default  reduce using rule 29 (fn-start-decl)


State 20

   33 enum-decl: ENUM . qname "`{`" case-list-opt "`}`"

    IDENTIFIER  shift, and go to state 6
    "`::`"      shift, and go to state 11

    identifier  go to state 27
    qname       go to state 44


State 21

   58 syntax-expression-wo-ii: "true" .

    $default  reduce using rule 58 (syntax-expression-wo-ii)


State 22

   59 syntax-expression-wo-ii: "false" .

    $default  reduce using rule 59 (syntax-expression-wo-ii)


State 23

    4 declaration_any: declaration_any generic-decl .

    $default  reduce using rule 4 (declaration_any)


State 24

   11 generic-decl: let-decl .

    $default  reduce using rule 11 (generic-decl)


State 25

   17 let-decl-start-with-opt-type: let-decl-start .
   18                             | let-decl-start . "`:`" type-expr

    "`:`"  shift, and go to state 45

    $default  reduce using rule 17 (let-decl-start-with-opt-type)


State 26

   13 let-decl: let-decl-start-with-opt-type . "`;`"
   14         | let-decl-start-with-opt-type . "`=`" syntax-expression "`;`"

    "`=`"  shift, and go to state 46
    "`;`"  shift, and go to state 47


State 27

   27 qname: identifier .

    $default  reduce using rule 27 (qname)


State 28

   28 qname: qname . "`::`" identifier
   64 syntax-expression-wo-ii: qname .

    "`::`"  shift, and go to state 48

    $default  reduce using rule 64 (syntax-expression-wo-ii)


State 29

    9 generic-decl: fn-start-decl . fn-decl "`{`" infunction_declaration_any "`}`"
   10             | fn-start-decl . fn-decl "`=>`" syntax-expression "`;`"

    IDENTIFIER  shift, and go to state 6
    "`::`"      shift, and go to state 11

    identifier  go to state 27
    qname       go to state 49
    fn-decl     go to state 50


State 30

    8 generic-decl: enum-decl .

    $default  reduce using rule 8 (generic-decl)


State 31

   73 syntax-expression: syntax-expression-wo-ii .

    $default  reduce using rule 73 (syntax-expression)


State 32

   67 syntax-expression-wo-ii: syntax-expression . "`...`"
   68                        | syntax-expression . "`+`" syntax-expression
   69                        | syntax-expression . "`==`" syntax-expression
   70                        | syntax-expression . "`!=`" syntax-expression
   91 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
   92                    | syntax-expression . "`{`" opt-named-expr-list-any "`}`"
   93                    | syntax-expression . "`=`" syntax-expression

    "`=`"    shift, and go to state 51
    "`==`"   shift, and go to state 52
    "`!=`"   shift, and go to state 53
    "`...`"  shift, and go to state 54
    "`(`"    shift, and go to state 55
    "`{`"    shift, and go to state 56
    "`+`"    shift, and go to state 57


State 33

   12 generic-decl: compound-expression . "`;`"
   71 syntax-expression-wo-ii: compound-expression .

    "`;`"  shift, and go to state 58

    $default  reduce using rule 71 (syntax-expression-wo-ii)


State 34

   26 qname: "`::`" identifier .

    $default  reduce using rule 26 (qname)


State 35

   65 syntax-expression-wo-ii: "`(`" syntax-expression . "`)`"
   67                        | syntax-expression . "`...`"
   68                        | syntax-expression . "`+`" syntax-expression
   69                        | syntax-expression . "`==`" syntax-expression
   70                        | syntax-expression . "`!=`" syntax-expression
   91 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
   92                    | syntax-expression . "`{`" opt-named-expr-list-any "`}`"
   93                    | syntax-expression . "`=`" syntax-expression

    "`=`"    shift, and go to state 51
    "`==`"   shift, and go to state 52
    "`!=`"   shift, and go to state 53
    "`...`"  shift, and go to state 54
    "`(`"    shift, and go to state 55
    "`)`"    shift, and go to state 59
    "`{`"    shift, and go to state 56
    "`+`"    shift, and go to state 57


State 36

   71 syntax-expression-wo-ii: compound-expression .

    $default  reduce using rule 71 (syntax-expression-wo-ii)


State 37

   66 syntax-expression-wo-ii: "`!`" syntax-expression .
   67                        | syntax-expression . "`...`"
   68                        | syntax-expression . "`+`" syntax-expression
   69                        | syntax-expression . "`==`" syntax-expression
   70                        | syntax-expression . "`!=`" syntax-expression
   91 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
   92                    | syntax-expression . "`{`" opt-named-expr-list-any "`}`"
   93                    | syntax-expression . "`=`" syntax-expression

    "`(`"  shift, and go to state 55
    "`{`"  shift, and go to state 56

    $default  reduce using rule 66 (syntax-expression-wo-ii)


State 38

   16 let-decl-start: LET "weak modifier" . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 60


State 39

   15 let-decl-start: LET identifier .

    $default  reduce using rule 15 (let-decl-start)


State 40

    5 generic-decl: EXTERN VAR . identifier "`:`" type-expr "`;`"

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 61


State 41

    6 generic-decl: EXTERN "`fn`" . fn-decl "`;`"

    IDENTIFIER  shift, and go to state 6
    "`::`"      shift, and go to state 11

    identifier  go to state 27
    qname       go to state 49
    fn-decl     go to state 62


State 42

    7 generic-decl: INCLUDE STRING .

    $default  reduce using rule 7 (generic-decl)


State 43

   30 fn-start-decl: INLINE "`fn`" .

    $default  reduce using rule 30 (fn-start-decl)


State 44

   28 qname: qname . "`::`" identifier
   33 enum-decl: ENUM qname . "`{`" case-list-opt "`}`"

    "`::`"  shift, and go to state 48
    "`{`"   shift, and go to state 63


State 45

   18 let-decl-start-with-opt-type: let-decl-start "`:`" . type-expr

    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 64
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 65
    "`[`"                shift, and go to state 66

    identifier  go to state 27
    qname       go to state 67
    type-expr   go to state 68


State 46

   14 let-decl: let-decl-start-with-opt-type "`=`" . syntax-expression "`;`"

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 21
    "false"              shift, and go to state 22

    identifier               go to state 27
    qname                    go to state 28
    syntax-expression-wo-ii  go to state 31
    syntax-expression        go to state 69
    compound-expression      go to state 36


State 47

   13 let-decl: let-decl-start-with-opt-type "`;`" .

    $default  reduce using rule 13 (let-decl)


State 48

   28 qname: qname "`::`" . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 70


State 49

   28 qname: qname . "`::`" identifier
   31 fn-decl: qname . "`(`" parameter-list-opt "`)`"
   32        | qname . "`(`" parameter-list-opt "`)`" "`->`" syntax-expression

    "`::`"  shift, and go to state 48
    "`(`"   shift, and go to state 71


State 50

    9 generic-decl: fn-start-decl fn-decl . "`{`" infunction_declaration_any "`}`"
   10             | fn-start-decl fn-decl . "`=>`" syntax-expression "`;`"

    "`=>`"  shift, and go to state 72
    "`{`"   shift, and go to state 73


State 51

   93 compound-expression: syntax-expression "`=`" . syntax-expression

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 21
    "false"              shift, and go to state 22

    identifier               go to state 27
    qname                    go to state 28
    syntax-expression-wo-ii  go to state 31
    syntax-expression        go to state 74
    compound-expression      go to state 36


State 52

   69 syntax-expression-wo-ii: syntax-expression "`==`" . syntax-expression

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 21
    "false"              shift, and go to state 22

    identifier               go to state 27
    qname                    go to state 28
    syntax-expression-wo-ii  go to state 31
    syntax-expression        go to state 75
    compound-expression      go to state 36


State 53

   70 syntax-expression-wo-ii: syntax-expression "`!=`" . syntax-expression

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 21
    "false"              shift, and go to state 22

    identifier               go to state 27
    qname                    go to state 28
    syntax-expression-wo-ii  go to state 31
    syntax-expression        go to state 76
    compound-expression      go to state 36


State 54

   67 syntax-expression-wo-ii: syntax-expression "`...`" .

    $default  reduce using rule 67 (syntax-expression-wo-ii)


State 55

   91 compound-expression: syntax-expression "`(`" . opt-named-expr-list-any "`)`"

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 77
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 21
    "false"              shift, and go to state 22

    $default  reduce using rule 94 (opt-named-expr-list-any)

    identifier               go to state 27
    qname                    go to state 28
    syntax-expression-wo-ii  go to state 31
    syntax-expression        go to state 78
    compound-expression      go to state 36
    opt-named-expr-list-any  go to state 79
    opt-named-expr-list      go to state 80
    opt-named-expr           go to state 81


State 56

   92 compound-expression: syntax-expression "`{`" . opt-named-expr-list-any "`}`"

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 77
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 21
    "false"              shift, and go to state 22

    $default  reduce using rule 94 (opt-named-expr-list-any)

    identifier               go to state 27
    qname                    go to state 28
    syntax-expression-wo-ii  go to state 31
    syntax-expression        go to state 78
    compound-expression      go to state 36
    opt-named-expr-list-any  go to state 82
    opt-named-expr-list      go to state 80
    opt-named-expr           go to state 81


State 57

   68 syntax-expression-wo-ii: syntax-expression "`+`" . syntax-expression

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 21
    "false"              shift, and go to state 22

    identifier               go to state 27
    qname                    go to state 28
    syntax-expression-wo-ii  go to state 31
    syntax-expression        go to state 83
    compound-expression      go to state 36


State 58

   12 generic-decl: compound-expression "`;`" .

    $default  reduce using rule 12 (generic-decl)


State 59

   65 syntax-expression-wo-ii: "`(`" syntax-expression "`)`" .

    $default  reduce using rule 65 (syntax-expression-wo-ii)


State 60

   16 let-decl-start: LET "weak modifier" identifier .

    $default  reduce using rule 16 (let-decl-start)


State 61

    5 generic-decl: EXTERN VAR identifier . "`:`" type-expr "`;`"

    "`:`"  shift, and go to state 84


State 62

    6 generic-decl: EXTERN "`fn`" fn-decl . "`;`"

    "`;`"  shift, and go to state 85


State 63

   33 enum-decl: ENUM qname "`{`" . case-list-opt "`}`"

    IDENTIFIER  shift, and go to state 6

    $default  reduce using rule 34 (case-list-opt)

    identifier     go to state 86
    case-list-opt  go to state 87
    case-list      go to state 88
    case-decl      go to state 89


State 64

   84 type-expr: INTERNAL_IDENTIFIER .
   85          | INTERNAL_IDENTIFIER . "`(`" opt-named-expr-list-any "`)`"

    "`(`"  shift, and go to state 90

    $default  reduce using rule 84 (type-expr)


State 65

   87 type-expr: "`(`" . field-list-opt "`)`"

    IDENTIFIER           shift, and go to state 91
    INTERNAL_IDENTIFIER  shift, and go to state 64
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 65
    "`[`"                shift, and go to state 66

    $default  reduce using rule 39 (field-list-opt)

    identifier      go to state 27
    qname           go to state 67
    field-list-opt  go to state 92
    field-list      go to state 93
    field-decl      go to state 94
    type-expr       go to state 95


State 66

   86 type-expr: "`[`" . type-expr "`]`"

    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 64
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 65
    "`[`"                shift, and go to state 66

    identifier  go to state 27
    qname       go to state 67
    type-expr   go to state 96


State 67

   28 qname: qname . "`::`" identifier
   82 type-expr: qname .
   83          | qname . "`(`" opt-named-expr-list-any "`)`"

    "`::`"  shift, and go to state 48
    "`(`"   shift, and go to state 97

    $default  reduce using rule 82 (type-expr)


State 68

   18 let-decl-start-with-opt-type: let-decl-start "`:`" type-expr .
   88 type-expr: type-expr . "`[`" INTEGER "`]`"
   89          | type-expr . "`|`" type-expr
   90          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 98
    "`[`"   shift, and go to state 99
    "`|`"   shift, and go to state 100

    $default  reduce using rule 18 (let-decl-start-with-opt-type)


State 69

   14 let-decl: let-decl-start-with-opt-type "`=`" syntax-expression . "`;`"
   67 syntax-expression-wo-ii: syntax-expression . "`...`"
   68                        | syntax-expression . "`+`" syntax-expression
   69                        | syntax-expression . "`==`" syntax-expression
   70                        | syntax-expression . "`!=`" syntax-expression
   91 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
   92                    | syntax-expression . "`{`" opt-named-expr-list-any "`}`"
   93                    | syntax-expression . "`=`" syntax-expression

    "`=`"    shift, and go to state 51
    "`==`"   shift, and go to state 52
    "`!=`"   shift, and go to state 53
    "`...`"  shift, and go to state 54
    "`(`"    shift, and go to state 55
    "`{`"    shift, and go to state 56
    "`;`"    shift, and go to state 101
    "`+`"    shift, and go to state 57


State 70

   28 qname: qname "`::`" identifier .

    $default  reduce using rule 28 (qname)


State 71

   31 fn-decl: qname "`(`" . parameter-list-opt "`)`"
   32        | qname "`(`" . parameter-list-opt "`)`" "`->`" syntax-expression

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 102
    INTERNAL_IDENTIFIER  shift, and go to state 103
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`@`"                shift, and go to state 104
    "`_`"                shift, and go to state 105
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    TYPENAME             shift, and go to state 106
    "const modifier"     shift, and go to state 107
    "true"               shift, and go to state 21
    "false"              shift, and go to state 22

    $default  reduce using rule 78 (parameter-list-opt)

    identifier                     go to state 27
    qname                          go to state 28
    parameter-name-decl            go to state 108
    parameter-constraint-modifier  go to state 109
    parameter-constraint-set       go to state 110
    concept-expression             go to state 111
    syntax-expression-wo-ii        go to state 112
    syntax-expression              go to state 32
    parameter-decl                 go to state 113
    parameter-list-opt             go to state 114
    parameter-list                 go to state 115
    compound-expression            go to state 36


State 72

   10 generic-decl: fn-start-decl fn-decl "`=>`" . syntax-expression "`;`"

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 21
    "false"              shift, and go to state 22

    identifier               go to state 27
    qname                    go to state 28
    syntax-expression-wo-ii  go to state 31
    syntax-expression        go to state 116
    compound-expression      go to state 36


State 73

    9 generic-decl: fn-start-decl fn-decl "`{`" . infunction_declaration_any "`}`"

    $default  reduce using rule 19 (infunction_declaration_any)

    infunction_declaration_any  go to state 117


State 74

   67 syntax-expression-wo-ii: syntax-expression . "`...`"
   68                        | syntax-expression . "`+`" syntax-expression
   69                        | syntax-expression . "`==`" syntax-expression
   70                        | syntax-expression . "`!=`" syntax-expression
   91 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
   92                    | syntax-expression . "`{`" opt-named-expr-list-any "`}`"
   93                    | syntax-expression . "`=`" syntax-expression
   93                    | syntax-expression "`=`" syntax-expression .

    "`=`"   shift, and go to state 51
    "`==`"  shift, and go to state 52
    "`!=`"  shift, and go to state 53
    "`(`"   shift, and go to state 55
    "`{`"   shift, and go to state 56
    "`+`"   shift, and go to state 57

    $default  reduce using rule 93 (compound-expression)


State 75

   67 syntax-expression-wo-ii: syntax-expression . "`...`"
   68                        | syntax-expression . "`+`" syntax-expression
   69                        | syntax-expression . "`==`" syntax-expression
   69                        | syntax-expression "`==`" syntax-expression .
   70                        | syntax-expression . "`!=`" syntax-expression
   91 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
   92                    | syntax-expression . "`{`" opt-named-expr-list-any "`}`"
   93                    | syntax-expression . "`=`" syntax-expression

    "`(`"  shift, and go to state 55
    "`{`"  shift, and go to state 56
    "`+`"  shift, and go to state 57

    $default  reduce using rule 69 (syntax-expression-wo-ii)


State 76

   67 syntax-expression-wo-ii: syntax-expression . "`...`"
   68                        | syntax-expression . "`+`" syntax-expression
   69                        | syntax-expression . "`==`" syntax-expression
   70                        | syntax-expression . "`!=`" syntax-expression
   70                        | syntax-expression "`!=`" syntax-expression .
   91 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
   92                    | syntax-expression . "`{`" opt-named-expr-list-any "`}`"
   93                    | syntax-expression . "`=`" syntax-expression

    "`(`"  shift, and go to state 55
    "`{`"  shift, and go to state 56
    "`+`"  shift, and go to state 57

    $default  reduce using rule 70 (syntax-expression-wo-ii)


State 77

   25 identifier: IDENTIFIER .
   98 opt-named-expr: IDENTIFIER . "`:`" syntax-expression

    "`:`"  shift, and go to state 118

    $default  reduce using rule 25 (identifier)


State 78

   67 syntax-expression-wo-ii: syntax-expression . "`...`"
   68                        | syntax-expression . "`+`" syntax-expression
   69                        | syntax-expression . "`==`" syntax-expression
   70                        | syntax-expression . "`!=`" syntax-expression
   91 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
   92                    | syntax-expression . "`{`" opt-named-expr-list-any "`}`"
   93                    | syntax-expression . "`=`" syntax-expression
   99 opt-named-expr: syntax-expression .

    "`=`"    shift, and go to state 51
    "`==`"   shift, and go to state 52
    "`!=`"   shift, and go to state 53
    "`...`"  shift, and go to state 54
    "`(`"    shift, and go to state 55
    "`{`"    shift, and go to state 56
    "`+`"    shift, and go to state 57

    $default  reduce using rule 99 (opt-named-expr)


State 79

   91 compound-expression: syntax-expression "`(`" opt-named-expr-list-any . "`)`"

    "`)`"  shift, and go to state 119


State 80

   95 opt-named-expr-list-any: opt-named-expr-list .
   97 opt-named-expr-list: opt-named-expr-list . "," opt-named-expr

    ","  shift, and go to state 120

    $default  reduce using rule 95 (opt-named-expr-list-any)


State 81

   96 opt-named-expr-list: opt-named-expr .

    $default  reduce using rule 96 (opt-named-expr-list)


State 82

   92 compound-expression: syntax-expression "`{`" opt-named-expr-list-any . "`}`"

    "`}`"  shift, and go to state 121


State 83

   67 syntax-expression-wo-ii: syntax-expression . "`...`"
   68                        | syntax-expression . "`+`" syntax-expression
   68                        | syntax-expression "`+`" syntax-expression .
   69                        | syntax-expression . "`==`" syntax-expression
   70                        | syntax-expression . "`!=`" syntax-expression
   91 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
   92                    | syntax-expression . "`{`" opt-named-expr-list-any "`}`"
   93                    | syntax-expression . "`=`" syntax-expression

    "`(`"  shift, and go to state 55
    "`{`"  shift, and go to state 56

    $default  reduce using rule 68 (syntax-expression-wo-ii)


State 84

    5 generic-decl: EXTERN VAR identifier "`:`" . type-expr "`;`"

    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 64
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 65
    "`[`"                shift, and go to state 66

    identifier  go to state 27
    qname       go to state 67
    type-expr   go to state 122


State 85

    6 generic-decl: EXTERN "`fn`" fn-decl "`;`" .

    $default  reduce using rule 6 (generic-decl)


State 86

   38 case-decl: identifier .

    $default  reduce using rule 38 (case-decl)


State 87

   33 enum-decl: ENUM qname "`{`" case-list-opt . "`}`"

    "`}`"  shift, and go to state 123


State 88

   35 case-list-opt: case-list .
   37 case-list: case-list . "," case-decl

    ","  shift, and go to state 124

    $default  reduce using rule 35 (case-list-opt)


State 89

   36 case-list: case-decl .

    $default  reduce using rule 36 (case-list)


State 90

   85 type-expr: INTERNAL_IDENTIFIER "`(`" . opt-named-expr-list-any "`)`"

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 77
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 21
    "false"              shift, and go to state 22

    $default  reduce using rule 94 (opt-named-expr-list-any)

    identifier               go to state 27
    qname                    go to state 28
    syntax-expression-wo-ii  go to state 31
    syntax-expression        go to state 78
    compound-expression      go to state 36
    opt-named-expr-list-any  go to state 125
    opt-named-expr-list      go to state 80
    opt-named-expr           go to state 81


State 91

   25 identifier: IDENTIFIER .
   43 field-decl: IDENTIFIER . "`:`" type-expr

    "`:`"  shift, and go to state 126

    $default  reduce using rule 25 (identifier)


State 92

   87 type-expr: "`(`" field-list-opt . "`)`"

    "`)`"  shift, and go to state 127


State 93

   40 field-list-opt: field-list .
   42 field-list: field-list . "," field-decl

    ","  shift, and go to state 128

    $default  reduce using rule 40 (field-list-opt)


State 94

   41 field-list: field-decl .

    $default  reduce using rule 41 (field-list)


State 95

   44 field-decl: type-expr .
   88 type-expr: type-expr . "`[`" INTEGER "`]`"
   89          | type-expr . "`|`" type-expr
   90          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 98
    "`[`"   shift, and go to state 99
    "`|`"   shift, and go to state 100

    $default  reduce using rule 44 (field-decl)


State 96

   86 type-expr: "`[`" type-expr . "`]`"
   88          | type-expr . "`[`" INTEGER "`]`"
   89          | type-expr . "`|`" type-expr
   90          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 98
    "`[`"   shift, and go to state 99
    "`]`"   shift, and go to state 129
    "`|`"   shift, and go to state 100


State 97

   83 type-expr: qname "`(`" . opt-named-expr-list-any "`)`"

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 77
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 21
    "false"              shift, and go to state 22

    $default  reduce using rule 94 (opt-named-expr-list-any)

    identifier               go to state 27
    qname                    go to state 28
    syntax-expression-wo-ii  go to state 31
    syntax-expression        go to state 78
    compound-expression      go to state 36
    opt-named-expr-list-any  go to state 130
    opt-named-expr-list      go to state 80
    opt-named-expr           go to state 81


State 98

   90 type-expr: type-expr "`->`" . type-expr

    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 64
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 65
    "`[`"                shift, and go to state 66

    identifier  go to state 27
    qname       go to state 67
    type-expr   go to state 131


State 99

   88 type-expr: type-expr "`[`" . INTEGER "`]`"

    INTEGER  shift, and go to state 132


State 100

   89 type-expr: type-expr "`|`" . type-expr

    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 64
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 65
    "`[`"                shift, and go to state 66

    identifier  go to state 27
    qname       go to state 67
    type-expr   go to state 133


State 101

   14 let-decl: let-decl-start-with-opt-type "`=`" syntax-expression "`;`" .

    $default  reduce using rule 14 (let-decl)


State 102

   25 identifier: IDENTIFIER .
   45 parameter-name-decl: IDENTIFIER . INTERNAL_IDENTIFIER "`:`"
   46                    | IDENTIFIER . "`:`"

    INTERNAL_IDENTIFIER  shift, and go to state 134
    "`:`"                shift, and go to state 135

    $default  reduce using rule 25 (identifier)


State 103

   47 parameter-name-decl: INTERNAL_IDENTIFIER . "`:`"
   53 parameter-constraint-set: INTERNAL_IDENTIFIER .
   72 syntax-expression: INTERNAL_IDENTIFIER .

    "`:`"  shift, and go to state 136

    INTERNAL_IDENTIFIER  reduce using rule 53 (parameter-constraint-set)
    "`@`"                reduce using rule 53 (parameter-constraint-set)
    "`)`"                reduce using rule 53 (parameter-constraint-set)
    ","                  reduce using rule 53 (parameter-constraint-set)
    $default             reduce using rule 72 (syntax-expression)


State 104

   57 concept-expression: "`@`" . qname

    IDENTIFIER  shift, and go to state 6
    "`::`"      shift, and go to state 11

    identifier  go to state 27
    qname       go to state 137


State 105

   77 parameter-decl: "`_`" .

    $default  reduce using rule 77 (parameter-decl)


State 106

   48 parameter-constraint-modifier: TYPENAME .

    $default  reduce using rule 48 (parameter-constraint-modifier)


State 107

   49 parameter-constraint-modifier: "const modifier" .

    $default  reduce using rule 49 (parameter-constraint-modifier)


State 108

   74 parameter-decl: parameter-name-decl . parameter-constraint-modifier-opt parameter-constraint-set

    TYPENAME          shift, and go to state 106
    "const modifier"  shift, and go to state 107

    $default  reduce using rule 51 (parameter-constraint-modifier-opt)

    parameter-constraint-modifier      go to state 138
    parameter-constraint-modifier-opt  go to state 139


State 109

   75 parameter-decl: parameter-constraint-modifier . parameter-constraint-set

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 140
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`@`"                shift, and go to state 104
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 21
    "false"              shift, and go to state 22

    identifier                go to state 27
    qname                     go to state 28
    parameter-constraint-set  go to state 141
    concept-expression        go to state 111
    syntax-expression-wo-ii   go to state 112
    syntax-expression         go to state 32
    compound-expression       go to state 36


State 110

   55 parameter-constraint-set: parameter-constraint-set . INTERNAL_IDENTIFIER
   56                         | parameter-constraint-set . concept-expression
   76 parameter-decl: parameter-constraint-set .

    INTERNAL_IDENTIFIER  shift, and go to state 142
    "`@`"                shift, and go to state 104

    $default  reduce using rule 76 (parameter-decl)

    concept-expression  go to state 143


State 111

   54 parameter-constraint-set: concept-expression .

    $default  reduce using rule 54 (parameter-constraint-set)


State 112

   52 parameter-constraint-set: syntax-expression-wo-ii .
   73 syntax-expression: syntax-expression-wo-ii .

    INTERNAL_IDENTIFIER  reduce using rule 52 (parameter-constraint-set)
    "`@`"                reduce using rule 52 (parameter-constraint-set)
    "`)`"                reduce using rule 52 (parameter-constraint-set)
    ","                  reduce using rule 52 (parameter-constraint-set)
    $default             reduce using rule 73 (syntax-expression)


State 113

   80 parameter-list: parameter-decl .

    $default  reduce using rule 80 (parameter-list)


State 114

   31 fn-decl: qname "`(`" parameter-list-opt . "`)`"
   32        | qname "`(`" parameter-list-opt . "`)`" "`->`" syntax-expression

    "`)`"  shift, and go to state 144


State 115

   79 parameter-list-opt: parameter-list .
   81 parameter-list: parameter-list . "," parameter-decl

    ","  shift, and go to state 145

    $default  reduce using rule 79 (parameter-list-opt)


State 116

   10 generic-decl: fn-start-decl fn-decl "`=>`" syntax-expression . "`;`"
   67 syntax-expression-wo-ii: syntax-expression . "`...`"
   68                        | syntax-expression . "`+`" syntax-expression
   69                        | syntax-expression . "`==`" syntax-expression
   70                        | syntax-expression . "`!=`" syntax-expression
   91 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
   92                    | syntax-expression . "`{`" opt-named-expr-list-any "`}`"
   93                    | syntax-expression . "`=`" syntax-expression

    "`=`"    shift, and go to state 51
    "`==`"   shift, and go to state 52
    "`!=`"   shift, and go to state 53
    "`...`"  shift, and go to state 54
    "`(`"    shift, and go to state 55
    "`{`"    shift, and go to state 56
    "`;`"    shift, and go to state 146
    "`+`"    shift, and go to state 57


State 117

    9 generic-decl: fn-start-decl fn-decl "`{`" infunction_declaration_any . "`}`"
   20 infunction_declaration_any: infunction_declaration_any . "`;`"
   21                           | infunction_declaration_any . opt-infunction-decl

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`}`"                shift, and go to state 147
    "`;`"                shift, and go to state 148
    "`!`"                shift, and go to state 14
    LET                  shift, and go to state 15
    RETURN               shift, and go to state 149
    "true"               shift, and go to state 21
    "false"              shift, and go to state 22

    let-decl                      go to state 150
    let-decl-start                go to state 25
    let-decl-start-with-opt-type  go to state 26
    opt-infunction-decl           go to state 151
    identifier                    go to state 27
    qname                         go to state 28
    syntax-expression-wo-ii       go to state 31
    syntax-expression             go to state 32
    compound-expression           go to state 152


State 118

   98 opt-named-expr: IDENTIFIER "`:`" . syntax-expression

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 21
    "false"              shift, and go to state 22

    identifier               go to state 27
    qname                    go to state 28
    syntax-expression-wo-ii  go to state 31
    syntax-expression        go to state 153
    compound-expression      go to state 36


State 119

   91 compound-expression: syntax-expression "`(`" opt-named-expr-list-any "`)`" .

    $default  reduce using rule 91 (compound-expression)


State 120

   97 opt-named-expr-list: opt-named-expr-list "," . opt-named-expr

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 77
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 21
    "false"              shift, and go to state 22

    identifier               go to state 27
    qname                    go to state 28
    syntax-expression-wo-ii  go to state 31
    syntax-expression        go to state 78
    compound-expression      go to state 36
    opt-named-expr           go to state 154


State 121

   92 compound-expression: syntax-expression "`{`" opt-named-expr-list-any "`}`" .

    $default  reduce using rule 92 (compound-expression)


State 122

    5 generic-decl: EXTERN VAR identifier "`:`" type-expr . "`;`"
   88 type-expr: type-expr . "`[`" INTEGER "`]`"
   89          | type-expr . "`|`" type-expr
   90          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 98
    "`[`"   shift, and go to state 99
    "`;`"   shift, and go to state 155
    "`|`"   shift, and go to state 100


State 123

   33 enum-decl: ENUM qname "`{`" case-list-opt "`}`" .

    $default  reduce using rule 33 (enum-decl)


State 124

   37 case-list: case-list "," . case-decl

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 86
    case-decl   go to state 156


State 125

   85 type-expr: INTERNAL_IDENTIFIER "`(`" opt-named-expr-list-any . "`)`"

    "`)`"  shift, and go to state 157


State 126

   43 field-decl: IDENTIFIER "`:`" . type-expr

    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 64
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 65
    "`[`"                shift, and go to state 66

    identifier  go to state 27
    qname       go to state 67
    type-expr   go to state 158


State 127

   87 type-expr: "`(`" field-list-opt "`)`" .

    $default  reduce using rule 87 (type-expr)


State 128

   42 field-list: field-list "," . field-decl

    IDENTIFIER           shift, and go to state 91
    INTERNAL_IDENTIFIER  shift, and go to state 64
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 65
    "`[`"                shift, and go to state 66

    identifier  go to state 27
    qname       go to state 67
    field-decl  go to state 159
    type-expr   go to state 95


State 129

   86 type-expr: "`[`" type-expr "`]`" .

    $default  reduce using rule 86 (type-expr)


State 130

   83 type-expr: qname "`(`" opt-named-expr-list-any . "`)`"

    "`)`"  shift, and go to state 160


State 131

   88 type-expr: type-expr . "`[`" INTEGER "`]`"
   89          | type-expr . "`|`" type-expr
   90          | type-expr . "`->`" type-expr
   90          | type-expr "`->`" type-expr .

    $default  reduce using rule 90 (type-expr)


State 132

   88 type-expr: type-expr "`[`" INTEGER . "`]`"

    "`]`"  shift, and go to state 161


State 133

   88 type-expr: type-expr . "`[`" INTEGER "`]`"
   89          | type-expr . "`|`" type-expr
   89          | type-expr "`|`" type-expr .
   90          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 98
    "`[`"   shift, and go to state 99

    $default  reduce using rule 89 (type-expr)


State 134

   45 parameter-name-decl: IDENTIFIER INTERNAL_IDENTIFIER . "`:`"

    "`:`"  shift, and go to state 162


State 135

   46 parameter-name-decl: IDENTIFIER "`:`" .

    $default  reduce using rule 46 (parameter-name-decl)


State 136

   47 parameter-name-decl: INTERNAL_IDENTIFIER "`:`" .

    $default  reduce using rule 47 (parameter-name-decl)


State 137

   28 qname: qname . "`::`" identifier
   57 concept-expression: "`@`" qname .

    "`::`"  shift, and go to state 48

    $default  reduce using rule 57 (concept-expression)


State 138

   50 parameter-constraint-modifier-opt: parameter-constraint-modifier .

    $default  reduce using rule 50 (parameter-constraint-modifier-opt)


State 139

   74 parameter-decl: parameter-name-decl parameter-constraint-modifier-opt . parameter-constraint-set

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 140
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`@`"                shift, and go to state 104
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 21
    "false"              shift, and go to state 22

    identifier                go to state 27
    qname                     go to state 28
    parameter-constraint-set  go to state 163
    concept-expression        go to state 111
    syntax-expression-wo-ii   go to state 112
    syntax-expression         go to state 32
    compound-expression       go to state 36


State 140

   53 parameter-constraint-set: INTERNAL_IDENTIFIER .
   72 syntax-expression: INTERNAL_IDENTIFIER .

    INTERNAL_IDENTIFIER  reduce using rule 53 (parameter-constraint-set)
    "`@`"                reduce using rule 53 (parameter-constraint-set)
    "`)`"                reduce using rule 53 (parameter-constraint-set)
    ","                  reduce using rule 53 (parameter-constraint-set)
    $default             reduce using rule 72 (syntax-expression)


State 141

   55 parameter-constraint-set: parameter-constraint-set . INTERNAL_IDENTIFIER
   56                         | parameter-constraint-set . concept-expression
   75 parameter-decl: parameter-constraint-modifier parameter-constraint-set .

    INTERNAL_IDENTIFIER  shift, and go to state 142
    "`@`"                shift, and go to state 104

    $default  reduce using rule 75 (parameter-decl)

    concept-expression  go to state 143


State 142

   55 parameter-constraint-set: parameter-constraint-set INTERNAL_IDENTIFIER .

    $default  reduce using rule 55 (parameter-constraint-set)


State 143

   56 parameter-constraint-set: parameter-constraint-set concept-expression .

    $default  reduce using rule 56 (parameter-constraint-set)


State 144

   31 fn-decl: qname "`(`" parameter-list-opt "`)`" .
   32        | qname "`(`" parameter-list-opt "`)`" . "`->`" syntax-expression

    "`->`"  shift, and go to state 164

    $default  reduce using rule 31 (fn-decl)


State 145

   81 parameter-list: parameter-list "," . parameter-decl

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 102
    INTERNAL_IDENTIFIER  shift, and go to state 103
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`@`"                shift, and go to state 104
    "`_`"                shift, and go to state 105
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    TYPENAME             shift, and go to state 106
    "const modifier"     shift, and go to state 107
    "true"               shift, and go to state 21
    "false"              shift, and go to state 22

    identifier                     go to state 27
    qname                          go to state 28
    parameter-name-decl            go to state 108
    parameter-constraint-modifier  go to state 109
    parameter-constraint-set       go to state 110
    concept-expression             go to state 111
    syntax-expression-wo-ii        go to state 112
    syntax-expression              go to state 32
    parameter-decl                 go to state 165
    compound-expression            go to state 36


State 146

   10 generic-decl: fn-start-decl fn-decl "`=>`" syntax-expression "`;`" .

    $default  reduce using rule 10 (generic-decl)


State 147

    9 generic-decl: fn-start-decl fn-decl "`{`" infunction_declaration_any "`}`" .

    $default  reduce using rule 9 (generic-decl)


State 148

   20 infunction_declaration_any: infunction_declaration_any "`;`" .

    $default  reduce using rule 20 (infunction_declaration_any)


State 149

   23 opt-infunction-decl: RETURN . syntax-expression "`;`"

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 21
    "false"              shift, and go to state 22

    identifier               go to state 27
    qname                    go to state 28
    syntax-expression-wo-ii  go to state 31
    syntax-expression        go to state 166
    compound-expression      go to state 36


State 150

   22 opt-infunction-decl: let-decl .

    $default  reduce using rule 22 (opt-infunction-decl)


State 151

   21 infunction_declaration_any: infunction_declaration_any opt-infunction-decl .

    $default  reduce using rule 21 (infunction_declaration_any)


State 152

   24 opt-infunction-decl: compound-expression . "`;`"
   71 syntax-expression-wo-ii: compound-expression .

    "`;`"  shift, and go to state 167

    $default  reduce using rule 71 (syntax-expression-wo-ii)


State 153

   67 syntax-expression-wo-ii: syntax-expression . "`...`"
   68                        | syntax-expression . "`+`" syntax-expression
   69                        | syntax-expression . "`==`" syntax-expression
   70                        | syntax-expression . "`!=`" syntax-expression
   91 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
   92                    | syntax-expression . "`{`" opt-named-expr-list-any "`}`"
   93                    | syntax-expression . "`=`" syntax-expression
   98 opt-named-expr: IDENTIFIER "`:`" syntax-expression .

    "`=`"    shift, and go to state 51
    "`==`"   shift, and go to state 52
    "`!=`"   shift, and go to state 53
    "`...`"  shift, and go to state 54
    "`(`"    shift, and go to state 55
    "`{`"    shift, and go to state 56
    "`+`"    shift, and go to state 57

    $default  reduce using rule 98 (opt-named-expr)


State 154

   97 opt-named-expr-list: opt-named-expr-list "," opt-named-expr .

    $default  reduce using rule 97 (opt-named-expr-list)


State 155

    5 generic-decl: EXTERN VAR identifier "`:`" type-expr "`;`" .

    $default  reduce using rule 5 (generic-decl)


State 156

   37 case-list: case-list "," case-decl .

    $default  reduce using rule 37 (case-list)


State 157

   85 type-expr: INTERNAL_IDENTIFIER "`(`" opt-named-expr-list-any "`)`" .

    $default  reduce using rule 85 (type-expr)


State 158

   43 field-decl: IDENTIFIER "`:`" type-expr .
   88 type-expr: type-expr . "`[`" INTEGER "`]`"
   89          | type-expr . "`|`" type-expr
   90          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 98
    "`[`"   shift, and go to state 99
    "`|`"   shift, and go to state 100

    $default  reduce using rule 43 (field-decl)


State 159

   42 field-list: field-list "," field-decl .

    $default  reduce using rule 42 (field-list)


State 160

   83 type-expr: qname "`(`" opt-named-expr-list-any "`)`" .

    $default  reduce using rule 83 (type-expr)


State 161

   88 type-expr: type-expr "`[`" INTEGER "`]`" .

    $default  reduce using rule 88 (type-expr)


State 162

   45 parameter-name-decl: IDENTIFIER INTERNAL_IDENTIFIER "`:`" .

    $default  reduce using rule 45 (parameter-name-decl)


State 163

   55 parameter-constraint-set: parameter-constraint-set . INTERNAL_IDENTIFIER
   56                         | parameter-constraint-set . concept-expression
   74 parameter-decl: parameter-name-decl parameter-constraint-modifier-opt parameter-constraint-set .

    INTERNAL_IDENTIFIER  shift, and go to state 142
    "`@`"                shift, and go to state 104

    $default  reduce using rule 74 (parameter-decl)

    concept-expression  go to state 143


State 164

   32 fn-decl: qname "`(`" parameter-list-opt "`)`" "`->`" . syntax-expression

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`!`"                shift, and go to state 14
    "true"               shift, and go to state 21
    "false"              shift, and go to state 22

    identifier               go to state 27
    qname                    go to state 28
    syntax-expression-wo-ii  go to state 31
    syntax-expression        go to state 168
    compound-expression      go to state 36


State 165

   81 parameter-list: parameter-list "," parameter-decl .

    $default  reduce using rule 81 (parameter-list)


State 166

   23 opt-infunction-decl: RETURN syntax-expression . "`;`"
   67 syntax-expression-wo-ii: syntax-expression . "`...`"
   68                        | syntax-expression . "`+`" syntax-expression
   69                        | syntax-expression . "`==`" syntax-expression
   70                        | syntax-expression . "`!=`" syntax-expression
   91 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
   92                    | syntax-expression . "`{`" opt-named-expr-list-any "`}`"
   93                    | syntax-expression . "`=`" syntax-expression

    "`=`"    shift, and go to state 51
    "`==`"   shift, and go to state 52
    "`!=`"   shift, and go to state 53
    "`...`"  shift, and go to state 54
    "`(`"    shift, and go to state 55
    "`{`"    shift, and go to state 56
    "`;`"    shift, and go to state 169
    "`+`"    shift, and go to state 57


State 167

   24 opt-infunction-decl: compound-expression "`;`" .

    $default  reduce using rule 24 (opt-infunction-decl)


State 168

   32 fn-decl: qname "`(`" parameter-list-opt "`)`" "`->`" syntax-expression .
   67 syntax-expression-wo-ii: syntax-expression . "`...`"
   68                        | syntax-expression . "`+`" syntax-expression
   69                        | syntax-expression . "`==`" syntax-expression
   70                        | syntax-expression . "`!=`" syntax-expression
   91 compound-expression: syntax-expression . "`(`" opt-named-expr-list-any "`)`"
   92                    | syntax-expression . "`{`" opt-named-expr-list-any "`}`"
   93                    | syntax-expression . "`=`" syntax-expression

    "`=`"    shift, and go to state 51
    "`==`"   shift, and go to state 52
    "`!=`"   shift, and go to state 53
    "`...`"  shift, and go to state 54
    "`(`"    shift, and go to state 55
    "`+`"    shift, and go to state 57

    $default  reduce using rule 32 (fn-decl)


State 169

   23 opt-infunction-decl: RETURN syntax-expression "`;`" .

    $default  reduce using rule 23 (opt-infunction-decl)
