Terminals unused in grammar

    COMMENT_BEGIN
    COMMENT_END
    OPERATOR_TERM
    "`->*`"
    "`~>`"
    "`.*`"
    "`++`"
    "`--`"
    "`<<`"
    "`>>`"
    "`<=`"
    "`>=`"
    "`&&`"
    "`||`"
    "`..`"
    "`+=`"
    "`-=`"
    "`*=`"
    "`/=`"
    "`%=`"
    "`<<=`"
    "`>>=`"
    "`&=`"
    "`|=`"
    "`^=`"
    "`<`"
    "`>`"
    "`-`"
    "`*`"
    "`/`"
    "`%`"
    "`&`"
    "`~`"
    "`^`"
    "`$`"
    "`?`"
    "`#`"
    FOR
    AUTO
    THROW
    SIZEOF
    LOWEST
    EXTENDS


Grammar

    0 $accept: begin "end of file"

    1 begin: statement_any "end of file"
    2      | finished_statement_any "end of file"

    3 statement_any: %empty
    4              | statement
    5              | finished_statement_any statement

    6 finished_statement_any: finished_statement
    7                       | finished_statement_any "`;`"
    8                       | finished_statement_any finished_statement
    9                       | statement_any "`;`"

   10 statement: EXTERN VAR identifier "`:`" type-expr
   11          | EXTERN fn-decl
   12          | INCLUDE STRING
   13          | enum-decl
   14          | fn-start-decl fn-decl "`=>`" syntax-expression
   15          | generic-statement
   16          | STRUCT struct-decl
   17          | USING using-decl

   18 let-decl: let-decl-start-with-opt-type
   19         | let-decl-start-with-opt-type "`=`" syntax-expression

   20 let-decl-start: LET identifier
   21               | LET "weak modifier" identifier

   22 let-decl-start-with-opt-type: let-decl-start
   23                             | let-decl-start "`:`" type-expr

   24 infunction-statement-any: %empty
   25                         | infunction-statement
   26                         | finished-infunction-statement-any infunction-statement

   27 finished-infunction-statement-any: finished_statement
   28                                  | finished-infunction-statement-any "`;`"
   29                                  | finished-infunction-statement-any finished_statement
   30                                  | infunction-statement-any "`;`"

   31 braced-statements: "`{`" infunction-statement-set "`}`"

   32 finished_statement: "`while`" syntax-expression braced-statements
   33                   | "`while`" syntax-expression "`;`" syntax-expression braced-statements
   34                   | "`if`" syntax-expression braced-statements
   35                   | "`if`" syntax-expression braced-statements "`else`" braced-statements
   36                   | fn-start-decl fn-decl braced-statements

   37 infunction-statement-set: infunction-statement-any
   38                         | finished-infunction-statement-any

   39 generic-statement: let-decl
   40                  | "`return`" syntax-expression
   41                  | compound-expression
   42                  | syntax-expression "`=`" syntax-expression

   43 infunction-statement: generic-statement
   44                     | "`break`"
   45                     | "`continue`"

   46 identifier: IDENTIFIER

   47 internal_identifier: INTERNAL_IDENTIFIER

   48 qname: "`::`" identifier
   49      | identifier
   50      | qname "`::`" identifier

   51 fn-start-decl: %empty
   52              | INLINE

   53 fn-name: qname
   54        | "`new`"

   55 fn-decl: "`fn`" fn-name "`(`" parameter-list-opt "`)`"
   56        | "`fn`" fn-name "`(`" parameter-list-opt "`)`" "`->`" syntax-expression

   57 enum-decl: ENUM qname "`{`" case-list-opt "`}`"

   58 case-list-opt: %empty
   59              | case-list

   60 case-list: case-decl
   61          | case-list "," case-decl

   62 case-decl: identifier

   63 struct-decl: qname "`=>`" "`(`" field-list-opt "`)`"
   64            | qname "`(`" parameter-list-opt "`)`" "`=>`" "`(`" field-list-opt "`)`"

   65 using-decl: qname "`=>`" syntax-expression
   66           | qname "`(`" parameter-list-opt "`)`" "`=>`" syntax-expression

   67 argument-list-opt: %empty
   68                  | argument-list

   69 argument-list: argument
   70              | argument-list "," argument

   71 argument: argument-name syntax-expression
   72         | syntax-expression

   73 argument-name: identifier "`=`"
   74              | identifier "`:`"

   75 field-list-opt: %empty
   76               | field-list

   77 field-list: field
   78           | field-list "," field

   79 field: identifier "`:`" parameter-constraint-modifier-opt field-type-expr
   80      | identifier "`:`" parameter-constraint-modifier-opt field-type-expr "`=`" syntax-expression

   81 field-type-expr: qname
   82                | qname "`(`" argument-list-opt "`)`"
   83                | INTERNAL_IDENTIFIER
   84                | field-type-expr "`|`" field-type-expr

   85 parameter-list-opt: %empty
   86                   | parameter-list

   87 parameter-list: parameter-decl
   88               | parameter-list "," parameter-decl

   89 parameter-decl: parameter-name-decl parameter-constraint-modifier-opt parameter-constraint-set
   90               | parameter-constraint-modifier parameter-constraint-set
   91               | parameter-constraint-set

   92 parameter-name-decl: identifier internal_identifier "`:`"
   93                    | identifier "`:`"
   94                    | INTERNAL_IDENTIFIER "`:`"
   95                    | INTERNAL_IDENTIFIER "`...`" "`:`"

   96 parameter-constraint-modifier-opt: parameter-constraint-modifier
   97                                  | %empty

   98 parameter-constraint-modifier: TYPENAME
   99                              | "const modifier"

  100 parameter-constraint-set: parameter-matched-type
  101                         | concept-expression
  102                         | parameter-constraint-set concept-expression

  103 parameter-matched-type: basic-parameter-matched-type
  104                       | basic-parameter-matched-type "`...`"
  105                       | INTERNAL_IDENTIFIER
  106                       | INTERNAL_IDENTIFIER "`...`"

  107 basic-parameter-matched-type: "`_`"
  108                             | qname
  109                             | qname "`(`" argument-list-opt "`)`"
  110                             | basic-parameter-matched-type "`|`" basic-parameter-matched-type

  111 concept-expression: "`@`" qname

  112 syntax-expression: INTERNAL_IDENTIFIER
  113                  | syntax-expression-wo-ii

  114 syntax-expression-wo-ii: "true"
  115                        | "false"
  116                        | INTEGER
  117                        | DECIMAL
  118                        | DECIMAL_S
  119                        | INTEGER_INDEX
  120                        | STRING
  121                        | RESERVED_IDENTIFIER
  122                        | qname
  123                        | "`(`" argument-list "`)`"
  124                        | syntax-expression "`.`" identifier
  125                        | syntax-expression INTEGER_INDEX
  126                        | "`!`" syntax-expression
  127                        | syntax-expression "`...`"
  128                        | syntax-expression "`+`" syntax-expression
  129                        | syntax-expression "`==`" syntax-expression
  130                        | syntax-expression "`!=`" syntax-expression
  131                        | apostrophe-expression
  132                        | new-expression
  133                        | compound-expression

  134 apostrophe-expression: "APOSTROPHE" syntax-expression "APOSTROPHE"

  135 new-expression: "`new`" qname
  136               | "`new`" apostrophe-expression
  137               | "`new`" qname "`(`" argument-list-opt "`)`"
  138               | "`new`" apostrophe-expression "`(`" argument-list-opt "`)`"

  139 call-expression: qname "`(`" argument-list-opt "`)`"
  140                | call-expression "`(`" argument-list-opt "`)`"
  141                | apostrophe-expression "`(`" argument-list-opt "`)`"

  142 compound-expression: call-expression

  143 type-expr: qname
  144          | INTERNAL_IDENTIFIER
  145          | "`[`" type-expr "`]`"
  146          | "`(`" argument-list-opt "`)`"
  147          | type-expr "`[`" INTEGER "`]`"
  148          | type-expr "`|`" type-expr
  149          | type-expr "`->`" type-expr


Terminals, with rules where they appear

    "end of file" (0) 0 1 2
    error (256)
    COMMENT_BEGIN (258)
    COMMENT_END (259)
    STRING <sonia::lang::bang::annotated_string_view> (260) 12 120
    IDENTIFIER <sonia::lang::bang::annotated_string_view> (261) 46
    INTERNAL_IDENTIFIER <sonia::lang::bang::annotated_string_view> (262) 47 83 94 95 105 106 112 144
    RESERVED_IDENTIFIER <sonia::lang::bang::annotated_string_view> (263) 121
    INTEGER_INDEX <sonia::lang::bang::annotated_string_view> (264) 119 125
    INTEGER <sonia::lang::bang::annotated_integer> (265) 116 147
    DECIMAL <sonia::lang::bang::annotated_decimal> (266) 117
    DECIMAL_S <sonia::lang::bang::annotated_decimal> (267) 118
    OPERATOR_TERM <sonia::string_view> (268)
    "`=`" <sonia::lang::lex::resource_location> (269) 19 42 73 80
    "APOSTROPHE" (270) 134
    "`@`" (271) 111
    "`_`" <sonia::lang::lex::resource_location> (272) 107
    "`->*`" (273)
    "`->`" (274) 56 149
    "`=>`" (275) 14 63 64 65 66
    "`~>`" (276)
    "`.*`" (277)
    "`++`" (278)
    "`--`" (279)
    "`<<`" (280)
    "`>>`" (281)
    "`<=`" (282)
    "`>=`" (283)
    "`==`" <sonia::lang::lex::resource_location> (284) 129
    "`!=`" <sonia::lang::lex::resource_location> (285) 130
    "`&&`" <sonia::lang::lex::resource_location> (286)
    "`||`" <sonia::lang::lex::resource_location> (287)
    "`..`" <sonia::lang::lex::resource_location> (288)
    "`...`" <sonia::lang::lex::resource_location> (289) 95 104 106 127
    "`+=`" (290)
    "`-=`" (291)
    "`*=`" (292)
    "`/=`" (293)
    "`%=`" (294)
    "`<<=`" (295)
    "`>>=`" (296)
    "`&=`" (297)
    "`|=`" (298)
    "`^=`" (299)
    "`:`" (300) 10 23 74 79 80 92 93 94 95
    "`::`" (301) 48 50
    "`(`" <sonia::lang::lex::resource_location> (302) 55 56 63 64 66 82 109 123 137 138 139 140 141 146
    "`)`" (303) 55 56 63 64 66 82 109 123 137 138 139 140 141 146
    "`{`" <sonia::lang::lex::resource_location> (304) 31 57
    "`}`" (305) 31 57
    "`[`" <sonia::lang::lex::resource_location> (306) 145 147
    "`]`" (307) 145 147
    "`<`" (308)
    "`>`" (309)
    "`;`" (310) 7 9 28 30 33
    "`.`" <sonia::lang::lex::resource_location> (311) 124
    "`+`" <sonia::lang::lex::resource_location> (312) 128
    "`-`" (313)
    "`*`" (314)
    "`/`" (315)
    "`%`" (316)
    "`&`" (317)
    "`|`" <sonia::lang::lex::resource_location> (318) 84 110 148
    "`!`" <sonia::lang::lex::resource_location> (319) 126
    "`~`" (320)
    "`^`" (321)
    "," (322) 61 70 78 88
    "`$`" (323)
    "`?`" (324)
    "`#`" (325)
    LET (326) 20 21
    VAR (327) 10
    EXTERN (328) 10 11
    "`new`" <sonia::lang::lex::resource_location> (329) 54 135 136 137 138
    "`while`" (330) 32 33
    "`if`" (331) 34 35
    "`else`" (332) 35
    "`continue`" <sonia::lang::lex::resource_location> (333) 45
    "`break`" <sonia::lang::lex::resource_location> (334) 44
    "`return`" (335) 40
    FOR (336)
    AUTO (337)
    USING (338) 17
    THROW (339)
    SIZEOF (340)
    LOWEST (341)
    INCLUDE (342) 12
    INLINE (343) 52
    "`fn`" <sonia::lang::lex::resource_location> (344) 55 56
    ENUM (345) 57
    STRUCT (346) 16
    EXTENDS (347)
    TYPENAME (348) 98
    "weak modifier" (349) 21
    "const modifier" (350) 99
    "true" <annotated_bool> (351) 114
    "false" <annotated_bool> (352) 115


Nonterminals, with rules where they appear

    $accept (98)
        on left: 0
    begin (99)
        on left: 1 2
        on right: 0
    statement_any <statement_set_t> (100)
        on left: 3 4 5
        on right: 1 9
    finished_statement_any <statement_set_t> (101)
        on left: 6 7 8 9
        on right: 2 5 7 8
    statement <statement> (102)
        on left: 10 11 12 13 14 15 16 17
        on right: 4 5
    let-decl <let_statement> (103)
        on left: 18 19
        on right: 39
    let-decl-start <let_statement> (104)
        on left: 20 21
        on right: 22 23
    let-decl-start-with-opt-type <let_statement> (105)
        on left: 22 23
        on right: 18 19
    infunction-statement-any <statement_set_t> (106)
        on left: 24 25 26
        on right: 30 37
    finished-infunction-statement-any <statement_set_t> (107)
        on left: 27 28 29 30
        on right: 26 28 29 38
    braced-statements <statement_set_t> (108)
        on left: 31
        on right: 32 33 34 35 36
    finished_statement <finished_statement_type> (109)
        on left: 32 33 34 35 36
        on right: 6 8 27 29
    infunction-statement-set <statement_set_t> (110)
        on left: 37 38
        on right: 31
    generic-statement <generic_statement_type> (111)
        on left: 39 40 41 42
        on right: 15 43
    infunction-statement <statement> (112)
        on left: 43 44 45
        on right: 25 26
    identifier <sonia::lang::bang::annotated_identifier> (113)
        on left: 46
        on right: 10 20 21 48 49 50 62 73 74 79 80 92 93 124
    internal_identifier <sonia::lang::bang::annotated_identifier> (114)
        on left: 47
        on right: 92
    qname <sonia::lang::bang::annotated_qname> (115)
        on left: 48 49 50
        on right: 50 53 57 63 64 65 66 81 82 108 109 111 122 135 137 139 143
    fn-start-decl <fn_kind> (116)
        on left: 51 52
        on right: 14 36
    fn-name <sonia::lang::bang::annotated_qname> (117)
        on left: 53 54
        on right: 55 56
    fn-decl <fn_pure> (118)
        on left: 55 56
        on right: 11 14 36
    enum-decl <enum_decl> (119)
        on left: 57
        on right: 13
    case-list-opt <std::vector<sonia::lang::bang::identifier>> (120)
        on left: 58 59
        on right: 57
    case-list <std::vector<sonia::lang::bang::identifier>> (121)
        on left: 60 61
        on right: 59 61
    case-decl <sonia::lang::bang::identifier> (122)
        on left: 62
        on right: 60 61
    struct-decl <struct_decl> (123)
        on left: 63 64
        on right: 16
    using-decl <using_decl> (124)
        on left: 65 66
        on right: 17
    argument-list-opt <named_expression_list_t> (125)
        on left: 67 68
        on right: 82 109 137 138 139 140 141 146
    argument-list <named_expression_list_t> (126)
        on left: 69 70
        on right: 68 70 123
    argument <named_expression_t> (127)
        on left: 71 72
        on right: 69 70
    argument-name <sonia::lang::bang::annotated_identifier> (128)
        on left: 73 74
        on right: 71
    field-list-opt <field_list_t> (129)
        on left: 75 76
        on right: 63 64
    field-list <field_list_t> (130)
        on left: 77 78
        on right: 76 78
    field <field_t> (131)
        on left: 79 80
        on right: 77 78
    field-type-expr <syntax_expression_t> (132)
        on left: 81 82 83 84
        on right: 79 80 84
    parameter-list-opt <parameter_woa_list_t> (133)
        on left: 85 86
        on right: 55 56 64 66
    parameter-list <parameter_woa_list_t> (134)
        on left: 87 88
        on right: 86 88
    parameter-decl <parameter_t> (135)
        on left: 89 90 91
        on right: 87 88
    parameter-name-decl <parameter_name> (136)
        on left: 92 93 94 95
        on right: 89
    parameter-constraint-modifier-opt <parameter_constraint_modifier_t> (137)
        on left: 96 97
        on right: 79 80 89
    parameter-constraint-modifier <parameter_constraint_modifier_t> (138)
        on left: 98 99
        on right: 90 96
    parameter-constraint-set <parameter_constraint_set_t> (139)
        on left: 100 101 102
        on right: 89 90 91 102
    parameter-matched-type <syntax_expression_t> (140)
        on left: 103 104 105 106
        on right: 100
    basic-parameter-matched-type <syntax_expression_t> (141)
        on left: 107 108 109 110
        on right: 103 104 110
    concept-expression <syntax_expression_t> (142)
        on left: 111
        on right: 101 102
    syntax-expression <syntax_expression_t> (143)
        on left: 112 113
        on right: 14 19 32 33 34 35 40 42 56 65 66 71 72 80 124 125 126 127 128 129 130 134
    syntax-expression-wo-ii <syntax_expression_t> (144)
        on left: 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133
        on right: 113
    apostrophe-expression <syntax_expression_t> (145)
        on left: 134
        on right: 131 136 138 141
    new-expression <syntax_expression_t> (146)
        on left: 135 136 137 138
        on right: 132
    call-expression <syntax_expression_t> (147)
        on left: 139 140 141
        on right: 140 142
    compound-expression <syntax_expression_t> (148)
        on left: 142
        on right: 41 133
    type-expr <syntax_expression_t> (149)
        on left: 143 144 145 146 147 148 149
        on right: 10 23 145 147 148 149


State 0

    0 $accept: . begin "end of file"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`!`"                shift, and go to state 12
    LET                  shift, and go to state 13
    EXTERN               shift, and go to state 14
    "`new`"              shift, and go to state 15
    "`while`"            shift, and go to state 16
    "`if`"               shift, and go to state 17
    "`return`"           shift, and go to state 18
    USING                shift, and go to state 19
    INCLUDE              shift, and go to state 20
    INLINE               shift, and go to state 21
    ENUM                 shift, and go to state 22
    STRUCT               shift, and go to state 23
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    "`fn`"    reduce using rule 51 (fn-start-decl)
    $default  reduce using rule 3 (statement_any)

    begin                         go to state 26
    statement_any                 go to state 27
    finished_statement_any        go to state 28
    statement                     go to state 29
    let-decl                      go to state 30
    let-decl-start                go to state 31
    let-decl-start-with-opt-type  go to state 32
    finished_statement            go to state 33
    generic-statement             go to state 34
    identifier                    go to state 35
    qname                         go to state 36
    fn-start-decl                 go to state 37
    enum-decl                     go to state 38
    syntax-expression             go to state 39
    syntax-expression-wo-ii       go to state 40
    apostrophe-expression         go to state 41
    new-expression                go to state 42
    call-expression               go to state 43
    compound-expression           go to state 44


State 1

  120 syntax-expression-wo-ii: STRING .

    $default  reduce using rule 120 (syntax-expression-wo-ii)


State 2

   46 identifier: IDENTIFIER .

    $default  reduce using rule 46 (identifier)


State 3

  112 syntax-expression: INTERNAL_IDENTIFIER .

    $default  reduce using rule 112 (syntax-expression)


State 4

  121 syntax-expression-wo-ii: RESERVED_IDENTIFIER .

    $default  reduce using rule 121 (syntax-expression-wo-ii)


State 5

  119 syntax-expression-wo-ii: INTEGER_INDEX .

    $default  reduce using rule 119 (syntax-expression-wo-ii)


State 6

  116 syntax-expression-wo-ii: INTEGER .

    $default  reduce using rule 116 (syntax-expression-wo-ii)


State 7

  117 syntax-expression-wo-ii: DECIMAL .

    $default  reduce using rule 117 (syntax-expression-wo-ii)


State 8

  118 syntax-expression-wo-ii: DECIMAL_S .

    $default  reduce using rule 118 (syntax-expression-wo-ii)


State 9

  134 apostrophe-expression: "APOSTROPHE" . syntax-expression "APOSTROPHE"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`!`"                shift, and go to state 12
    "`new`"              shift, and go to state 15
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 35
    qname                    go to state 36
    syntax-expression        go to state 45
    syntax-expression-wo-ii  go to state 40
    apostrophe-expression    go to state 41
    new-expression           go to state 42
    call-expression          go to state 43
    compound-expression      go to state 46


State 10

   48 qname: "`::`" . identifier

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 47


State 11

  123 syntax-expression-wo-ii: "`(`" . argument-list "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`!`"                shift, and go to state 12
    "`new`"              shift, and go to state 15
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 48
    qname                    go to state 36
    argument-list            go to state 49
    argument                 go to state 50
    argument-name            go to state 51
    syntax-expression        go to state 52
    syntax-expression-wo-ii  go to state 40
    apostrophe-expression    go to state 41
    new-expression           go to state 42
    call-expression          go to state 43
    compound-expression      go to state 46


State 12

  126 syntax-expression-wo-ii: "`!`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`!`"                shift, and go to state 12
    "`new`"              shift, and go to state 15
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 35
    qname                    go to state 36
    syntax-expression        go to state 53
    syntax-expression-wo-ii  go to state 40
    apostrophe-expression    go to state 41
    new-expression           go to state 42
    call-expression          go to state 43
    compound-expression      go to state 46


State 13

   20 let-decl-start: LET . identifier
   21               | LET . "weak modifier" identifier

    IDENTIFIER       shift, and go to state 2
    "weak modifier"  shift, and go to state 54

    identifier  go to state 55


State 14

   10 statement: EXTERN . VAR identifier "`:`" type-expr
   11          | EXTERN . fn-decl

    VAR     shift, and go to state 56
    "`fn`"  shift, and go to state 57

    fn-decl  go to state 58


State 15

  135 new-expression: "`new`" . qname
  136               | "`new`" . apostrophe-expression
  137               | "`new`" . qname "`(`" argument-list-opt "`)`"
  138               | "`new`" . apostrophe-expression "`(`" argument-list-opt "`)`"

    IDENTIFIER    shift, and go to state 2
    "APOSTROPHE"  shift, and go to state 9
    "`::`"        shift, and go to state 10

    identifier             go to state 35
    qname                  go to state 59
    apostrophe-expression  go to state 60


State 16

   32 finished_statement: "`while`" . syntax-expression braced-statements
   33                   | "`while`" . syntax-expression "`;`" syntax-expression braced-statements

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`!`"                shift, and go to state 12
    "`new`"              shift, and go to state 15
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 35
    qname                    go to state 36
    syntax-expression        go to state 61
    syntax-expression-wo-ii  go to state 40
    apostrophe-expression    go to state 41
    new-expression           go to state 42
    call-expression          go to state 43
    compound-expression      go to state 46


State 17

   34 finished_statement: "`if`" . syntax-expression braced-statements
   35                   | "`if`" . syntax-expression braced-statements "`else`" braced-statements

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`!`"                shift, and go to state 12
    "`new`"              shift, and go to state 15
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 35
    qname                    go to state 36
    syntax-expression        go to state 62
    syntax-expression-wo-ii  go to state 40
    apostrophe-expression    go to state 41
    new-expression           go to state 42
    call-expression          go to state 43
    compound-expression      go to state 46


State 18

   40 generic-statement: "`return`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`!`"                shift, and go to state 12
    "`new`"              shift, and go to state 15
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 35
    qname                    go to state 36
    syntax-expression        go to state 63
    syntax-expression-wo-ii  go to state 40
    apostrophe-expression    go to state 41
    new-expression           go to state 42
    call-expression          go to state 43
    compound-expression      go to state 46


State 19

   17 statement: USING . using-decl

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 10

    identifier  go to state 35
    qname       go to state 64
    using-decl  go to state 65


State 20

   12 statement: INCLUDE . STRING

    STRING  shift, and go to state 66


State 21

   52 fn-start-decl: INLINE .

    $default  reduce using rule 52 (fn-start-decl)


State 22

   57 enum-decl: ENUM . qname "`{`" case-list-opt "`}`"

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 10

    identifier  go to state 35
    qname       go to state 67


State 23

   16 statement: STRUCT . struct-decl

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 10

    identifier   go to state 35
    qname        go to state 68
    struct-decl  go to state 69


State 24

  114 syntax-expression-wo-ii: "true" .

    $default  reduce using rule 114 (syntax-expression-wo-ii)


State 25

  115 syntax-expression-wo-ii: "false" .

    $default  reduce using rule 115 (syntax-expression-wo-ii)


State 26

    0 $accept: begin . "end of file"

    "end of file"  shift, and go to state 70


State 27

    1 begin: statement_any . "end of file"
    9 finished_statement_any: statement_any . "`;`"

    "end of file"  shift, and go to state 71
    "`;`"          shift, and go to state 72


State 28

    2 begin: finished_statement_any . "end of file"
    5 statement_any: finished_statement_any . statement
    7 finished_statement_any: finished_statement_any . "`;`"
    8                       | finished_statement_any . finished_statement

    "end of file"        shift, and go to state 73
    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`;`"                shift, and go to state 74
    "`!`"                shift, and go to state 12
    LET                  shift, and go to state 13
    EXTERN               shift, and go to state 14
    "`new`"              shift, and go to state 15
    "`while`"            shift, and go to state 16
    "`if`"               shift, and go to state 17
    "`return`"           shift, and go to state 18
    USING                shift, and go to state 19
    INCLUDE              shift, and go to state 20
    INLINE               shift, and go to state 21
    ENUM                 shift, and go to state 22
    STRUCT               shift, and go to state 23
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    $default  reduce using rule 51 (fn-start-decl)

    statement                     go to state 75
    let-decl                      go to state 30
    let-decl-start                go to state 31
    let-decl-start-with-opt-type  go to state 32
    finished_statement            go to state 76
    generic-statement             go to state 34
    identifier                    go to state 35
    qname                         go to state 36
    fn-start-decl                 go to state 37
    enum-decl                     go to state 38
    syntax-expression             go to state 39
    syntax-expression-wo-ii       go to state 40
    apostrophe-expression         go to state 41
    new-expression                go to state 42
    call-expression               go to state 43
    compound-expression           go to state 44


State 29

    4 statement_any: statement .

    $default  reduce using rule 4 (statement_any)


State 30

   39 generic-statement: let-decl .

    $default  reduce using rule 39 (generic-statement)


State 31

   22 let-decl-start-with-opt-type: let-decl-start .
   23                             | let-decl-start . "`:`" type-expr

    "`:`"  shift, and go to state 77

    $default  reduce using rule 22 (let-decl-start-with-opt-type)


State 32

   18 let-decl: let-decl-start-with-opt-type .
   19         | let-decl-start-with-opt-type . "`=`" syntax-expression

    "`=`"  shift, and go to state 78

    $default  reduce using rule 18 (let-decl)


State 33

    6 finished_statement_any: finished_statement .

    $default  reduce using rule 6 (finished_statement_any)


State 34

   15 statement: generic-statement .

    $default  reduce using rule 15 (statement)


State 35

   49 qname: identifier .

    $default  reduce using rule 49 (qname)


State 36

   50 qname: qname . "`::`" identifier
  122 syntax-expression-wo-ii: qname .
  139 call-expression: qname . "`(`" argument-list-opt "`)`"

    "`::`"  shift, and go to state 79
    "`(`"   shift, and go to state 80

    $default  reduce using rule 122 (syntax-expression-wo-ii)


State 37

   14 statement: fn-start-decl . fn-decl "`=>`" syntax-expression
   36 finished_statement: fn-start-decl . fn-decl braced-statements

    "`fn`"  shift, and go to state 57

    fn-decl  go to state 81


State 38

   13 statement: enum-decl .

    $default  reduce using rule 13 (statement)


State 39

   42 generic-statement: syntax-expression . "`=`" syntax-expression
  124 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  125                        | syntax-expression . INTEGER_INDEX
  127                        | syntax-expression . "`...`"
  128                        | syntax-expression . "`+`" syntax-expression
  129                        | syntax-expression . "`==`" syntax-expression
  130                        | syntax-expression . "`!=`" syntax-expression

    INTEGER_INDEX  shift, and go to state 82
    "`=`"          shift, and go to state 83
    "`==`"         shift, and go to state 84
    "`!=`"         shift, and go to state 85
    "`...`"        shift, and go to state 86
    "`.`"          shift, and go to state 87
    "`+`"          shift, and go to state 88


State 40

  113 syntax-expression: syntax-expression-wo-ii .

    $default  reduce using rule 113 (syntax-expression)


State 41

  131 syntax-expression-wo-ii: apostrophe-expression .
  141 call-expression: apostrophe-expression . "`(`" argument-list-opt "`)`"

    "`(`"  shift, and go to state 89

    $default  reduce using rule 131 (syntax-expression-wo-ii)


State 42

  132 syntax-expression-wo-ii: new-expression .

    $default  reduce using rule 132 (syntax-expression-wo-ii)


State 43

  140 call-expression: call-expression . "`(`" argument-list-opt "`)`"
  142 compound-expression: call-expression .

    "`(`"  shift, and go to state 90

    $default  reduce using rule 142 (compound-expression)


State 44

   41 generic-statement: compound-expression .
  133 syntax-expression-wo-ii: compound-expression .

    "end of file"  reduce using rule 41 (generic-statement)
    "`}`"          reduce using rule 41 (generic-statement)
    "`;`"          reduce using rule 41 (generic-statement)
    $default       reduce using rule 133 (syntax-expression-wo-ii)


State 45

  124 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  125                        | syntax-expression . INTEGER_INDEX
  127                        | syntax-expression . "`...`"
  128                        | syntax-expression . "`+`" syntax-expression
  129                        | syntax-expression . "`==`" syntax-expression
  130                        | syntax-expression . "`!=`" syntax-expression
  134 apostrophe-expression: "APOSTROPHE" syntax-expression . "APOSTROPHE"

    INTEGER_INDEX  shift, and go to state 82
    "APOSTROPHE"   shift, and go to state 91
    "`==`"         shift, and go to state 84
    "`!=`"         shift, and go to state 85
    "`...`"        shift, and go to state 86
    "`.`"          shift, and go to state 87
    "`+`"          shift, and go to state 88


State 46

  133 syntax-expression-wo-ii: compound-expression .

    $default  reduce using rule 133 (syntax-expression-wo-ii)


State 47

   48 qname: "`::`" identifier .

    $default  reduce using rule 48 (qname)


State 48

   49 qname: identifier .
   73 argument-name: identifier . "`=`"
   74              | identifier . "`:`"

    "`=`"  shift, and go to state 92
    "`:`"  shift, and go to state 93

    $default  reduce using rule 49 (qname)


State 49

   70 argument-list: argument-list . "," argument
  123 syntax-expression-wo-ii: "`(`" argument-list . "`)`"

    "`)`"  shift, and go to state 94
    ","    shift, and go to state 95


State 50

   69 argument-list: argument .

    $default  reduce using rule 69 (argument-list)


State 51

   71 argument: argument-name . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`!`"                shift, and go to state 12
    "`new`"              shift, and go to state 15
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 35
    qname                    go to state 36
    syntax-expression        go to state 96
    syntax-expression-wo-ii  go to state 40
    apostrophe-expression    go to state 41
    new-expression           go to state 42
    call-expression          go to state 43
    compound-expression      go to state 46


State 52

   72 argument: syntax-expression .
  124 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  125                        | syntax-expression . INTEGER_INDEX
  127                        | syntax-expression . "`...`"
  128                        | syntax-expression . "`+`" syntax-expression
  129                        | syntax-expression . "`==`" syntax-expression
  130                        | syntax-expression . "`!=`" syntax-expression

    INTEGER_INDEX  shift, and go to state 82
    "`==`"         shift, and go to state 84
    "`!=`"         shift, and go to state 85
    "`...`"        shift, and go to state 86
    "`.`"          shift, and go to state 87
    "`+`"          shift, and go to state 88

    $default  reduce using rule 72 (argument)


State 53

  124 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  125                        | syntax-expression . INTEGER_INDEX
  126                        | "`!`" syntax-expression .
  127                        | syntax-expression . "`...`"
  128                        | syntax-expression . "`+`" syntax-expression
  129                        | syntax-expression . "`==`" syntax-expression
  130                        | syntax-expression . "`!=`" syntax-expression

    INTEGER_INDEX  shift, and go to state 82
    "`.`"          shift, and go to state 87

    $default  reduce using rule 126 (syntax-expression-wo-ii)


State 54

   21 let-decl-start: LET "weak modifier" . identifier

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 97


State 55

   20 let-decl-start: LET identifier .

    $default  reduce using rule 20 (let-decl-start)


State 56

   10 statement: EXTERN VAR . identifier "`:`" type-expr

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 98


State 57

   55 fn-decl: "`fn`" . fn-name "`(`" parameter-list-opt "`)`"
   56        | "`fn`" . fn-name "`(`" parameter-list-opt "`)`" "`->`" syntax-expression

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 10
    "`new`"     shift, and go to state 99

    identifier  go to state 35
    qname       go to state 100
    fn-name     go to state 101


State 58

   11 statement: EXTERN fn-decl .

    $default  reduce using rule 11 (statement)


State 59

   50 qname: qname . "`::`" identifier
  135 new-expression: "`new`" qname .
  137               | "`new`" qname . "`(`" argument-list-opt "`)`"

    "`::`"  shift, and go to state 79
    "`(`"   shift, and go to state 102

    $default  reduce using rule 135 (new-expression)


State 60

  136 new-expression: "`new`" apostrophe-expression .
  138               | "`new`" apostrophe-expression . "`(`" argument-list-opt "`)`"

    "`(`"  shift, and go to state 103

    $default  reduce using rule 136 (new-expression)


State 61

   32 finished_statement: "`while`" syntax-expression . braced-statements
   33                   | "`while`" syntax-expression . "`;`" syntax-expression braced-statements
  124 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  125                        | syntax-expression . INTEGER_INDEX
  127                        | syntax-expression . "`...`"
  128                        | syntax-expression . "`+`" syntax-expression
  129                        | syntax-expression . "`==`" syntax-expression
  130                        | syntax-expression . "`!=`" syntax-expression

    INTEGER_INDEX  shift, and go to state 82
    "`==`"         shift, and go to state 84
    "`!=`"         shift, and go to state 85
    "`...`"        shift, and go to state 86
    "`{`"          shift, and go to state 104
    "`;`"          shift, and go to state 105
    "`.`"          shift, and go to state 87
    "`+`"          shift, and go to state 88

    braced-statements  go to state 106


State 62

   34 finished_statement: "`if`" syntax-expression . braced-statements
   35                   | "`if`" syntax-expression . braced-statements "`else`" braced-statements
  124 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  125                        | syntax-expression . INTEGER_INDEX
  127                        | syntax-expression . "`...`"
  128                        | syntax-expression . "`+`" syntax-expression
  129                        | syntax-expression . "`==`" syntax-expression
  130                        | syntax-expression . "`!=`" syntax-expression

    INTEGER_INDEX  shift, and go to state 82
    "`==`"         shift, and go to state 84
    "`!=`"         shift, and go to state 85
    "`...`"        shift, and go to state 86
    "`{`"          shift, and go to state 104
    "`.`"          shift, and go to state 87
    "`+`"          shift, and go to state 88

    braced-statements  go to state 107


State 63

   40 generic-statement: "`return`" syntax-expression .
  124 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  125                        | syntax-expression . INTEGER_INDEX
  127                        | syntax-expression . "`...`"
  128                        | syntax-expression . "`+`" syntax-expression
  129                        | syntax-expression . "`==`" syntax-expression
  130                        | syntax-expression . "`!=`" syntax-expression

    INTEGER_INDEX  shift, and go to state 82
    "`==`"         shift, and go to state 84
    "`!=`"         shift, and go to state 85
    "`...`"        shift, and go to state 86
    "`.`"          shift, and go to state 87
    "`+`"          shift, and go to state 88

    $default  reduce using rule 40 (generic-statement)


State 64

   50 qname: qname . "`::`" identifier
   65 using-decl: qname . "`=>`" syntax-expression
   66           | qname . "`(`" parameter-list-opt "`)`" "`=>`" syntax-expression

    "`=>`"  shift, and go to state 108
    "`::`"  shift, and go to state 79
    "`(`"   shift, and go to state 109


State 65

   17 statement: USING using-decl .

    $default  reduce using rule 17 (statement)


State 66

   12 statement: INCLUDE STRING .

    $default  reduce using rule 12 (statement)


State 67

   50 qname: qname . "`::`" identifier
   57 enum-decl: ENUM qname . "`{`" case-list-opt "`}`"

    "`::`"  shift, and go to state 79
    "`{`"   shift, and go to state 110


State 68

   50 qname: qname . "`::`" identifier
   63 struct-decl: qname . "`=>`" "`(`" field-list-opt "`)`"
   64            | qname . "`(`" parameter-list-opt "`)`" "`=>`" "`(`" field-list-opt "`)`"

    "`=>`"  shift, and go to state 111
    "`::`"  shift, and go to state 79
    "`(`"   shift, and go to state 112


State 69

   16 statement: STRUCT struct-decl .

    $default  reduce using rule 16 (statement)


State 70

    0 $accept: begin "end of file" .

    $default  accept


State 71

    1 begin: statement_any "end of file" .

    $default  reduce using rule 1 (begin)


State 72

    9 finished_statement_any: statement_any "`;`" .

    $default  reduce using rule 9 (finished_statement_any)


State 73

    2 begin: finished_statement_any "end of file" .

    $default  reduce using rule 2 (begin)


State 74

    7 finished_statement_any: finished_statement_any "`;`" .

    $default  reduce using rule 7 (finished_statement_any)


State 75

    5 statement_any: finished_statement_any statement .

    $default  reduce using rule 5 (statement_any)


State 76

    8 finished_statement_any: finished_statement_any finished_statement .

    $default  reduce using rule 8 (finished_statement_any)


State 77

   23 let-decl-start-with-opt-type: let-decl-start "`:`" . type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 113
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 114
    "`[`"                shift, and go to state 115

    identifier  go to state 35
    qname       go to state 116
    type-expr   go to state 117


State 78

   19 let-decl: let-decl-start-with-opt-type "`=`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`!`"                shift, and go to state 12
    "`new`"              shift, and go to state 15
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 35
    qname                    go to state 36
    syntax-expression        go to state 118
    syntax-expression-wo-ii  go to state 40
    apostrophe-expression    go to state 41
    new-expression           go to state 42
    call-expression          go to state 43
    compound-expression      go to state 46


State 79

   50 qname: qname "`::`" . identifier

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 119


State 80

  139 call-expression: qname "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`!`"                shift, and go to state 12
    "`new`"              shift, and go to state 15
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    $default  reduce using rule 67 (argument-list-opt)

    identifier               go to state 48
    qname                    go to state 36
    argument-list-opt        go to state 120
    argument-list            go to state 121
    argument                 go to state 50
    argument-name            go to state 51
    syntax-expression        go to state 52
    syntax-expression-wo-ii  go to state 40
    apostrophe-expression    go to state 41
    new-expression           go to state 42
    call-expression          go to state 43
    compound-expression      go to state 46


State 81

   14 statement: fn-start-decl fn-decl . "`=>`" syntax-expression
   36 finished_statement: fn-start-decl fn-decl . braced-statements

    "`=>`"  shift, and go to state 122
    "`{`"   shift, and go to state 104

    braced-statements  go to state 123


State 82

  125 syntax-expression-wo-ii: syntax-expression INTEGER_INDEX .

    $default  reduce using rule 125 (syntax-expression-wo-ii)


State 83

   42 generic-statement: syntax-expression "`=`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`!`"                shift, and go to state 12
    "`new`"              shift, and go to state 15
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 35
    qname                    go to state 36
    syntax-expression        go to state 124
    syntax-expression-wo-ii  go to state 40
    apostrophe-expression    go to state 41
    new-expression           go to state 42
    call-expression          go to state 43
    compound-expression      go to state 46


State 84

  129 syntax-expression-wo-ii: syntax-expression "`==`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`!`"                shift, and go to state 12
    "`new`"              shift, and go to state 15
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 35
    qname                    go to state 36
    syntax-expression        go to state 125
    syntax-expression-wo-ii  go to state 40
    apostrophe-expression    go to state 41
    new-expression           go to state 42
    call-expression          go to state 43
    compound-expression      go to state 46


State 85

  130 syntax-expression-wo-ii: syntax-expression "`!=`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`!`"                shift, and go to state 12
    "`new`"              shift, and go to state 15
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 35
    qname                    go to state 36
    syntax-expression        go to state 126
    syntax-expression-wo-ii  go to state 40
    apostrophe-expression    go to state 41
    new-expression           go to state 42
    call-expression          go to state 43
    compound-expression      go to state 46


State 86

  127 syntax-expression-wo-ii: syntax-expression "`...`" .

    $default  reduce using rule 127 (syntax-expression-wo-ii)


State 87

  124 syntax-expression-wo-ii: syntax-expression "`.`" . identifier

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 127


State 88

  128 syntax-expression-wo-ii: syntax-expression "`+`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`!`"                shift, and go to state 12
    "`new`"              shift, and go to state 15
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 35
    qname                    go to state 36
    syntax-expression        go to state 128
    syntax-expression-wo-ii  go to state 40
    apostrophe-expression    go to state 41
    new-expression           go to state 42
    call-expression          go to state 43
    compound-expression      go to state 46


State 89

  141 call-expression: apostrophe-expression "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`!`"                shift, and go to state 12
    "`new`"              shift, and go to state 15
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    $default  reduce using rule 67 (argument-list-opt)

    identifier               go to state 48
    qname                    go to state 36
    argument-list-opt        go to state 129
    argument-list            go to state 121
    argument                 go to state 50
    argument-name            go to state 51
    syntax-expression        go to state 52
    syntax-expression-wo-ii  go to state 40
    apostrophe-expression    go to state 41
    new-expression           go to state 42
    call-expression          go to state 43
    compound-expression      go to state 46


State 90

  140 call-expression: call-expression "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`!`"                shift, and go to state 12
    "`new`"              shift, and go to state 15
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    $default  reduce using rule 67 (argument-list-opt)

    identifier               go to state 48
    qname                    go to state 36
    argument-list-opt        go to state 130
    argument-list            go to state 121
    argument                 go to state 50
    argument-name            go to state 51
    syntax-expression        go to state 52
    syntax-expression-wo-ii  go to state 40
    apostrophe-expression    go to state 41
    new-expression           go to state 42
    call-expression          go to state 43
    compound-expression      go to state 46


State 91

  134 apostrophe-expression: "APOSTROPHE" syntax-expression "APOSTROPHE" .

    $default  reduce using rule 134 (apostrophe-expression)


State 92

   73 argument-name: identifier "`=`" .

    $default  reduce using rule 73 (argument-name)


State 93

   74 argument-name: identifier "`:`" .

    $default  reduce using rule 74 (argument-name)


State 94

  123 syntax-expression-wo-ii: "`(`" argument-list "`)`" .

    $default  reduce using rule 123 (syntax-expression-wo-ii)


State 95

   70 argument-list: argument-list "," . argument

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`!`"                shift, and go to state 12
    "`new`"              shift, and go to state 15
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 48
    qname                    go to state 36
    argument                 go to state 131
    argument-name            go to state 51
    syntax-expression        go to state 52
    syntax-expression-wo-ii  go to state 40
    apostrophe-expression    go to state 41
    new-expression           go to state 42
    call-expression          go to state 43
    compound-expression      go to state 46


State 96

   71 argument: argument-name syntax-expression .
  124 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  125                        | syntax-expression . INTEGER_INDEX
  127                        | syntax-expression . "`...`"
  128                        | syntax-expression . "`+`" syntax-expression
  129                        | syntax-expression . "`==`" syntax-expression
  130                        | syntax-expression . "`!=`" syntax-expression

    INTEGER_INDEX  shift, and go to state 82
    "`==`"         shift, and go to state 84
    "`!=`"         shift, and go to state 85
    "`...`"        shift, and go to state 86
    "`.`"          shift, and go to state 87
    "`+`"          shift, and go to state 88

    $default  reduce using rule 71 (argument)


State 97

   21 let-decl-start: LET "weak modifier" identifier .

    $default  reduce using rule 21 (let-decl-start)


State 98

   10 statement: EXTERN VAR identifier . "`:`" type-expr

    "`:`"  shift, and go to state 132


State 99

   54 fn-name: "`new`" .

    $default  reduce using rule 54 (fn-name)


State 100

   50 qname: qname . "`::`" identifier
   53 fn-name: qname .

    "`::`"  shift, and go to state 79

    $default  reduce using rule 53 (fn-name)


State 101

   55 fn-decl: "`fn`" fn-name . "`(`" parameter-list-opt "`)`"
   56        | "`fn`" fn-name . "`(`" parameter-list-opt "`)`" "`->`" syntax-expression

    "`(`"  shift, and go to state 133


State 102

  137 new-expression: "`new`" qname "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`!`"                shift, and go to state 12
    "`new`"              shift, and go to state 15
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    $default  reduce using rule 67 (argument-list-opt)

    identifier               go to state 48
    qname                    go to state 36
    argument-list-opt        go to state 134
    argument-list            go to state 121
    argument                 go to state 50
    argument-name            go to state 51
    syntax-expression        go to state 52
    syntax-expression-wo-ii  go to state 40
    apostrophe-expression    go to state 41
    new-expression           go to state 42
    call-expression          go to state 43
    compound-expression      go to state 46


State 103

  138 new-expression: "`new`" apostrophe-expression "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`!`"                shift, and go to state 12
    "`new`"              shift, and go to state 15
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    $default  reduce using rule 67 (argument-list-opt)

    identifier               go to state 48
    qname                    go to state 36
    argument-list-opt        go to state 135
    argument-list            go to state 121
    argument                 go to state 50
    argument-name            go to state 51
    syntax-expression        go to state 52
    syntax-expression-wo-ii  go to state 40
    apostrophe-expression    go to state 41
    new-expression           go to state 42
    call-expression          go to state 43
    compound-expression      go to state 46


State 104

   31 braced-statements: "`{`" . infunction-statement-set "`}`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`!`"                shift, and go to state 12
    LET                  shift, and go to state 13
    "`new`"              shift, and go to state 15
    "`while`"            shift, and go to state 16
    "`if`"               shift, and go to state 17
    "`continue`"         shift, and go to state 136
    "`break`"            shift, and go to state 137
    "`return`"           shift, and go to state 18
    INLINE               shift, and go to state 21
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    "`fn`"    reduce using rule 51 (fn-start-decl)
    $default  reduce using rule 24 (infunction-statement-any)

    let-decl                           go to state 30
    let-decl-start                     go to state 31
    let-decl-start-with-opt-type       go to state 32
    infunction-statement-any           go to state 138
    finished-infunction-statement-any  go to state 139
    finished_statement                 go to state 140
    infunction-statement-set           go to state 141
    generic-statement                  go to state 142
    infunction-statement               go to state 143
    identifier                         go to state 35
    qname                              go to state 36
    fn-start-decl                      go to state 144
    syntax-expression                  go to state 39
    syntax-expression-wo-ii            go to state 40
    apostrophe-expression              go to state 41
    new-expression                     go to state 42
    call-expression                    go to state 43
    compound-expression                go to state 44


State 105

   33 finished_statement: "`while`" syntax-expression "`;`" . syntax-expression braced-statements

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`!`"                shift, and go to state 12
    "`new`"              shift, and go to state 15
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 35
    qname                    go to state 36
    syntax-expression        go to state 145
    syntax-expression-wo-ii  go to state 40
    apostrophe-expression    go to state 41
    new-expression           go to state 42
    call-expression          go to state 43
    compound-expression      go to state 46


State 106

   32 finished_statement: "`while`" syntax-expression braced-statements .

    $default  reduce using rule 32 (finished_statement)


State 107

   34 finished_statement: "`if`" syntax-expression braced-statements .
   35                   | "`if`" syntax-expression braced-statements . "`else`" braced-statements

    "`else`"  shift, and go to state 146

    $default  reduce using rule 34 (finished_statement)


State 108

   65 using-decl: qname "`=>`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`!`"                shift, and go to state 12
    "`new`"              shift, and go to state 15
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 35
    qname                    go to state 36
    syntax-expression        go to state 147
    syntax-expression-wo-ii  go to state 40
    apostrophe-expression    go to state 41
    new-expression           go to state 42
    call-expression          go to state 43
    compound-expression      go to state 46


State 109

   66 using-decl: qname "`(`" . parameter-list-opt "`)`" "`=>`" syntax-expression

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 148
    "`@`"                shift, and go to state 149
    "`_`"                shift, and go to state 150
    "`::`"               shift, and go to state 10
    TYPENAME             shift, and go to state 151
    "const modifier"     shift, and go to state 152

    $default  reduce using rule 85 (parameter-list-opt)

    identifier                     go to state 153
    qname                          go to state 154
    parameter-list-opt             go to state 155
    parameter-list                 go to state 156
    parameter-decl                 go to state 157
    parameter-name-decl            go to state 158
    parameter-constraint-modifier  go to state 159
    parameter-constraint-set       go to state 160
    parameter-matched-type         go to state 161
    basic-parameter-matched-type   go to state 162
    concept-expression             go to state 163


State 110

   57 enum-decl: ENUM qname "`{`" . case-list-opt "`}`"

    IDENTIFIER  shift, and go to state 2

    $default  reduce using rule 58 (case-list-opt)

    identifier     go to state 164
    case-list-opt  go to state 165
    case-list      go to state 166
    case-decl      go to state 167


State 111

   63 struct-decl: qname "`=>`" . "`(`" field-list-opt "`)`"

    "`(`"  shift, and go to state 168


State 112

   64 struct-decl: qname "`(`" . parameter-list-opt "`)`" "`=>`" "`(`" field-list-opt "`)`"

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 148
    "`@`"                shift, and go to state 149
    "`_`"                shift, and go to state 150
    "`::`"               shift, and go to state 10
    TYPENAME             shift, and go to state 151
    "const modifier"     shift, and go to state 152

    $default  reduce using rule 85 (parameter-list-opt)

    identifier                     go to state 153
    qname                          go to state 154
    parameter-list-opt             go to state 169
    parameter-list                 go to state 156
    parameter-decl                 go to state 157
    parameter-name-decl            go to state 158
    parameter-constraint-modifier  go to state 159
    parameter-constraint-set       go to state 160
    parameter-matched-type         go to state 161
    basic-parameter-matched-type   go to state 162
    concept-expression             go to state 163


State 113

  144 type-expr: INTERNAL_IDENTIFIER .

    $default  reduce using rule 144 (type-expr)


State 114

  146 type-expr: "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`!`"                shift, and go to state 12
    "`new`"              shift, and go to state 15
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    $default  reduce using rule 67 (argument-list-opt)

    identifier               go to state 48
    qname                    go to state 36
    argument-list-opt        go to state 170
    argument-list            go to state 121
    argument                 go to state 50
    argument-name            go to state 51
    syntax-expression        go to state 52
    syntax-expression-wo-ii  go to state 40
    apostrophe-expression    go to state 41
    new-expression           go to state 42
    call-expression          go to state 43
    compound-expression      go to state 46


State 115

  145 type-expr: "`[`" . type-expr "`]`"

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 113
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 114
    "`[`"                shift, and go to state 115

    identifier  go to state 35
    qname       go to state 116
    type-expr   go to state 171


State 116

   50 qname: qname . "`::`" identifier
  143 type-expr: qname .

    "`::`"  shift, and go to state 79

    $default  reduce using rule 143 (type-expr)


State 117

   23 let-decl-start-with-opt-type: let-decl-start "`:`" type-expr .
  147 type-expr: type-expr . "`[`" INTEGER "`]`"
  148          | type-expr . "`|`" type-expr
  149          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 172
    "`[`"   shift, and go to state 173
    "`|`"   shift, and go to state 174

    $default  reduce using rule 23 (let-decl-start-with-opt-type)


State 118

   19 let-decl: let-decl-start-with-opt-type "`=`" syntax-expression .
  124 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  125                        | syntax-expression . INTEGER_INDEX
  127                        | syntax-expression . "`...`"
  128                        | syntax-expression . "`+`" syntax-expression
  129                        | syntax-expression . "`==`" syntax-expression
  130                        | syntax-expression . "`!=`" syntax-expression

    INTEGER_INDEX  shift, and go to state 82
    "`==`"         shift, and go to state 84
    "`!=`"         shift, and go to state 85
    "`...`"        shift, and go to state 86
    "`.`"          shift, and go to state 87
    "`+`"          shift, and go to state 88

    $default  reduce using rule 19 (let-decl)


State 119

   50 qname: qname "`::`" identifier .

    $default  reduce using rule 50 (qname)


State 120

  139 call-expression: qname "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 175


State 121

   68 argument-list-opt: argument-list .
   70 argument-list: argument-list . "," argument

    ","  shift, and go to state 95

    $default  reduce using rule 68 (argument-list-opt)


State 122

   14 statement: fn-start-decl fn-decl "`=>`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`!`"                shift, and go to state 12
    "`new`"              shift, and go to state 15
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 35
    qname                    go to state 36
    syntax-expression        go to state 176
    syntax-expression-wo-ii  go to state 40
    apostrophe-expression    go to state 41
    new-expression           go to state 42
    call-expression          go to state 43
    compound-expression      go to state 46


State 123

   36 finished_statement: fn-start-decl fn-decl braced-statements .

    $default  reduce using rule 36 (finished_statement)


State 124

   42 generic-statement: syntax-expression "`=`" syntax-expression .
  124 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  125                        | syntax-expression . INTEGER_INDEX
  127                        | syntax-expression . "`...`"
  128                        | syntax-expression . "`+`" syntax-expression
  129                        | syntax-expression . "`==`" syntax-expression
  130                        | syntax-expression . "`!=`" syntax-expression

    INTEGER_INDEX  shift, and go to state 82
    "`==`"         shift, and go to state 84
    "`!=`"         shift, and go to state 85
    "`...`"        shift, and go to state 86
    "`.`"          shift, and go to state 87
    "`+`"          shift, and go to state 88

    $default  reduce using rule 42 (generic-statement)


State 125

  124 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  125                        | syntax-expression . INTEGER_INDEX
  127                        | syntax-expression . "`...`"
  128                        | syntax-expression . "`+`" syntax-expression
  129                        | syntax-expression . "`==`" syntax-expression
  129                        | syntax-expression "`==`" syntax-expression .
  130                        | syntax-expression . "`!=`" syntax-expression

    INTEGER_INDEX  shift, and go to state 82
    "`.`"          shift, and go to state 87
    "`+`"          shift, and go to state 88

    $default  reduce using rule 129 (syntax-expression-wo-ii)


State 126

  124 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  125                        | syntax-expression . INTEGER_INDEX
  127                        | syntax-expression . "`...`"
  128                        | syntax-expression . "`+`" syntax-expression
  129                        | syntax-expression . "`==`" syntax-expression
  130                        | syntax-expression . "`!=`" syntax-expression
  130                        | syntax-expression "`!=`" syntax-expression .

    INTEGER_INDEX  shift, and go to state 82
    "`.`"          shift, and go to state 87
    "`+`"          shift, and go to state 88

    $default  reduce using rule 130 (syntax-expression-wo-ii)


State 127

  124 syntax-expression-wo-ii: syntax-expression "`.`" identifier .

    $default  reduce using rule 124 (syntax-expression-wo-ii)


State 128

  124 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  125                        | syntax-expression . INTEGER_INDEX
  127                        | syntax-expression . "`...`"
  128                        | syntax-expression . "`+`" syntax-expression
  128                        | syntax-expression "`+`" syntax-expression .
  129                        | syntax-expression . "`==`" syntax-expression
  130                        | syntax-expression . "`!=`" syntax-expression

    INTEGER_INDEX  shift, and go to state 82
    "`.`"          shift, and go to state 87

    $default  reduce using rule 128 (syntax-expression-wo-ii)


State 129

  141 call-expression: apostrophe-expression "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 177


State 130

  140 call-expression: call-expression "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 178


State 131

   70 argument-list: argument-list "," argument .

    $default  reduce using rule 70 (argument-list)


State 132

   10 statement: EXTERN VAR identifier "`:`" . type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 113
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 114
    "`[`"                shift, and go to state 115

    identifier  go to state 35
    qname       go to state 116
    type-expr   go to state 179


State 133

   55 fn-decl: "`fn`" fn-name "`(`" . parameter-list-opt "`)`"
   56        | "`fn`" fn-name "`(`" . parameter-list-opt "`)`" "`->`" syntax-expression

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 148
    "`@`"                shift, and go to state 149
    "`_`"                shift, and go to state 150
    "`::`"               shift, and go to state 10
    TYPENAME             shift, and go to state 151
    "const modifier"     shift, and go to state 152

    $default  reduce using rule 85 (parameter-list-opt)

    identifier                     go to state 153
    qname                          go to state 154
    parameter-list-opt             go to state 180
    parameter-list                 go to state 156
    parameter-decl                 go to state 157
    parameter-name-decl            go to state 158
    parameter-constraint-modifier  go to state 159
    parameter-constraint-set       go to state 160
    parameter-matched-type         go to state 161
    basic-parameter-matched-type   go to state 162
    concept-expression             go to state 163


State 134

  137 new-expression: "`new`" qname "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 181


State 135

  138 new-expression: "`new`" apostrophe-expression "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 182


State 136

   45 infunction-statement: "`continue`" .

    $default  reduce using rule 45 (infunction-statement)


State 137

   44 infunction-statement: "`break`" .

    $default  reduce using rule 44 (infunction-statement)


State 138

   30 finished-infunction-statement-any: infunction-statement-any . "`;`"
   37 infunction-statement-set: infunction-statement-any .

    "`;`"  shift, and go to state 183

    $default  reduce using rule 37 (infunction-statement-set)


State 139

   26 infunction-statement-any: finished-infunction-statement-any . infunction-statement
   28 finished-infunction-statement-any: finished-infunction-statement-any . "`;`"
   29                                  | finished-infunction-statement-any . finished_statement
   38 infunction-statement-set: finished-infunction-statement-any .

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`;`"                shift, and go to state 184
    "`!`"                shift, and go to state 12
    LET                  shift, and go to state 13
    "`new`"              shift, and go to state 15
    "`while`"            shift, and go to state 16
    "`if`"               shift, and go to state 17
    "`continue`"         shift, and go to state 136
    "`break`"            shift, and go to state 137
    "`return`"           shift, and go to state 18
    INLINE               shift, and go to state 21
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    "`fn`"    reduce using rule 51 (fn-start-decl)
    $default  reduce using rule 38 (infunction-statement-set)

    let-decl                      go to state 30
    let-decl-start                go to state 31
    let-decl-start-with-opt-type  go to state 32
    finished_statement            go to state 185
    generic-statement             go to state 142
    infunction-statement          go to state 186
    identifier                    go to state 35
    qname                         go to state 36
    fn-start-decl                 go to state 144
    syntax-expression             go to state 39
    syntax-expression-wo-ii       go to state 40
    apostrophe-expression         go to state 41
    new-expression                go to state 42
    call-expression               go to state 43
    compound-expression           go to state 44


State 140

   27 finished-infunction-statement-any: finished_statement .

    $default  reduce using rule 27 (finished-infunction-statement-any)


State 141

   31 braced-statements: "`{`" infunction-statement-set . "`}`"

    "`}`"  shift, and go to state 187


State 142

   43 infunction-statement: generic-statement .

    $default  reduce using rule 43 (infunction-statement)


State 143

   25 infunction-statement-any: infunction-statement .

    $default  reduce using rule 25 (infunction-statement-any)


State 144

   36 finished_statement: fn-start-decl . fn-decl braced-statements

    "`fn`"  shift, and go to state 57

    fn-decl  go to state 188


State 145

   33 finished_statement: "`while`" syntax-expression "`;`" syntax-expression . braced-statements
  124 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  125                        | syntax-expression . INTEGER_INDEX
  127                        | syntax-expression . "`...`"
  128                        | syntax-expression . "`+`" syntax-expression
  129                        | syntax-expression . "`==`" syntax-expression
  130                        | syntax-expression . "`!=`" syntax-expression

    INTEGER_INDEX  shift, and go to state 82
    "`==`"         shift, and go to state 84
    "`!=`"         shift, and go to state 85
    "`...`"        shift, and go to state 86
    "`{`"          shift, and go to state 104
    "`.`"          shift, and go to state 87
    "`+`"          shift, and go to state 88

    braced-statements  go to state 189


State 146

   35 finished_statement: "`if`" syntax-expression braced-statements "`else`" . braced-statements

    "`{`"  shift, and go to state 104

    braced-statements  go to state 190


State 147

   65 using-decl: qname "`=>`" syntax-expression .
  124 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  125                        | syntax-expression . INTEGER_INDEX
  127                        | syntax-expression . "`...`"
  128                        | syntax-expression . "`+`" syntax-expression
  129                        | syntax-expression . "`==`" syntax-expression
  130                        | syntax-expression . "`!=`" syntax-expression

    INTEGER_INDEX  shift, and go to state 82
    "`==`"         shift, and go to state 84
    "`!=`"         shift, and go to state 85
    "`...`"        shift, and go to state 86
    "`.`"          shift, and go to state 87
    "`+`"          shift, and go to state 88

    $default  reduce using rule 65 (using-decl)


State 148

   94 parameter-name-decl: INTERNAL_IDENTIFIER . "`:`"
   95                    | INTERNAL_IDENTIFIER . "`...`" "`:`"
  105 parameter-matched-type: INTERNAL_IDENTIFIER .
  106                       | INTERNAL_IDENTIFIER . "`...`"

    "`...`"  shift, and go to state 191
    "`:`"    shift, and go to state 192

    $default  reduce using rule 105 (parameter-matched-type)


State 149

  111 concept-expression: "`@`" . qname

    IDENTIFIER  shift, and go to state 2
    "`::`"      shift, and go to state 10

    identifier  go to state 35
    qname       go to state 193


State 150

  107 basic-parameter-matched-type: "`_`" .

    $default  reduce using rule 107 (basic-parameter-matched-type)


State 151

   98 parameter-constraint-modifier: TYPENAME .

    $default  reduce using rule 98 (parameter-constraint-modifier)


State 152

   99 parameter-constraint-modifier: "const modifier" .

    $default  reduce using rule 99 (parameter-constraint-modifier)


State 153

   49 qname: identifier .
   92 parameter-name-decl: identifier . internal_identifier "`:`"
   93                    | identifier . "`:`"

    INTERNAL_IDENTIFIER  shift, and go to state 194
    "`:`"                shift, and go to state 195

    $default  reduce using rule 49 (qname)

    internal_identifier  go to state 196


State 154

   50 qname: qname . "`::`" identifier
  108 basic-parameter-matched-type: qname .
  109                             | qname . "`(`" argument-list-opt "`)`"

    "`::`"  shift, and go to state 79
    "`(`"   shift, and go to state 197

    $default  reduce using rule 108 (basic-parameter-matched-type)


State 155

   66 using-decl: qname "`(`" parameter-list-opt . "`)`" "`=>`" syntax-expression

    "`)`"  shift, and go to state 198


State 156

   86 parameter-list-opt: parameter-list .
   88 parameter-list: parameter-list . "," parameter-decl

    ","  shift, and go to state 199

    $default  reduce using rule 86 (parameter-list-opt)


State 157

   87 parameter-list: parameter-decl .

    $default  reduce using rule 87 (parameter-list)


State 158

   89 parameter-decl: parameter-name-decl . parameter-constraint-modifier-opt parameter-constraint-set

    TYPENAME          shift, and go to state 151
    "const modifier"  shift, and go to state 152

    $default  reduce using rule 97 (parameter-constraint-modifier-opt)

    parameter-constraint-modifier-opt  go to state 200
    parameter-constraint-modifier      go to state 201


State 159

   90 parameter-decl: parameter-constraint-modifier . parameter-constraint-set

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 202
    "`@`"                shift, and go to state 149
    "`_`"                shift, and go to state 150
    "`::`"               shift, and go to state 10

    identifier                    go to state 35
    qname                         go to state 154
    parameter-constraint-set      go to state 203
    parameter-matched-type        go to state 161
    basic-parameter-matched-type  go to state 162
    concept-expression            go to state 163


State 160

   91 parameter-decl: parameter-constraint-set .
  102 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`@`"  shift, and go to state 149

    $default  reduce using rule 91 (parameter-decl)

    concept-expression  go to state 204


State 161

  100 parameter-constraint-set: parameter-matched-type .

    $default  reduce using rule 100 (parameter-constraint-set)


State 162

  103 parameter-matched-type: basic-parameter-matched-type .
  104                       | basic-parameter-matched-type . "`...`"
  110 basic-parameter-matched-type: basic-parameter-matched-type . "`|`" basic-parameter-matched-type

    "`...`"  shift, and go to state 205
    "`|`"    shift, and go to state 206

    $default  reduce using rule 103 (parameter-matched-type)


State 163

  101 parameter-constraint-set: concept-expression .

    $default  reduce using rule 101 (parameter-constraint-set)


State 164

   62 case-decl: identifier .

    $default  reduce using rule 62 (case-decl)


State 165

   57 enum-decl: ENUM qname "`{`" case-list-opt . "`}`"

    "`}`"  shift, and go to state 207


State 166

   59 case-list-opt: case-list .
   61 case-list: case-list . "," case-decl

    ","  shift, and go to state 208

    $default  reduce using rule 59 (case-list-opt)


State 167

   60 case-list: case-decl .

    $default  reduce using rule 60 (case-list)


State 168

   63 struct-decl: qname "`=>`" "`(`" . field-list-opt "`)`"

    IDENTIFIER  shift, and go to state 2

    $default  reduce using rule 75 (field-list-opt)

    identifier      go to state 209
    field-list-opt  go to state 210
    field-list      go to state 211
    field           go to state 212


State 169

   64 struct-decl: qname "`(`" parameter-list-opt . "`)`" "`=>`" "`(`" field-list-opt "`)`"

    "`)`"  shift, and go to state 213


State 170

  146 type-expr: "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 214


State 171

  145 type-expr: "`[`" type-expr . "`]`"
  147          | type-expr . "`[`" INTEGER "`]`"
  148          | type-expr . "`|`" type-expr
  149          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 172
    "`[`"   shift, and go to state 173
    "`]`"   shift, and go to state 215
    "`|`"   shift, and go to state 174


State 172

  149 type-expr: type-expr "`->`" . type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 113
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 114
    "`[`"                shift, and go to state 115

    identifier  go to state 35
    qname       go to state 116
    type-expr   go to state 216


State 173

  147 type-expr: type-expr "`[`" . INTEGER "`]`"

    INTEGER  shift, and go to state 217


State 174

  148 type-expr: type-expr "`|`" . type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 113
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 114
    "`[`"                shift, and go to state 115

    identifier  go to state 35
    qname       go to state 116
    type-expr   go to state 218


State 175

  139 call-expression: qname "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 139 (call-expression)


State 176

   14 statement: fn-start-decl fn-decl "`=>`" syntax-expression .
  124 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  125                        | syntax-expression . INTEGER_INDEX
  127                        | syntax-expression . "`...`"
  128                        | syntax-expression . "`+`" syntax-expression
  129                        | syntax-expression . "`==`" syntax-expression
  130                        | syntax-expression . "`!=`" syntax-expression

    INTEGER_INDEX  shift, and go to state 82
    "`==`"         shift, and go to state 84
    "`!=`"         shift, and go to state 85
    "`...`"        shift, and go to state 86
    "`.`"          shift, and go to state 87
    "`+`"          shift, and go to state 88

    $default  reduce using rule 14 (statement)


State 177

  141 call-expression: apostrophe-expression "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 141 (call-expression)


State 178

  140 call-expression: call-expression "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 140 (call-expression)


State 179

   10 statement: EXTERN VAR identifier "`:`" type-expr .
  147 type-expr: type-expr . "`[`" INTEGER "`]`"
  148          | type-expr . "`|`" type-expr
  149          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 172
    "`[`"   shift, and go to state 173
    "`|`"   shift, and go to state 174

    $default  reduce using rule 10 (statement)


State 180

   55 fn-decl: "`fn`" fn-name "`(`" parameter-list-opt . "`)`"
   56        | "`fn`" fn-name "`(`" parameter-list-opt . "`)`" "`->`" syntax-expression

    "`)`"  shift, and go to state 219


State 181

  137 new-expression: "`new`" qname "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 137 (new-expression)


State 182

  138 new-expression: "`new`" apostrophe-expression "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 138 (new-expression)


State 183

   30 finished-infunction-statement-any: infunction-statement-any "`;`" .

    $default  reduce using rule 30 (finished-infunction-statement-any)


State 184

   28 finished-infunction-statement-any: finished-infunction-statement-any "`;`" .

    $default  reduce using rule 28 (finished-infunction-statement-any)


State 185

   29 finished-infunction-statement-any: finished-infunction-statement-any finished_statement .

    $default  reduce using rule 29 (finished-infunction-statement-any)


State 186

   26 infunction-statement-any: finished-infunction-statement-any infunction-statement .

    $default  reduce using rule 26 (infunction-statement-any)


State 187

   31 braced-statements: "`{`" infunction-statement-set "`}`" .

    $default  reduce using rule 31 (braced-statements)


State 188

   36 finished_statement: fn-start-decl fn-decl . braced-statements

    "`{`"  shift, and go to state 104

    braced-statements  go to state 123


State 189

   33 finished_statement: "`while`" syntax-expression "`;`" syntax-expression braced-statements .

    $default  reduce using rule 33 (finished_statement)


State 190

   35 finished_statement: "`if`" syntax-expression braced-statements "`else`" braced-statements .

    $default  reduce using rule 35 (finished_statement)


State 191

   95 parameter-name-decl: INTERNAL_IDENTIFIER "`...`" . "`:`"
  106 parameter-matched-type: INTERNAL_IDENTIFIER "`...`" .

    "`:`"  shift, and go to state 220

    $default  reduce using rule 106 (parameter-matched-type)


State 192

   94 parameter-name-decl: INTERNAL_IDENTIFIER "`:`" .

    $default  reduce using rule 94 (parameter-name-decl)


State 193

   50 qname: qname . "`::`" identifier
  111 concept-expression: "`@`" qname .

    "`::`"  shift, and go to state 79

    $default  reduce using rule 111 (concept-expression)


State 194

   47 internal_identifier: INTERNAL_IDENTIFIER .

    $default  reduce using rule 47 (internal_identifier)


State 195

   93 parameter-name-decl: identifier "`:`" .

    $default  reduce using rule 93 (parameter-name-decl)


State 196

   92 parameter-name-decl: identifier internal_identifier . "`:`"

    "`:`"  shift, and go to state 221


State 197

  109 basic-parameter-matched-type: qname "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`!`"                shift, and go to state 12
    "`new`"              shift, and go to state 15
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    $default  reduce using rule 67 (argument-list-opt)

    identifier               go to state 48
    qname                    go to state 36
    argument-list-opt        go to state 222
    argument-list            go to state 121
    argument                 go to state 50
    argument-name            go to state 51
    syntax-expression        go to state 52
    syntax-expression-wo-ii  go to state 40
    apostrophe-expression    go to state 41
    new-expression           go to state 42
    call-expression          go to state 43
    compound-expression      go to state 46


State 198

   66 using-decl: qname "`(`" parameter-list-opt "`)`" . "`=>`" syntax-expression

    "`=>`"  shift, and go to state 223


State 199

   88 parameter-list: parameter-list "," . parameter-decl

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 148
    "`@`"                shift, and go to state 149
    "`_`"                shift, and go to state 150
    "`::`"               shift, and go to state 10
    TYPENAME             shift, and go to state 151
    "const modifier"     shift, and go to state 152

    identifier                     go to state 153
    qname                          go to state 154
    parameter-decl                 go to state 224
    parameter-name-decl            go to state 158
    parameter-constraint-modifier  go to state 159
    parameter-constraint-set       go to state 160
    parameter-matched-type         go to state 161
    basic-parameter-matched-type   go to state 162
    concept-expression             go to state 163


State 200

   89 parameter-decl: parameter-name-decl parameter-constraint-modifier-opt . parameter-constraint-set

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 202
    "`@`"                shift, and go to state 149
    "`_`"                shift, and go to state 150
    "`::`"               shift, and go to state 10

    identifier                    go to state 35
    qname                         go to state 154
    parameter-constraint-set      go to state 225
    parameter-matched-type        go to state 161
    basic-parameter-matched-type  go to state 162
    concept-expression            go to state 163


State 201

   96 parameter-constraint-modifier-opt: parameter-constraint-modifier .

    $default  reduce using rule 96 (parameter-constraint-modifier-opt)


State 202

  105 parameter-matched-type: INTERNAL_IDENTIFIER .
  106                       | INTERNAL_IDENTIFIER . "`...`"

    "`...`"  shift, and go to state 226

    $default  reduce using rule 105 (parameter-matched-type)


State 203

   90 parameter-decl: parameter-constraint-modifier parameter-constraint-set .
  102 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`@`"  shift, and go to state 149

    $default  reduce using rule 90 (parameter-decl)

    concept-expression  go to state 204


State 204

  102 parameter-constraint-set: parameter-constraint-set concept-expression .

    $default  reduce using rule 102 (parameter-constraint-set)


State 205

  104 parameter-matched-type: basic-parameter-matched-type "`...`" .

    $default  reduce using rule 104 (parameter-matched-type)


State 206

  110 basic-parameter-matched-type: basic-parameter-matched-type "`|`" . basic-parameter-matched-type

    IDENTIFIER  shift, and go to state 2
    "`_`"       shift, and go to state 150
    "`::`"      shift, and go to state 10

    identifier                    go to state 35
    qname                         go to state 154
    basic-parameter-matched-type  go to state 227


State 207

   57 enum-decl: ENUM qname "`{`" case-list-opt "`}`" .

    $default  reduce using rule 57 (enum-decl)


State 208

   61 case-list: case-list "," . case-decl

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 164
    case-decl   go to state 228


State 209

   79 field: identifier . "`:`" parameter-constraint-modifier-opt field-type-expr
   80      | identifier . "`:`" parameter-constraint-modifier-opt field-type-expr "`=`" syntax-expression

    "`:`"  shift, and go to state 229


State 210

   63 struct-decl: qname "`=>`" "`(`" field-list-opt . "`)`"

    "`)`"  shift, and go to state 230


State 211

   76 field-list-opt: field-list .
   78 field-list: field-list . "," field

    ","  shift, and go to state 231

    $default  reduce using rule 76 (field-list-opt)


State 212

   77 field-list: field .

    $default  reduce using rule 77 (field-list)


State 213

   64 struct-decl: qname "`(`" parameter-list-opt "`)`" . "`=>`" "`(`" field-list-opt "`)`"

    "`=>`"  shift, and go to state 232


State 214

  146 type-expr: "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 146 (type-expr)


State 215

  145 type-expr: "`[`" type-expr "`]`" .

    $default  reduce using rule 145 (type-expr)


State 216

  147 type-expr: type-expr . "`[`" INTEGER "`]`"
  148          | type-expr . "`|`" type-expr
  149          | type-expr . "`->`" type-expr
  149          | type-expr "`->`" type-expr .

    $default  reduce using rule 149 (type-expr)


State 217

  147 type-expr: type-expr "`[`" INTEGER . "`]`"

    "`]`"  shift, and go to state 233


State 218

  147 type-expr: type-expr . "`[`" INTEGER "`]`"
  148          | type-expr . "`|`" type-expr
  148          | type-expr "`|`" type-expr .
  149          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 172
    "`[`"   shift, and go to state 173

    $default  reduce using rule 148 (type-expr)


State 219

   55 fn-decl: "`fn`" fn-name "`(`" parameter-list-opt "`)`" .
   56        | "`fn`" fn-name "`(`" parameter-list-opt "`)`" . "`->`" syntax-expression

    "`->`"  shift, and go to state 234

    $default  reduce using rule 55 (fn-decl)


State 220

   95 parameter-name-decl: INTERNAL_IDENTIFIER "`...`" "`:`" .

    $default  reduce using rule 95 (parameter-name-decl)


State 221

   92 parameter-name-decl: identifier internal_identifier "`:`" .

    $default  reduce using rule 92 (parameter-name-decl)


State 222

  109 basic-parameter-matched-type: qname "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 235


State 223

   66 using-decl: qname "`(`" parameter-list-opt "`)`" "`=>`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`!`"                shift, and go to state 12
    "`new`"              shift, and go to state 15
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 35
    qname                    go to state 36
    syntax-expression        go to state 236
    syntax-expression-wo-ii  go to state 40
    apostrophe-expression    go to state 41
    new-expression           go to state 42
    call-expression          go to state 43
    compound-expression      go to state 46


State 224

   88 parameter-list: parameter-list "," parameter-decl .

    $default  reduce using rule 88 (parameter-list)


State 225

   89 parameter-decl: parameter-name-decl parameter-constraint-modifier-opt parameter-constraint-set .
  102 parameter-constraint-set: parameter-constraint-set . concept-expression

    "`@`"  shift, and go to state 149

    $default  reduce using rule 89 (parameter-decl)

    concept-expression  go to state 204


State 226

  106 parameter-matched-type: INTERNAL_IDENTIFIER "`...`" .

    $default  reduce using rule 106 (parameter-matched-type)


State 227

  110 basic-parameter-matched-type: basic-parameter-matched-type . "`|`" basic-parameter-matched-type
  110                             | basic-parameter-matched-type "`|`" basic-parameter-matched-type .

    $default  reduce using rule 110 (basic-parameter-matched-type)


State 228

   61 case-list: case-list "," case-decl .

    $default  reduce using rule 61 (case-list)


State 229

   79 field: identifier "`:`" . parameter-constraint-modifier-opt field-type-expr
   80      | identifier "`:`" . parameter-constraint-modifier-opt field-type-expr "`=`" syntax-expression

    TYPENAME          shift, and go to state 151
    "const modifier"  shift, and go to state 152

    $default  reduce using rule 97 (parameter-constraint-modifier-opt)

    parameter-constraint-modifier-opt  go to state 237
    parameter-constraint-modifier      go to state 201


State 230

   63 struct-decl: qname "`=>`" "`(`" field-list-opt "`)`" .

    $default  reduce using rule 63 (struct-decl)


State 231

   78 field-list: field-list "," . field

    IDENTIFIER  shift, and go to state 2

    identifier  go to state 209
    field       go to state 238


State 232

   64 struct-decl: qname "`(`" parameter-list-opt "`)`" "`=>`" . "`(`" field-list-opt "`)`"

    "`(`"  shift, and go to state 239


State 233

  147 type-expr: type-expr "`[`" INTEGER "`]`" .

    $default  reduce using rule 147 (type-expr)


State 234

   56 fn-decl: "`fn`" fn-name "`(`" parameter-list-opt "`)`" "`->`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`!`"                shift, and go to state 12
    "`new`"              shift, and go to state 15
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 35
    qname                    go to state 36
    syntax-expression        go to state 240
    syntax-expression-wo-ii  go to state 40
    apostrophe-expression    go to state 41
    new-expression           go to state 42
    call-expression          go to state 43
    compound-expression      go to state 46


State 235

  109 basic-parameter-matched-type: qname "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 109 (basic-parameter-matched-type)


State 236

   66 using-decl: qname "`(`" parameter-list-opt "`)`" "`=>`" syntax-expression .
  124 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  125                        | syntax-expression . INTEGER_INDEX
  127                        | syntax-expression . "`...`"
  128                        | syntax-expression . "`+`" syntax-expression
  129                        | syntax-expression . "`==`" syntax-expression
  130                        | syntax-expression . "`!=`" syntax-expression

    INTEGER_INDEX  shift, and go to state 82
    "`==`"         shift, and go to state 84
    "`!=`"         shift, and go to state 85
    "`...`"        shift, and go to state 86
    "`.`"          shift, and go to state 87
    "`+`"          shift, and go to state 88

    $default  reduce using rule 66 (using-decl)


State 237

   79 field: identifier "`:`" parameter-constraint-modifier-opt . field-type-expr
   80      | identifier "`:`" parameter-constraint-modifier-opt . field-type-expr "`=`" syntax-expression

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 241
    "`::`"               shift, and go to state 10

    identifier       go to state 35
    qname            go to state 242
    field-type-expr  go to state 243


State 238

   78 field-list: field-list "," field .

    $default  reduce using rule 78 (field-list)


State 239

   64 struct-decl: qname "`(`" parameter-list-opt "`)`" "`=>`" "`(`" . field-list-opt "`)`"

    IDENTIFIER  shift, and go to state 2

    $default  reduce using rule 75 (field-list-opt)

    identifier      go to state 209
    field-list-opt  go to state 244
    field-list      go to state 211
    field           go to state 212


State 240

   56 fn-decl: "`fn`" fn-name "`(`" parameter-list-opt "`)`" "`->`" syntax-expression .
  124 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  125                        | syntax-expression . INTEGER_INDEX
  127                        | syntax-expression . "`...`"
  128                        | syntax-expression . "`+`" syntax-expression
  129                        | syntax-expression . "`==`" syntax-expression
  130                        | syntax-expression . "`!=`" syntax-expression

    INTEGER_INDEX  shift, and go to state 82
    "`==`"         shift, and go to state 84
    "`!=`"         shift, and go to state 85
    "`...`"        shift, and go to state 86
    "`.`"          shift, and go to state 87
    "`+`"          shift, and go to state 88

    $default  reduce using rule 56 (fn-decl)


State 241

   83 field-type-expr: INTERNAL_IDENTIFIER .

    $default  reduce using rule 83 (field-type-expr)


State 242

   50 qname: qname . "`::`" identifier
   81 field-type-expr: qname .
   82                | qname . "`(`" argument-list-opt "`)`"

    "`::`"  shift, and go to state 79
    "`(`"   shift, and go to state 245

    $default  reduce using rule 81 (field-type-expr)


State 243

   79 field: identifier "`:`" parameter-constraint-modifier-opt field-type-expr .
   80      | identifier "`:`" parameter-constraint-modifier-opt field-type-expr . "`=`" syntax-expression
   84 field-type-expr: field-type-expr . "`|`" field-type-expr

    "`=`"  shift, and go to state 246
    "`|`"  shift, and go to state 247

    $default  reduce using rule 79 (field)


State 244

   64 struct-decl: qname "`(`" parameter-list-opt "`)`" "`=>`" "`(`" field-list-opt . "`)`"

    "`)`"  shift, and go to state 248


State 245

   82 field-type-expr: qname "`(`" . argument-list-opt "`)`"

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`!`"                shift, and go to state 12
    "`new`"              shift, and go to state 15
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    $default  reduce using rule 67 (argument-list-opt)

    identifier               go to state 48
    qname                    go to state 36
    argument-list-opt        go to state 249
    argument-list            go to state 121
    argument                 go to state 50
    argument-name            go to state 51
    syntax-expression        go to state 52
    syntax-expression-wo-ii  go to state 40
    apostrophe-expression    go to state 41
    new-expression           go to state 42
    call-expression          go to state 43
    compound-expression      go to state 46


State 246

   80 field: identifier "`:`" parameter-constraint-modifier-opt field-type-expr "`=`" . syntax-expression

    STRING               shift, and go to state 1
    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 3
    RESERVED_IDENTIFIER  shift, and go to state 4
    INTEGER_INDEX        shift, and go to state 5
    INTEGER              shift, and go to state 6
    DECIMAL              shift, and go to state 7
    DECIMAL_S            shift, and go to state 8
    "APOSTROPHE"         shift, and go to state 9
    "`::`"               shift, and go to state 10
    "`(`"                shift, and go to state 11
    "`!`"                shift, and go to state 12
    "`new`"              shift, and go to state 15
    "true"               shift, and go to state 24
    "false"              shift, and go to state 25

    identifier               go to state 35
    qname                    go to state 36
    syntax-expression        go to state 250
    syntax-expression-wo-ii  go to state 40
    apostrophe-expression    go to state 41
    new-expression           go to state 42
    call-expression          go to state 43
    compound-expression      go to state 46


State 247

   84 field-type-expr: field-type-expr "`|`" . field-type-expr

    IDENTIFIER           shift, and go to state 2
    INTERNAL_IDENTIFIER  shift, and go to state 241
    "`::`"               shift, and go to state 10

    identifier       go to state 35
    qname            go to state 242
    field-type-expr  go to state 251


State 248

   64 struct-decl: qname "`(`" parameter-list-opt "`)`" "`=>`" "`(`" field-list-opt "`)`" .

    $default  reduce using rule 64 (struct-decl)


State 249

   82 field-type-expr: qname "`(`" argument-list-opt . "`)`"

    "`)`"  shift, and go to state 252


State 250

   80 field: identifier "`:`" parameter-constraint-modifier-opt field-type-expr "`=`" syntax-expression .
  124 syntax-expression-wo-ii: syntax-expression . "`.`" identifier
  125                        | syntax-expression . INTEGER_INDEX
  127                        | syntax-expression . "`...`"
  128                        | syntax-expression . "`+`" syntax-expression
  129                        | syntax-expression . "`==`" syntax-expression
  130                        | syntax-expression . "`!=`" syntax-expression

    INTEGER_INDEX  shift, and go to state 82
    "`==`"         shift, and go to state 84
    "`!=`"         shift, and go to state 85
    "`...`"        shift, and go to state 86
    "`.`"          shift, and go to state 87
    "`+`"          shift, and go to state 88

    $default  reduce using rule 80 (field)


State 251

   84 field-type-expr: field-type-expr . "`|`" field-type-expr
   84                | field-type-expr "`|`" field-type-expr .

    $default  reduce using rule 84 (field-type-expr)


State 252

   82 field-type-expr: qname "`(`" argument-list-opt "`)`" .

    $default  reduce using rule 82 (field-type-expr)
