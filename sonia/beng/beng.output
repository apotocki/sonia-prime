Terminals unused in grammar

    COMMENT_BEGIN
    COMMENT_END
    OPERATOR_TERM
    "`_`"
    "`->*`"
    "`~>`"
    "`.*`"
    "`++`"
    "`--`"
    "`<<`"
    "`>>`"
    "`<=`"
    "`>=`"
    "`==`"
    "`!=`"
    "`+=`"
    "`-=`"
    "`*=`"
    "`/=`"
    "`%=`"
    "`<<=`"
    "`>>=`"
    "`&=`"
    "`|=`"
    "`^=`"
    "`<`"
    "`>`"
    "`+`"
    "`-`"
    "`*`"
    "`/`"
    "`%`"
    "`&`"
    "`~`"
    "`^`"
    "`$`"
    "`#`"
    NEW
    FOR
    VOID_
    AUTO
    CONST_
    USING
    THROW
    DELETE_
    SIZEOF
    PRIVATE
    TEMPLATE
    NAMESPACE
    LOWEST
    "`::`"


Grammar

    0 $accept: begin "end of file"

    1 begin: declaration_any "end of file"

    2 declaration_any: %empty
    3                | declaration_any "`;`"
    4                | declaration_any enum-decl
    5                | declaration_any type-decl
    6                | declaration_any generic-decl

    7 generic-decl: EXTERN VAR identifier "`:`" type-expr "`;`"
    8             | EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" "`;`"
    9             | EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`;`"
   10             | fn-decl
   11             | let-decl
   12             | compound-expression "`;`"

   13 let-decl: LET identifier "`:`" type-expr "`;`"
   14         | LET identifier "`:`" type-expr "`=`" expression "`;`"
   15         | LET identifier "`=`" expression "`;`"

   16 infunction_declaration_any: %empty
   17                           | infunction_declaration_any "`;`"
   18                           | infunction_declaration_any opt-infunction-decl

   19 opt-infunction-decl: let-decl
   20                    | RETURN expression "`;`"
   21                    | compound-expression "`;`"

   22 identifier: IDENTIFIER

   23 qname: DBLCOLON identifier
   24      | identifier
   25      | qname DBLCOLON identifier

   26 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   27        | FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

   28 enum-decl: ENUM qname "`{`" case-list-opt "`}`"

   29 case-list-opt: %empty
   30              | case-list

   31 case-list: case-decl
   32          | case-list "," case-decl

   33 case-decl: identifier

   34 type-decl: TYPE qname type-extension-any "`{`" parameter-woa-list-opt "`}`"

   35 type-extension-any: %empty
   36                   | EXTENDS type-extension-list

   37 type-extension-list: qname
   38                    | type-extension-list "," qname

   39 parameter-list-opt: %empty
   40                   | parameter-list

   41 parameter-list: parameter-decl
   42               | parameter-list "," parameter-decl

   43 parameter-decl: identifier "`:`" type-expr
   44               | type-expr

   45 parameter-woa-list-opt: %empty
   46                       | parameter-woa-list

   47 parameter-woa-list: parameter-woa-decl
   48                   | parameter-woa-list "," parameter-woa-decl

   49 parameter-woa-decl: parameter-decl
   50                   | parameter-decl "`=`" expression

   51 type-expr: BOOL
   52          | INT
   53          | FLOAT
   54          | STRING_WORD
   55          | DECIMAL_WORD
   56          | qname
   57          | "`[`" type-expr "`]`"
   58          | "`(`" parameter-list-opt "`)`"
   59          | type-expr "`[`" INTEGER "`]`"
   60          | type-expr "`|`" type-expr
   61          | type-expr "`->`" type-expr

   62 compound-expression: expression "`(`" opt-named-expr-list-any "`)`"
   63                    | expression "`=`" expression

   64 expression: TRUE
   65           | FALSE
   66           | INTEGER
   67           | DECIMAL
   68           | STRING
   69           | "`.`" identifier
   70           | qname
   71           | ARGIDENTIFIER
   72           | "`(`" expression "`)`"
   73           | FN "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   74           | FN "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"
   75           | "`[`" expression-list-any "`]`"
   76           | "`!`" expression
   77           | expression "`.`" identifier
   78           | expression "`?`" "`.`" identifier
   79           | expression "`&&`" expression
   80           | expression "`||`" expression
   81           | expression "`..`" expression
   82           | compound-expression

   83 expression-list-any: %empty
   84                    | expression
   85                    | expression-list-any "," expression

   86 opt-named-expr-list-any: %empty
   87                        | opt-named-expr-list

   88 opt-named-expr-list: opt-named-expr
   89                    | opt-named-expr-list "," opt-named-expr

   90 opt-named-expr: identifier "`:`" expression
   91               | expression


Terminals, with rules where they appear

    "end of file" (0) 0 1
    error (256)
    COMMENT_BEGIN (258)
    COMMENT_END (259)
    STRING <sonia::lang::beng::annotated_string_view> (260) 68
    IDENTIFIER <sonia::lang::beng::annotated_string_view> (261) 22
    ARGIDENTIFIER <sonia::lang::beng::annotated_string_view> (262) 71
    INTEGER <sonia::lang::beng::annotated_decimal> (263) 59 66
    DECIMAL <sonia::lang::beng::annotated_decimal> (264) 67
    OPERATOR_TERM <sonia::string_view> (265)
    "`=`" <sonia::lang::lex::resource_location> (266) 14 15 50 63
    "`_`" (267)
    "`->*`" (268)
    "`->`" (269) 9 27 61 74
    "`~>`" (270)
    "`.*`" (271)
    "`++`" (272)
    "`--`" (273)
    "`<<`" (274)
    "`>>`" (275)
    "`<=`" (276)
    "`>=`" (277)
    "`==`" (278)
    "`!=`" (279)
    "`&&`" <sonia::lang::lex::resource_location> (280) 79
    "`||`" <sonia::lang::lex::resource_location> (281) 80
    "`..`" <sonia::lang::lex::resource_location> (282) 81
    "`+=`" (283)
    "`-=`" (284)
    "`*=`" (285)
    "`/=`" (286)
    "`%=`" (287)
    "`<<=`" (288)
    "`>>=`" (289)
    "`&=`" (290)
    "`|=`" (291)
    "`^=`" (292)
    "`:`" (293) 7 13 14 43 90
    "`(`" <sonia::lang::lex::resource_location> (294) 8 9 26 27 58 62 72 73 74
    "`)`" (295) 8 9 26 27 58 62 72 73 74
    "`{`" (296) 26 27 28 34 73 74
    "`}`" (297) 26 27 28 34 73 74
    "`[`" <sonia::lang::lex::resource_location> (298) 57 59 75
    "`]`" (299) 57 59 75
    "`<`" (300)
    "`>`" (301)
    "`;`" (302) 3 7 8 9 12 13 14 15 17 20 21
    "`.`" <sonia::lang::lex::resource_location> (303) 69 77 78
    "`+`" (304)
    "`-`" (305)
    "`*`" (306)
    "`/`" (307)
    "`%`" (308)
    "`&`" (309)
    "`|`" (310) 60
    "`!`" <sonia::lang::lex::resource_location> (311) 76
    "`~`" (312)
    "`^`" (313)
    "," (314) 32 38 42 48 85 89
    "`$`" (315)
    "`?`" (316) 78
    "`#`" (317)
    LET (318) 13 14 15
    VAR (319) 7
    NEW (320)
    FOR (321)
    VOID_ (322)
    AUTO (323)
    CONST_ (324)
    USING (325)
    THROW (326)
    DELETE_ (327)
    SIZEOF (328)
    RETURN (329) 20
    EXTERN (330) 7 8 9
    PRIVATE (331)
    TEMPLATE (332)
    NAMESPACE (333)
    LOWEST (334)
    DBLCOLON (335) 23 25
    "`::`" (336)
    FN <sonia::lang::lex::resource_location> (337) 8 9 26 27 73 74
    ENUM (338) 28
    TYPE (339) 34
    EXTENDS (340) 36
    BOOL (341) 51
    INT (342) 52
    FLOAT (343) 53
    STRING_WORD (344) 54
    DECIMAL_WORD (345) 55
    TRUE <sonia::lang::lex::resource_location> (346) 64
    FALSE <sonia::lang::lex::resource_location> (347) 65


Nonterminals, with rules where they appear

    $accept (93)
        on left: 0
    begin (94)
        on left: 1
        on right: 0
    declaration_any <declaration_set_t> (95)
        on left: 2 3 4 5 6
        on right: 1 3 4 5 6
    generic-decl <declaration_t> (96)
        on left: 7 8 9 10 11 12
        on right: 6
    let-decl <let_statement_decl_t> (97)
        on left: 13 14 15
        on right: 11 19
    infunction_declaration_any <std::vector<infunction_declaration_t>> (98)
        on left: 16 17 18
        on right: 17 18 26 27 73 74
    opt-infunction-decl <infunction_declaration_t> (99)
        on left: 19 20 21
        on right: 18
    identifier <sonia::lang::beng::annotated_identifier> (100)
        on left: 22
        on right: 7 13 14 15 23 24 25 33 43 69 77 78 90
    qname <sonia::lang::beng::annotated_qname> (101)
        on left: 23 24 25
        on right: 8 9 25 26 27 28 34 37 38 56 70
    fn-decl <fn_decl_t> (102)
        on left: 26 27
        on right: 10
    enum-decl <enum_decl> (103)
        on left: 28
        on right: 4
    case-list-opt <std::vector<sonia::lang::identifier>> (104)
        on left: 29 30
        on right: 28
    case-list <std::vector<sonia::lang::identifier>> (105)
        on left: 31 32
        on right: 30 32
    case-decl <sonia::lang::identifier> (106)
        on left: 33
        on right: 31 32
    type-decl <type_decl> (107)
        on left: 34
        on right: 5
    type-extension-any <extension_list_t> (108)
        on left: 35 36
        on right: 34
    type-extension-list <extension_list_t> (109)
        on left: 37 38
        on right: 36 38
    parameter-list-opt <parameter_list_t> (110)
        on left: 39 40
        on right: 58
    parameter-list <parameter_list_t> (111)
        on left: 41 42
        on right: 40 42
    parameter-decl <parameter_t> (112)
        on left: 43 44
        on right: 41 42 49 50
    parameter-woa-list-opt <parameter_woa_list_t> (113)
        on left: 45 46
        on right: 8 9 26 27 34 73 74
    parameter-woa-list <parameter_woa_list_t> (114)
        on left: 47 48
        on right: 46 48
    parameter-woa-decl <parameter_woa_t> (115)
        on left: 49 50
        on right: 47 48
    type-expr <beng_preliminary_type> (116)
        on left: 51 52 53 54 55 56 57 58 59 60 61
        on right: 7 9 13 14 27 43 44 57 59 60 61 74
    compound-expression <expression_t> (117)
        on left: 62 63
        on right: 12 21 82
    expression <expression_t> (118)
        on left: 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82
        on right: 14 15 20 50 62 63 72 76 77 78 79 80 81 84 85 90 91
    expression-list-any <expression_list_t> (119)
        on left: 83 84 85
        on right: 75 85
    opt-named-expr-list-any <named_expression_term_list_t> (120)
        on left: 86 87
        on right: 62
    opt-named-expr-list <named_expression_term_list_t> (121)
        on left: 88 89
        on right: 87 89
    opt-named-expr <named_expression_term_t> (122)
        on left: 90 91
        on right: 88 89


State 0

    0 $accept: . begin "end of file"

    $default  reduce using rule 2 (declaration_any)

    begin            go to state 1
    declaration_any  go to state 2


State 1

    0 $accept: begin . "end of file"

    "end of file"  shift, and go to state 3


State 2

    1 begin: declaration_any . "end of file"
    3 declaration_any: declaration_any . "`;`"
    4                | declaration_any . enum-decl
    5                | declaration_any . type-decl
    6                | declaration_any . generic-decl

    "end of file"  shift, and go to state 4
    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`;`"          shift, and go to state 12
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    LET            shift, and go to state 15
    EXTERN         shift, and go to state 16
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 18
    ENUM           shift, and go to state 19
    TYPE           shift, and go to state 20
    TRUE           shift, and go to state 21
    FALSE          shift, and go to state 22

    generic-decl         go to state 23
    let-decl             go to state 24
    identifier           go to state 25
    qname                go to state 26
    fn-decl              go to state 27
    enum-decl            go to state 28
    type-decl            go to state 29
    compound-expression  go to state 30
    expression           go to state 31


State 3

    0 $accept: begin "end of file" .

    $default  accept


State 4

    1 begin: declaration_any "end of file" .

    $default  reduce using rule 1 (begin)


State 5

   68 expression: STRING .

    $default  reduce using rule 68 (expression)


State 6

   22 identifier: IDENTIFIER .

    $default  reduce using rule 22 (identifier)


State 7

   71 expression: ARGIDENTIFIER .

    $default  reduce using rule 71 (expression)


State 8

   66 expression: INTEGER .

    $default  reduce using rule 66 (expression)


State 9

   67 expression: DECIMAL .

    $default  reduce using rule 67 (expression)


State 10

   72 expression: "`(`" . expression "`)`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 32
    TRUE           shift, and go to state 21
    FALSE          shift, and go to state 22

    identifier           go to state 25
    qname                go to state 26
    compound-expression  go to state 33
    expression           go to state 34


State 11

   75 expression: "`[`" . expression-list-any "`]`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 32
    TRUE           shift, and go to state 21
    FALSE          shift, and go to state 22

    $default  reduce using rule 83 (expression-list-any)

    identifier           go to state 25
    qname                go to state 26
    compound-expression  go to state 33
    expression           go to state 35
    expression-list-any  go to state 36


State 12

    3 declaration_any: declaration_any "`;`" .

    $default  reduce using rule 3 (declaration_any)


State 13

   69 expression: "`.`" . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 37


State 14

   76 expression: "`!`" . expression

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 32
    TRUE           shift, and go to state 21
    FALSE          shift, and go to state 22

    identifier           go to state 25
    qname                go to state 26
    compound-expression  go to state 33
    expression           go to state 38


State 15

   13 let-decl: LET . identifier "`:`" type-expr "`;`"
   14         | LET . identifier "`:`" type-expr "`=`" expression "`;`"
   15         | LET . identifier "`=`" expression "`;`"

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 39


State 16

    7 generic-decl: EXTERN . VAR identifier "`:`" type-expr "`;`"
    8             | EXTERN . FN qname "`(`" parameter-woa-list-opt "`)`" "`;`"
    9             | EXTERN . FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`;`"

    VAR  shift, and go to state 40
    FN   shift, and go to state 41


State 17

   23 qname: DBLCOLON . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 42


State 18

   26 fn-decl: FN . qname "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   27        | FN . qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"
   73 expression: FN . "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   74           | FN . "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    IDENTIFIER  shift, and go to state 6
    "`(`"       shift, and go to state 43
    DBLCOLON    shift, and go to state 17

    identifier  go to state 25
    qname       go to state 44


State 19

   28 enum-decl: ENUM . qname "`{`" case-list-opt "`}`"

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 17

    identifier  go to state 25
    qname       go to state 45


State 20

   34 type-decl: TYPE . qname type-extension-any "`{`" parameter-woa-list-opt "`}`"

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 17

    identifier  go to state 25
    qname       go to state 46


State 21

   64 expression: TRUE .

    $default  reduce using rule 64 (expression)


State 22

   65 expression: FALSE .

    $default  reduce using rule 65 (expression)


State 23

    6 declaration_any: declaration_any generic-decl .

    $default  reduce using rule 6 (declaration_any)


State 24

   11 generic-decl: let-decl .

    $default  reduce using rule 11 (generic-decl)


State 25

   24 qname: identifier .

    $default  reduce using rule 24 (qname)


State 26

   25 qname: qname . DBLCOLON identifier
   70 expression: qname .

    DBLCOLON  shift, and go to state 47

    $default  reduce using rule 70 (expression)


State 27

   10 generic-decl: fn-decl .

    $default  reduce using rule 10 (generic-decl)


State 28

    4 declaration_any: declaration_any enum-decl .

    $default  reduce using rule 4 (declaration_any)


State 29

    5 declaration_any: declaration_any type-decl .

    $default  reduce using rule 5 (declaration_any)


State 30

   12 generic-decl: compound-expression . "`;`"
   82 expression: compound-expression .

    "`;`"  shift, and go to state 48

    $default  reduce using rule 82 (expression)


State 31

   62 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   63                    | expression . "`=`" expression
   77 expression: expression . "`.`" identifier
   78           | expression . "`?`" "`.`" identifier
   79           | expression . "`&&`" expression
   80           | expression . "`||`" expression
   81           | expression . "`..`" expression

    "`=`"   shift, and go to state 49
    "`&&`"  shift, and go to state 50
    "`||`"  shift, and go to state 51
    "`..`"  shift, and go to state 52
    "`(`"   shift, and go to state 53
    "`.`"   shift, and go to state 54
    "`?`"   shift, and go to state 55


State 32

   73 expression: FN . "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   74           | FN . "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`(`"  shift, and go to state 43


State 33

   82 expression: compound-expression .

    $default  reduce using rule 82 (expression)


State 34

   62 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   63                    | expression . "`=`" expression
   72 expression: "`(`" expression . "`)`"
   77           | expression . "`.`" identifier
   78           | expression . "`?`" "`.`" identifier
   79           | expression . "`&&`" expression
   80           | expression . "`||`" expression
   81           | expression . "`..`" expression

    "`=`"   shift, and go to state 49
    "`&&`"  shift, and go to state 50
    "`||`"  shift, and go to state 51
    "`..`"  shift, and go to state 52
    "`(`"   shift, and go to state 53
    "`)`"   shift, and go to state 56
    "`.`"   shift, and go to state 54
    "`?`"   shift, and go to state 55


State 35

   62 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   63                    | expression . "`=`" expression
   77 expression: expression . "`.`" identifier
   78           | expression . "`?`" "`.`" identifier
   79           | expression . "`&&`" expression
   80           | expression . "`||`" expression
   81           | expression . "`..`" expression
   84 expression-list-any: expression .

    "`=`"   shift, and go to state 49
    "`&&`"  shift, and go to state 50
    "`||`"  shift, and go to state 51
    "`..`"  shift, and go to state 52
    "`(`"   shift, and go to state 53
    "`.`"   shift, and go to state 54
    "`?`"   shift, and go to state 55

    $default  reduce using rule 84 (expression-list-any)


State 36

   75 expression: "`[`" expression-list-any . "`]`"
   85 expression-list-any: expression-list-any . "," expression

    "`]`"  shift, and go to state 57
    ","    shift, and go to state 58


State 37

   69 expression: "`.`" identifier .

    $default  reduce using rule 69 (expression)


State 38

   62 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   63                    | expression . "`=`" expression
   76 expression: "`!`" expression .
   77           | expression . "`.`" identifier
   78           | expression . "`?`" "`.`" identifier
   79           | expression . "`&&`" expression
   80           | expression . "`||`" expression
   81           | expression . "`..`" expression

    "`(`"  shift, and go to state 53
    "`.`"  shift, and go to state 54

    $default  reduce using rule 76 (expression)


State 39

   13 let-decl: LET identifier . "`:`" type-expr "`;`"
   14         | LET identifier . "`:`" type-expr "`=`" expression "`;`"
   15         | LET identifier . "`=`" expression "`;`"

    "`=`"  shift, and go to state 59
    "`:`"  shift, and go to state 60


State 40

    7 generic-decl: EXTERN VAR . identifier "`:`" type-expr "`;`"

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 61


State 41

    8 generic-decl: EXTERN FN . qname "`(`" parameter-woa-list-opt "`)`" "`;`"
    9             | EXTERN FN . qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`;`"

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 17

    identifier  go to state 25
    qname       go to state 62


State 42

   23 qname: DBLCOLON identifier .

    $default  reduce using rule 23 (qname)


State 43

   73 expression: FN "`(`" . parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   74           | FN "`(`" . parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 63
    "`[`"         shift, and go to state 64
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 65
    INT           shift, and go to state 66
    FLOAT         shift, and go to state 67
    STRING_WORD   shift, and go to state 68
    DECIMAL_WORD  shift, and go to state 69

    $default  reduce using rule 45 (parameter-woa-list-opt)

    identifier              go to state 70
    qname                   go to state 71
    parameter-decl          go to state 72
    parameter-woa-list-opt  go to state 73
    parameter-woa-list      go to state 74
    parameter-woa-decl      go to state 75
    type-expr               go to state 76


State 44

   25 qname: qname . DBLCOLON identifier
   26 fn-decl: FN qname . "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   27        | FN qname . "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`(`"     shift, and go to state 77
    DBLCOLON  shift, and go to state 47


State 45

   25 qname: qname . DBLCOLON identifier
   28 enum-decl: ENUM qname . "`{`" case-list-opt "`}`"

    "`{`"     shift, and go to state 78
    DBLCOLON  shift, and go to state 47


State 46

   25 qname: qname . DBLCOLON identifier
   34 type-decl: TYPE qname . type-extension-any "`{`" parameter-woa-list-opt "`}`"

    DBLCOLON  shift, and go to state 47
    EXTENDS   shift, and go to state 79

    $default  reduce using rule 35 (type-extension-any)

    type-extension-any  go to state 80


State 47

   25 qname: qname DBLCOLON . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 81


State 48

   12 generic-decl: compound-expression "`;`" .

    $default  reduce using rule 12 (generic-decl)


State 49

   63 compound-expression: expression "`=`" . expression

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 32
    TRUE           shift, and go to state 21
    FALSE          shift, and go to state 22

    identifier           go to state 25
    qname                go to state 26
    compound-expression  go to state 33
    expression           go to state 82


State 50

   79 expression: expression "`&&`" . expression

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 32
    TRUE           shift, and go to state 21
    FALSE          shift, and go to state 22

    identifier           go to state 25
    qname                go to state 26
    compound-expression  go to state 33
    expression           go to state 83


State 51

   80 expression: expression "`||`" . expression

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 32
    TRUE           shift, and go to state 21
    FALSE          shift, and go to state 22

    identifier           go to state 25
    qname                go to state 26
    compound-expression  go to state 33
    expression           go to state 84


State 52

   81 expression: expression "`..`" . expression

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 32
    TRUE           shift, and go to state 21
    FALSE          shift, and go to state 22

    identifier           go to state 25
    qname                go to state 26
    compound-expression  go to state 33
    expression           go to state 85


State 53

   62 compound-expression: expression "`(`" . opt-named-expr-list-any "`)`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 32
    TRUE           shift, and go to state 21
    FALSE          shift, and go to state 22

    $default  reduce using rule 86 (opt-named-expr-list-any)

    identifier               go to state 86
    qname                    go to state 26
    compound-expression      go to state 33
    expression               go to state 87
    opt-named-expr-list-any  go to state 88
    opt-named-expr-list      go to state 89
    opt-named-expr           go to state 90


State 54

   77 expression: expression "`.`" . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 91


State 55

   78 expression: expression "`?`" . "`.`" identifier

    "`.`"  shift, and go to state 92


State 56

   72 expression: "`(`" expression "`)`" .

    $default  reduce using rule 72 (expression)


State 57

   75 expression: "`[`" expression-list-any "`]`" .

    $default  reduce using rule 75 (expression)


State 58

   85 expression-list-any: expression-list-any "," . expression

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 32
    TRUE           shift, and go to state 21
    FALSE          shift, and go to state 22

    identifier           go to state 25
    qname                go to state 26
    compound-expression  go to state 33
    expression           go to state 93


State 59

   15 let-decl: LET identifier "`=`" . expression "`;`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 32
    TRUE           shift, and go to state 21
    FALSE          shift, and go to state 22

    identifier           go to state 25
    qname                go to state 26
    compound-expression  go to state 33
    expression           go to state 94


State 60

   13 let-decl: LET identifier "`:`" . type-expr "`;`"
   14         | LET identifier "`:`" . type-expr "`=`" expression "`;`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 63
    "`[`"         shift, and go to state 64
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 65
    INT           shift, and go to state 66
    FLOAT         shift, and go to state 67
    STRING_WORD   shift, and go to state 68
    DECIMAL_WORD  shift, and go to state 69

    identifier  go to state 25
    qname       go to state 71
    type-expr   go to state 95


State 61

    7 generic-decl: EXTERN VAR identifier . "`:`" type-expr "`;`"

    "`:`"  shift, and go to state 96


State 62

    8 generic-decl: EXTERN FN qname . "`(`" parameter-woa-list-opt "`)`" "`;`"
    9             | EXTERN FN qname . "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`;`"
   25 qname: qname . DBLCOLON identifier

    "`(`"     shift, and go to state 97
    DBLCOLON  shift, and go to state 47


State 63

   58 type-expr: "`(`" . parameter-list-opt "`)`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 63
    "`[`"         shift, and go to state 64
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 65
    INT           shift, and go to state 66
    FLOAT         shift, and go to state 67
    STRING_WORD   shift, and go to state 68
    DECIMAL_WORD  shift, and go to state 69

    $default  reduce using rule 39 (parameter-list-opt)

    identifier          go to state 70
    qname               go to state 71
    parameter-list-opt  go to state 98
    parameter-list      go to state 99
    parameter-decl      go to state 100
    type-expr           go to state 76


State 64

   57 type-expr: "`[`" . type-expr "`]`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 63
    "`[`"         shift, and go to state 64
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 65
    INT           shift, and go to state 66
    FLOAT         shift, and go to state 67
    STRING_WORD   shift, and go to state 68
    DECIMAL_WORD  shift, and go to state 69

    identifier  go to state 25
    qname       go to state 71
    type-expr   go to state 101


State 65

   51 type-expr: BOOL .

    $default  reduce using rule 51 (type-expr)


State 66

   52 type-expr: INT .

    $default  reduce using rule 52 (type-expr)


State 67

   53 type-expr: FLOAT .

    $default  reduce using rule 53 (type-expr)


State 68

   54 type-expr: STRING_WORD .

    $default  reduce using rule 54 (type-expr)


State 69

   55 type-expr: DECIMAL_WORD .

    $default  reduce using rule 55 (type-expr)


State 70

   24 qname: identifier .
   43 parameter-decl: identifier . "`:`" type-expr

    "`:`"  shift, and go to state 102

    $default  reduce using rule 24 (qname)


State 71

   25 qname: qname . DBLCOLON identifier
   56 type-expr: qname .

    DBLCOLON  shift, and go to state 47

    $default  reduce using rule 56 (type-expr)


State 72

   49 parameter-woa-decl: parameter-decl .
   50                   | parameter-decl . "`=`" expression

    "`=`"  shift, and go to state 103

    $default  reduce using rule 49 (parameter-woa-decl)


State 73

   73 expression: FN "`(`" parameter-woa-list-opt . "`)`" "`{`" infunction_declaration_any "`}`"
   74           | FN "`(`" parameter-woa-list-opt . "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`)`"  shift, and go to state 104


State 74

   46 parameter-woa-list-opt: parameter-woa-list .
   48 parameter-woa-list: parameter-woa-list . "," parameter-woa-decl

    ","  shift, and go to state 105

    $default  reduce using rule 46 (parameter-woa-list-opt)


State 75

   47 parameter-woa-list: parameter-woa-decl .

    $default  reduce using rule 47 (parameter-woa-list)


State 76

   44 parameter-decl: type-expr .
   59 type-expr: type-expr . "`[`" INTEGER "`]`"
   60          | type-expr . "`|`" type-expr
   61          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 106
    "`[`"   shift, and go to state 107
    "`|`"   shift, and go to state 108

    $default  reduce using rule 44 (parameter-decl)


State 77

   26 fn-decl: FN qname "`(`" . parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   27        | FN qname "`(`" . parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 63
    "`[`"         shift, and go to state 64
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 65
    INT           shift, and go to state 66
    FLOAT         shift, and go to state 67
    STRING_WORD   shift, and go to state 68
    DECIMAL_WORD  shift, and go to state 69

    $default  reduce using rule 45 (parameter-woa-list-opt)

    identifier              go to state 70
    qname                   go to state 71
    parameter-decl          go to state 72
    parameter-woa-list-opt  go to state 109
    parameter-woa-list      go to state 74
    parameter-woa-decl      go to state 75
    type-expr               go to state 76


State 78

   28 enum-decl: ENUM qname "`{`" . case-list-opt "`}`"

    IDENTIFIER  shift, and go to state 6

    $default  reduce using rule 29 (case-list-opt)

    identifier     go to state 110
    case-list-opt  go to state 111
    case-list      go to state 112
    case-decl      go to state 113


State 79

   36 type-extension-any: EXTENDS . type-extension-list

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 17

    identifier           go to state 25
    qname                go to state 114
    type-extension-list  go to state 115


State 80

   34 type-decl: TYPE qname type-extension-any . "`{`" parameter-woa-list-opt "`}`"

    "`{`"  shift, and go to state 116


State 81

   25 qname: qname DBLCOLON identifier .

    $default  reduce using rule 25 (qname)


State 82

   62 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   63                    | expression . "`=`" expression
   63                    | expression "`=`" expression .
   77 expression: expression . "`.`" identifier
   78           | expression . "`?`" "`.`" identifier
   79           | expression . "`&&`" expression
   80           | expression . "`||`" expression
   81           | expression . "`..`" expression

    "`=`"   shift, and go to state 49
    "`&&`"  shift, and go to state 50
    "`||`"  shift, and go to state 51
    "`..`"  shift, and go to state 52
    "`(`"   shift, and go to state 53
    "`.`"   shift, and go to state 54
    "`?`"   shift, and go to state 55

    $default  reduce using rule 63 (compound-expression)


State 83

   62 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   63                    | expression . "`=`" expression
   77 expression: expression . "`.`" identifier
   78           | expression . "`?`" "`.`" identifier
   79           | expression . "`&&`" expression
   79           | expression "`&&`" expression .
   80           | expression . "`||`" expression
   81           | expression . "`..`" expression

    "`..`"  shift, and go to state 52
    "`(`"   shift, and go to state 53
    "`.`"   shift, and go to state 54

    $default  reduce using rule 79 (expression)


State 84

   62 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   63                    | expression . "`=`" expression
   77 expression: expression . "`.`" identifier
   78           | expression . "`?`" "`.`" identifier
   79           | expression . "`&&`" expression
   80           | expression . "`||`" expression
   80           | expression "`||`" expression .
   81           | expression . "`..`" expression

    "`&&`"  shift, and go to state 50
    "`..`"  shift, and go to state 52
    "`(`"   shift, and go to state 53
    "`.`"   shift, and go to state 54

    $default  reduce using rule 80 (expression)


State 85

   62 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   63                    | expression . "`=`" expression
   77 expression: expression . "`.`" identifier
   78           | expression . "`?`" "`.`" identifier
   79           | expression . "`&&`" expression
   80           | expression . "`||`" expression
   81           | expression . "`..`" expression
   81           | expression "`..`" expression .

    "`(`"  shift, and go to state 53
    "`.`"  shift, and go to state 54

    $default  reduce using rule 81 (expression)


State 86

   24 qname: identifier .
   90 opt-named-expr: identifier . "`:`" expression

    "`:`"  shift, and go to state 117

    $default  reduce using rule 24 (qname)


State 87

   62 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   63                    | expression . "`=`" expression
   77 expression: expression . "`.`" identifier
   78           | expression . "`?`" "`.`" identifier
   79           | expression . "`&&`" expression
   80           | expression . "`||`" expression
   81           | expression . "`..`" expression
   91 opt-named-expr: expression .

    "`=`"   shift, and go to state 49
    "`&&`"  shift, and go to state 50
    "`||`"  shift, and go to state 51
    "`..`"  shift, and go to state 52
    "`(`"   shift, and go to state 53
    "`.`"   shift, and go to state 54
    "`?`"   shift, and go to state 55

    $default  reduce using rule 91 (opt-named-expr)


State 88

   62 compound-expression: expression "`(`" opt-named-expr-list-any . "`)`"

    "`)`"  shift, and go to state 118


State 89

   87 opt-named-expr-list-any: opt-named-expr-list .
   89 opt-named-expr-list: opt-named-expr-list . "," opt-named-expr

    ","  shift, and go to state 119

    $default  reduce using rule 87 (opt-named-expr-list-any)


State 90

   88 opt-named-expr-list: opt-named-expr .

    $default  reduce using rule 88 (opt-named-expr-list)


State 91

   77 expression: expression "`.`" identifier .

    $default  reduce using rule 77 (expression)


State 92

   78 expression: expression "`?`" "`.`" . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 120


State 93

   62 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   63                    | expression . "`=`" expression
   77 expression: expression . "`.`" identifier
   78           | expression . "`?`" "`.`" identifier
   79           | expression . "`&&`" expression
   80           | expression . "`||`" expression
   81           | expression . "`..`" expression
   85 expression-list-any: expression-list-any "," expression .

    "`=`"   shift, and go to state 49
    "`&&`"  shift, and go to state 50
    "`||`"  shift, and go to state 51
    "`..`"  shift, and go to state 52
    "`(`"   shift, and go to state 53
    "`.`"   shift, and go to state 54
    "`?`"   shift, and go to state 55

    $default  reduce using rule 85 (expression-list-any)


State 94

   15 let-decl: LET identifier "`=`" expression . "`;`"
   62 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   63                    | expression . "`=`" expression
   77 expression: expression . "`.`" identifier
   78           | expression . "`?`" "`.`" identifier
   79           | expression . "`&&`" expression
   80           | expression . "`||`" expression
   81           | expression . "`..`" expression

    "`=`"   shift, and go to state 49
    "`&&`"  shift, and go to state 50
    "`||`"  shift, and go to state 51
    "`..`"  shift, and go to state 52
    "`(`"   shift, and go to state 53
    "`;`"   shift, and go to state 121
    "`.`"   shift, and go to state 54
    "`?`"   shift, and go to state 55


State 95

   13 let-decl: LET identifier "`:`" type-expr . "`;`"
   14         | LET identifier "`:`" type-expr . "`=`" expression "`;`"
   59 type-expr: type-expr . "`[`" INTEGER "`]`"
   60          | type-expr . "`|`" type-expr
   61          | type-expr . "`->`" type-expr

    "`=`"   shift, and go to state 122
    "`->`"  shift, and go to state 106
    "`[`"   shift, and go to state 107
    "`;`"   shift, and go to state 123
    "`|`"   shift, and go to state 108


State 96

    7 generic-decl: EXTERN VAR identifier "`:`" . type-expr "`;`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 63
    "`[`"         shift, and go to state 64
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 65
    INT           shift, and go to state 66
    FLOAT         shift, and go to state 67
    STRING_WORD   shift, and go to state 68
    DECIMAL_WORD  shift, and go to state 69

    identifier  go to state 25
    qname       go to state 71
    type-expr   go to state 124


State 97

    8 generic-decl: EXTERN FN qname "`(`" . parameter-woa-list-opt "`)`" "`;`"
    9             | EXTERN FN qname "`(`" . parameter-woa-list-opt "`)`" "`->`" type-expr "`;`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 63
    "`[`"         shift, and go to state 64
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 65
    INT           shift, and go to state 66
    FLOAT         shift, and go to state 67
    STRING_WORD   shift, and go to state 68
    DECIMAL_WORD  shift, and go to state 69

    $default  reduce using rule 45 (parameter-woa-list-opt)

    identifier              go to state 70
    qname                   go to state 71
    parameter-decl          go to state 72
    parameter-woa-list-opt  go to state 125
    parameter-woa-list      go to state 74
    parameter-woa-decl      go to state 75
    type-expr               go to state 76


State 98

   58 type-expr: "`(`" parameter-list-opt . "`)`"

    "`)`"  shift, and go to state 126


State 99

   40 parameter-list-opt: parameter-list .
   42 parameter-list: parameter-list . "," parameter-decl

    ","  shift, and go to state 127

    $default  reduce using rule 40 (parameter-list-opt)


State 100

   41 parameter-list: parameter-decl .

    $default  reduce using rule 41 (parameter-list)


State 101

   57 type-expr: "`[`" type-expr . "`]`"
   59          | type-expr . "`[`" INTEGER "`]`"
   60          | type-expr . "`|`" type-expr
   61          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 106
    "`[`"   shift, and go to state 107
    "`]`"   shift, and go to state 128
    "`|`"   shift, and go to state 108


State 102

   43 parameter-decl: identifier "`:`" . type-expr

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 63
    "`[`"         shift, and go to state 64
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 65
    INT           shift, and go to state 66
    FLOAT         shift, and go to state 67
    STRING_WORD   shift, and go to state 68
    DECIMAL_WORD  shift, and go to state 69

    identifier  go to state 25
    qname       go to state 71
    type-expr   go to state 129


State 103

   50 parameter-woa-decl: parameter-decl "`=`" . expression

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 32
    TRUE           shift, and go to state 21
    FALSE          shift, and go to state 22

    identifier           go to state 25
    qname                go to state 26
    compound-expression  go to state 33
    expression           go to state 130


State 104

   73 expression: FN "`(`" parameter-woa-list-opt "`)`" . "`{`" infunction_declaration_any "`}`"
   74           | FN "`(`" parameter-woa-list-opt "`)`" . "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`->`"  shift, and go to state 131
    "`{`"   shift, and go to state 132


State 105

   48 parameter-woa-list: parameter-woa-list "," . parameter-woa-decl

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 63
    "`[`"         shift, and go to state 64
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 65
    INT           shift, and go to state 66
    FLOAT         shift, and go to state 67
    STRING_WORD   shift, and go to state 68
    DECIMAL_WORD  shift, and go to state 69

    identifier          go to state 70
    qname               go to state 71
    parameter-decl      go to state 72
    parameter-woa-decl  go to state 133
    type-expr           go to state 76


State 106

   61 type-expr: type-expr "`->`" . type-expr

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 63
    "`[`"         shift, and go to state 64
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 65
    INT           shift, and go to state 66
    FLOAT         shift, and go to state 67
    STRING_WORD   shift, and go to state 68
    DECIMAL_WORD  shift, and go to state 69

    identifier  go to state 25
    qname       go to state 71
    type-expr   go to state 134


State 107

   59 type-expr: type-expr "`[`" . INTEGER "`]`"

    INTEGER  shift, and go to state 135


State 108

   60 type-expr: type-expr "`|`" . type-expr

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 63
    "`[`"         shift, and go to state 64
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 65
    INT           shift, and go to state 66
    FLOAT         shift, and go to state 67
    STRING_WORD   shift, and go to state 68
    DECIMAL_WORD  shift, and go to state 69

    identifier  go to state 25
    qname       go to state 71
    type-expr   go to state 136


State 109

   26 fn-decl: FN qname "`(`" parameter-woa-list-opt . "`)`" "`{`" infunction_declaration_any "`}`"
   27        | FN qname "`(`" parameter-woa-list-opt . "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`)`"  shift, and go to state 137


State 110

   33 case-decl: identifier .

    $default  reduce using rule 33 (case-decl)


State 111

   28 enum-decl: ENUM qname "`{`" case-list-opt . "`}`"

    "`}`"  shift, and go to state 138


State 112

   30 case-list-opt: case-list .
   32 case-list: case-list . "," case-decl

    ","  shift, and go to state 139

    $default  reduce using rule 30 (case-list-opt)


State 113

   31 case-list: case-decl .

    $default  reduce using rule 31 (case-list)


State 114

   25 qname: qname . DBLCOLON identifier
   37 type-extension-list: qname .

    DBLCOLON  shift, and go to state 47

    $default  reduce using rule 37 (type-extension-list)


State 115

   36 type-extension-any: EXTENDS type-extension-list .
   38 type-extension-list: type-extension-list . "," qname

    ","  shift, and go to state 140

    $default  reduce using rule 36 (type-extension-any)


State 116

   34 type-decl: TYPE qname type-extension-any "`{`" . parameter-woa-list-opt "`}`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 63
    "`[`"         shift, and go to state 64
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 65
    INT           shift, and go to state 66
    FLOAT         shift, and go to state 67
    STRING_WORD   shift, and go to state 68
    DECIMAL_WORD  shift, and go to state 69

    $default  reduce using rule 45 (parameter-woa-list-opt)

    identifier              go to state 70
    qname                   go to state 71
    parameter-decl          go to state 72
    parameter-woa-list-opt  go to state 141
    parameter-woa-list      go to state 74
    parameter-woa-decl      go to state 75
    type-expr               go to state 76


State 117

   90 opt-named-expr: identifier "`:`" . expression

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 32
    TRUE           shift, and go to state 21
    FALSE          shift, and go to state 22

    identifier           go to state 25
    qname                go to state 26
    compound-expression  go to state 33
    expression           go to state 142


State 118

   62 compound-expression: expression "`(`" opt-named-expr-list-any "`)`" .

    $default  reduce using rule 62 (compound-expression)


State 119

   89 opt-named-expr-list: opt-named-expr-list "," . opt-named-expr

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 32
    TRUE           shift, and go to state 21
    FALSE          shift, and go to state 22

    identifier           go to state 86
    qname                go to state 26
    compound-expression  go to state 33
    expression           go to state 87
    opt-named-expr       go to state 143


State 120

   78 expression: expression "`?`" "`.`" identifier .

    $default  reduce using rule 78 (expression)


State 121

   15 let-decl: LET identifier "`=`" expression "`;`" .

    $default  reduce using rule 15 (let-decl)


State 122

   14 let-decl: LET identifier "`:`" type-expr "`=`" . expression "`;`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 32
    TRUE           shift, and go to state 21
    FALSE          shift, and go to state 22

    identifier           go to state 25
    qname                go to state 26
    compound-expression  go to state 33
    expression           go to state 144


State 123

   13 let-decl: LET identifier "`:`" type-expr "`;`" .

    $default  reduce using rule 13 (let-decl)


State 124

    7 generic-decl: EXTERN VAR identifier "`:`" type-expr . "`;`"
   59 type-expr: type-expr . "`[`" INTEGER "`]`"
   60          | type-expr . "`|`" type-expr
   61          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 106
    "`[`"   shift, and go to state 107
    "`;`"   shift, and go to state 145
    "`|`"   shift, and go to state 108


State 125

    8 generic-decl: EXTERN FN qname "`(`" parameter-woa-list-opt . "`)`" "`;`"
    9             | EXTERN FN qname "`(`" parameter-woa-list-opt . "`)`" "`->`" type-expr "`;`"

    "`)`"  shift, and go to state 146


State 126

   58 type-expr: "`(`" parameter-list-opt "`)`" .

    $default  reduce using rule 58 (type-expr)


State 127

   42 parameter-list: parameter-list "," . parameter-decl

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 63
    "`[`"         shift, and go to state 64
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 65
    INT           shift, and go to state 66
    FLOAT         shift, and go to state 67
    STRING_WORD   shift, and go to state 68
    DECIMAL_WORD  shift, and go to state 69

    identifier      go to state 70
    qname           go to state 71
    parameter-decl  go to state 147
    type-expr       go to state 76


State 128

   57 type-expr: "`[`" type-expr "`]`" .

    $default  reduce using rule 57 (type-expr)


State 129

   43 parameter-decl: identifier "`:`" type-expr .
   59 type-expr: type-expr . "`[`" INTEGER "`]`"
   60          | type-expr . "`|`" type-expr
   61          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 106
    "`[`"   shift, and go to state 107
    "`|`"   shift, and go to state 108

    $default  reduce using rule 43 (parameter-decl)


State 130

   50 parameter-woa-decl: parameter-decl "`=`" expression .
   62 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   63                    | expression . "`=`" expression
   77 expression: expression . "`.`" identifier
   78           | expression . "`?`" "`.`" identifier
   79           | expression . "`&&`" expression
   80           | expression . "`||`" expression
   81           | expression . "`..`" expression

    "`=`"   shift, and go to state 49
    "`&&`"  shift, and go to state 50
    "`||`"  shift, and go to state 51
    "`..`"  shift, and go to state 52
    "`(`"   shift, and go to state 53
    "`.`"   shift, and go to state 54
    "`?`"   shift, and go to state 55

    $default  reduce using rule 50 (parameter-woa-decl)


State 131

   74 expression: FN "`(`" parameter-woa-list-opt "`)`" "`->`" . type-expr "`{`" infunction_declaration_any "`}`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 63
    "`[`"         shift, and go to state 64
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 65
    INT           shift, and go to state 66
    FLOAT         shift, and go to state 67
    STRING_WORD   shift, and go to state 68
    DECIMAL_WORD  shift, and go to state 69

    identifier  go to state 25
    qname       go to state 71
    type-expr   go to state 148


State 132

   73 expression: FN "`(`" parameter-woa-list-opt "`)`" "`{`" . infunction_declaration_any "`}`"

    $default  reduce using rule 16 (infunction_declaration_any)

    infunction_declaration_any  go to state 149


State 133

   48 parameter-woa-list: parameter-woa-list "," parameter-woa-decl .

    $default  reduce using rule 48 (parameter-woa-list)


State 134

   59 type-expr: type-expr . "`[`" INTEGER "`]`"
   60          | type-expr . "`|`" type-expr
   61          | type-expr . "`->`" type-expr
   61          | type-expr "`->`" type-expr .

    $default  reduce using rule 61 (type-expr)


State 135

   59 type-expr: type-expr "`[`" INTEGER . "`]`"

    "`]`"  shift, and go to state 150


State 136

   59 type-expr: type-expr . "`[`" INTEGER "`]`"
   60          | type-expr . "`|`" type-expr
   60          | type-expr "`|`" type-expr .
   61          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 106
    "`[`"   shift, and go to state 107

    $default  reduce using rule 60 (type-expr)


State 137

   26 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" . "`{`" infunction_declaration_any "`}`"
   27        | FN qname "`(`" parameter-woa-list-opt "`)`" . "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`->`"  shift, and go to state 151
    "`{`"   shift, and go to state 152


State 138

   28 enum-decl: ENUM qname "`{`" case-list-opt "`}`" .

    $default  reduce using rule 28 (enum-decl)


State 139

   32 case-list: case-list "," . case-decl

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 110
    case-decl   go to state 153


State 140

   38 type-extension-list: type-extension-list "," . qname

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 17

    identifier  go to state 25
    qname       go to state 154


State 141

   34 type-decl: TYPE qname type-extension-any "`{`" parameter-woa-list-opt . "`}`"

    "`}`"  shift, and go to state 155


State 142

   62 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   63                    | expression . "`=`" expression
   77 expression: expression . "`.`" identifier
   78           | expression . "`?`" "`.`" identifier
   79           | expression . "`&&`" expression
   80           | expression . "`||`" expression
   81           | expression . "`..`" expression
   90 opt-named-expr: identifier "`:`" expression .

    "`=`"   shift, and go to state 49
    "`&&`"  shift, and go to state 50
    "`||`"  shift, and go to state 51
    "`..`"  shift, and go to state 52
    "`(`"   shift, and go to state 53
    "`.`"   shift, and go to state 54
    "`?`"   shift, and go to state 55

    $default  reduce using rule 90 (opt-named-expr)


State 143

   89 opt-named-expr-list: opt-named-expr-list "," opt-named-expr .

    $default  reduce using rule 89 (opt-named-expr-list)


State 144

   14 let-decl: LET identifier "`:`" type-expr "`=`" expression . "`;`"
   62 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   63                    | expression . "`=`" expression
   77 expression: expression . "`.`" identifier
   78           | expression . "`?`" "`.`" identifier
   79           | expression . "`&&`" expression
   80           | expression . "`||`" expression
   81           | expression . "`..`" expression

    "`=`"   shift, and go to state 49
    "`&&`"  shift, and go to state 50
    "`||`"  shift, and go to state 51
    "`..`"  shift, and go to state 52
    "`(`"   shift, and go to state 53
    "`;`"   shift, and go to state 156
    "`.`"   shift, and go to state 54
    "`?`"   shift, and go to state 55


State 145

    7 generic-decl: EXTERN VAR identifier "`:`" type-expr "`;`" .

    $default  reduce using rule 7 (generic-decl)


State 146

    8 generic-decl: EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" . "`;`"
    9             | EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" . "`->`" type-expr "`;`"

    "`->`"  shift, and go to state 157
    "`;`"   shift, and go to state 158


State 147

   42 parameter-list: parameter-list "," parameter-decl .

    $default  reduce using rule 42 (parameter-list)


State 148

   59 type-expr: type-expr . "`[`" INTEGER "`]`"
   60          | type-expr . "`|`" type-expr
   61          | type-expr . "`->`" type-expr
   74 expression: FN "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr . "`{`" infunction_declaration_any "`}`"

    "`->`"  shift, and go to state 106
    "`{`"   shift, and go to state 159
    "`[`"   shift, and go to state 107
    "`|`"   shift, and go to state 108


State 149

   17 infunction_declaration_any: infunction_declaration_any . "`;`"
   18                           | infunction_declaration_any . opt-infunction-decl
   73 expression: FN "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any . "`}`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`}`"          shift, and go to state 160
    "`[`"          shift, and go to state 11
    "`;`"          shift, and go to state 161
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    LET            shift, and go to state 15
    RETURN         shift, and go to state 162
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 32
    TRUE           shift, and go to state 21
    FALSE          shift, and go to state 22

    let-decl             go to state 163
    opt-infunction-decl  go to state 164
    identifier           go to state 25
    qname                go to state 26
    compound-expression  go to state 165
    expression           go to state 31


State 150

   59 type-expr: type-expr "`[`" INTEGER "`]`" .

    $default  reduce using rule 59 (type-expr)


State 151

   27 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" . type-expr "`{`" infunction_declaration_any "`}`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 63
    "`[`"         shift, and go to state 64
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 65
    INT           shift, and go to state 66
    FLOAT         shift, and go to state 67
    STRING_WORD   shift, and go to state 68
    DECIMAL_WORD  shift, and go to state 69

    identifier  go to state 25
    qname       go to state 71
    type-expr   go to state 166


State 152

   26 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`{`" . infunction_declaration_any "`}`"

    $default  reduce using rule 16 (infunction_declaration_any)

    infunction_declaration_any  go to state 167


State 153

   32 case-list: case-list "," case-decl .

    $default  reduce using rule 32 (case-list)


State 154

   25 qname: qname . DBLCOLON identifier
   38 type-extension-list: type-extension-list "," qname .

    DBLCOLON  shift, and go to state 47

    $default  reduce using rule 38 (type-extension-list)


State 155

   34 type-decl: TYPE qname type-extension-any "`{`" parameter-woa-list-opt "`}`" .

    $default  reduce using rule 34 (type-decl)


State 156

   14 let-decl: LET identifier "`:`" type-expr "`=`" expression "`;`" .

    $default  reduce using rule 14 (let-decl)


State 157

    9 generic-decl: EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" . type-expr "`;`"

    IDENTIFIER    shift, and go to state 6
    "`(`"         shift, and go to state 63
    "`[`"         shift, and go to state 64
    DBLCOLON      shift, and go to state 17
    BOOL          shift, and go to state 65
    INT           shift, and go to state 66
    FLOAT         shift, and go to state 67
    STRING_WORD   shift, and go to state 68
    DECIMAL_WORD  shift, and go to state 69

    identifier  go to state 25
    qname       go to state 71
    type-expr   go to state 168


State 158

    8 generic-decl: EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" "`;`" .

    $default  reduce using rule 8 (generic-decl)


State 159

   74 expression: FN "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" . infunction_declaration_any "`}`"

    $default  reduce using rule 16 (infunction_declaration_any)

    infunction_declaration_any  go to state 169


State 160

   73 expression: FN "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`" .

    $default  reduce using rule 73 (expression)


State 161

   17 infunction_declaration_any: infunction_declaration_any "`;`" .

    $default  reduce using rule 17 (infunction_declaration_any)


State 162

   20 opt-infunction-decl: RETURN . expression "`;`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`[`"          shift, and go to state 11
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 32
    TRUE           shift, and go to state 21
    FALSE          shift, and go to state 22

    identifier           go to state 25
    qname                go to state 26
    compound-expression  go to state 33
    expression           go to state 170


State 163

   19 opt-infunction-decl: let-decl .

    $default  reduce using rule 19 (opt-infunction-decl)


State 164

   18 infunction_declaration_any: infunction_declaration_any opt-infunction-decl .

    $default  reduce using rule 18 (infunction_declaration_any)


State 165

   21 opt-infunction-decl: compound-expression . "`;`"
   82 expression: compound-expression .

    "`;`"  shift, and go to state 171

    $default  reduce using rule 82 (expression)


State 166

   27 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr . "`{`" infunction_declaration_any "`}`"
   59 type-expr: type-expr . "`[`" INTEGER "`]`"
   60          | type-expr . "`|`" type-expr
   61          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 106
    "`{`"   shift, and go to state 172
    "`[`"   shift, and go to state 107
    "`|`"   shift, and go to state 108


State 167

   17 infunction_declaration_any: infunction_declaration_any . "`;`"
   18                           | infunction_declaration_any . opt-infunction-decl
   26 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any . "`}`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`}`"          shift, and go to state 173
    "`[`"          shift, and go to state 11
    "`;`"          shift, and go to state 161
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    LET            shift, and go to state 15
    RETURN         shift, and go to state 162
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 32
    TRUE           shift, and go to state 21
    FALSE          shift, and go to state 22

    let-decl             go to state 163
    opt-infunction-decl  go to state 164
    identifier           go to state 25
    qname                go to state 26
    compound-expression  go to state 165
    expression           go to state 31


State 168

    9 generic-decl: EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr . "`;`"
   59 type-expr: type-expr . "`[`" INTEGER "`]`"
   60          | type-expr . "`|`" type-expr
   61          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 106
    "`[`"   shift, and go to state 107
    "`;`"   shift, and go to state 174
    "`|`"   shift, and go to state 108


State 169

   17 infunction_declaration_any: infunction_declaration_any . "`;`"
   18                           | infunction_declaration_any . opt-infunction-decl
   74 expression: FN "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any . "`}`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`}`"          shift, and go to state 175
    "`[`"          shift, and go to state 11
    "`;`"          shift, and go to state 161
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    LET            shift, and go to state 15
    RETURN         shift, and go to state 162
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 32
    TRUE           shift, and go to state 21
    FALSE          shift, and go to state 22

    let-decl             go to state 163
    opt-infunction-decl  go to state 164
    identifier           go to state 25
    qname                go to state 26
    compound-expression  go to state 165
    expression           go to state 31


State 170

   20 opt-infunction-decl: RETURN expression . "`;`"
   62 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   63                    | expression . "`=`" expression
   77 expression: expression . "`.`" identifier
   78           | expression . "`?`" "`.`" identifier
   79           | expression . "`&&`" expression
   80           | expression . "`||`" expression
   81           | expression . "`..`" expression

    "`=`"   shift, and go to state 49
    "`&&`"  shift, and go to state 50
    "`||`"  shift, and go to state 51
    "`..`"  shift, and go to state 52
    "`(`"   shift, and go to state 53
    "`;`"   shift, and go to state 176
    "`.`"   shift, and go to state 54
    "`?`"   shift, and go to state 55


State 171

   21 opt-infunction-decl: compound-expression "`;`" .

    $default  reduce using rule 21 (opt-infunction-decl)


State 172

   27 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" . infunction_declaration_any "`}`"

    $default  reduce using rule 16 (infunction_declaration_any)

    infunction_declaration_any  go to state 177


State 173

   26 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`" .

    $default  reduce using rule 26 (fn-decl)


State 174

    9 generic-decl: EXTERN FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`;`" .

    $default  reduce using rule 9 (generic-decl)


State 175

   74 expression: FN "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`" .

    $default  reduce using rule 74 (expression)


State 176

   20 opt-infunction-decl: RETURN expression "`;`" .

    $default  reduce using rule 20 (opt-infunction-decl)


State 177

   17 infunction_declaration_any: infunction_declaration_any . "`;`"
   18                           | infunction_declaration_any . opt-infunction-decl
   27 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any . "`}`"

    STRING         shift, and go to state 5
    IDENTIFIER     shift, and go to state 6
    ARGIDENTIFIER  shift, and go to state 7
    INTEGER        shift, and go to state 8
    DECIMAL        shift, and go to state 9
    "`(`"          shift, and go to state 10
    "`}`"          shift, and go to state 178
    "`[`"          shift, and go to state 11
    "`;`"          shift, and go to state 161
    "`.`"          shift, and go to state 13
    "`!`"          shift, and go to state 14
    LET            shift, and go to state 15
    RETURN         shift, and go to state 162
    DBLCOLON       shift, and go to state 17
    FN             shift, and go to state 32
    TRUE           shift, and go to state 21
    FALSE          shift, and go to state 22

    let-decl             go to state 163
    opt-infunction-decl  go to state 164
    identifier           go to state 25
    qname                go to state 26
    compound-expression  go to state 165
    expression           go to state 31


State 178

   27 fn-decl: FN qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`" .

    $default  reduce using rule 27 (fn-decl)
