Terminals unused in grammar

    COMMENT_BEGIN
    COMMENT_END
    OPERATOR_TERM
    "`_`"
    "`->*`"
    "`~>`"
    "`.*`"
    "`++`"
    "`--`"
    "`<<`"
    "`>>`"
    "`<=`"
    "`>=`"
    "`==`"
    "`!=`"
    "`+=`"
    "`-=`"
    "`*=`"
    "`/=`"
    "`%=`"
    "`<<=`"
    "`>>=`"
    "`&=`"
    "`|=`"
    "`^=`"
    "`<`"
    "`>`"
    "`-`"
    "`*`"
    "`/`"
    "`%`"
    "`&`"
    "`~`"
    "`^`"
    "`$`"
    "`#`"
    FOR
    VOID_
    AUTO
    CONST_
    USING
    THROW
    DELETE_
    SIZEOF
    LOWEST
    "`::`"
    TYPENAME


Grammar

    0 $accept: begin "end of file"

    1 begin: declaration_any "end of file"

    2 declaration_any: %empty
    3                | declaration_any "`;`"
    4                | declaration_any generic-decl

    5 generic-decl: EXTERN VAR identifier "`:`" type-expr "`;`"
    6             | EXTERN "reserved word `fn`" qname "`(`" parameter-list-opt "`)`" "`;`"
    7             | EXTERN "reserved word `fn`" qname "`(`" parameter-list-opt "`)`" "`->`" type-expr "`;`"
    8             | INCLUDE STRING
    9             | enum-decl
   10             | type-decl
   11             | fn-decl
   12             | let-decl
   13             | compound-expression "`;`"

   14 let-decl: let-decl-start-with-opt-type "`;`"
   15         | let-decl-start-with-opt-type "`=`" expression "`;`"

   16 let-decl-start: LET identifier
   17               | LET "weak modifier" identifier

   18 let-decl-start-with-opt-type: let-decl-start
   19                             | let-decl-start "`:`" type-expr

   20 infunction_declaration_any: %empty
   21                           | infunction_declaration_any "`;`"
   22                           | infunction_declaration_any opt-infunction-decl

   23 opt-infunction-decl: let-decl
   24                    | RETURN expression "`;`"
   25                    | compound-expression "`;`"

   26 identifier: IDENTIFIER

   27 qname: DBLCOLON identifier
   28      | identifier
   29      | qname DBLCOLON identifier

   30 fn-decl: "reserved word `fn`" qname "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   31        | "reserved word `fn`" qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

   32 enum-decl: ENUM qname "`{`" case-list-opt "`}`"

   33 case-list-opt: %empty
   34              | case-list

   35 case-list: case-decl
   36          | case-list "," case-decl

   37 case-decl: identifier

   38 type-decl: TYPE qname type-extension-any "`{`" parameter-woa-list-opt "`}`"

   39 type-extension-any: %empty
   40                   | EXTENDS type-extension-list

   41 type-extension-list: qname
   42                    | type-extension-list "," qname

   43 field-list-opt: %empty
   44               | field-list

   45 field-list: field-decl
   46           | field-list "," field-decl

   47 field-decl: IDENTIFIER "`:`" type-expr
   48           | type-expr

   49 parameter-decl-name: IDENTIFIER INTERNAL_IDENTIFIER "`:`"
   50                    | IDENTIFIER "`:`"
   51                    | INTERNAL_IDENTIFIER "`:`"

   52 parameter-decl-type: "const modifier" type-expr "`...`"
   53                    | "const modifier" type-expr
   54                    | type-expr "`...`"
   55                    | type-expr

   56 parameter-decl: parameter-decl-name parameter-decl-type
   57               | parameter-decl-type

   58 parameter-list-opt: %empty
   59                   | parameter-list

   60 parameter-list: parameter-decl
   61               | parameter-list "," parameter-decl

   62 parameter-woa-list-opt: %empty
   63                       | parameter-woa-list

   64 parameter-woa-list: parameter-woa-decl
   65                   | parameter-woa-list "," parameter-woa-decl

   66 parameter-woa-decl: parameter-decl
   67                   | parameter-decl "`=`" expression

   68 type-expr: BOOL
   69          | INT
   70          | FLOAT
   71          | qname
   72          | "`[`" type-expr "`]`"
   73          | "`(`" field-list-opt "`)`"
   74          | type-expr "`[`" INTEGER "`]`"
   75          | type-expr "`|`" type-expr
   76          | type-expr "`->`" type-expr

   77 compound-expression: expression "`(`" opt-named-expr-list-any "`)`"
   78                    | expression "`{`" opt-named-expr-list-any "`}`"
   79                    | expression "`=`" expression

   80 expression: "true"
   81           | "false"
   82           | INTEGER
   83           | DECIMAL
   84           | STRING
   85           | "`.`" identifier
   86           | qname
   87           | INTERNAL_IDENTIFIER
   88           | "`(`" expression "`)`"
   89           | "reserved word `fn`" "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   90           | "reserved word `fn`" "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"
   91           | "`[`" expression-list-any "`]`"
   92           | "`!`" expression
   93           | expression "`?`"
   94           | expression "`.`" identifier
   95           | expression "`&&`" expression
   96           | expression "`||`" expression
   97           | expression "`+`" expression
   98           | expression "`..`" expression
   99           | compound-expression

  100 expression-list-any: %empty
  101                    | expression
  102                    | expression-list-any "," expression

  103 opt-named-expr-list-any: %empty
  104                        | opt-named-expr-list

  105 opt-named-expr-list: opt-named-expr
  106                    | opt-named-expr-list "," opt-named-expr

  107 opt-named-expr: qname "`:`" expression
  108               | expression


Terminals, with rules where they appear

    "end of file" (0) 0 1
    error (256)
    COMMENT_BEGIN (258)
    COMMENT_END (259)
    STRING <sonia::lang::bang::annotated_string_view> (260) 8 84
    IDENTIFIER <sonia::lang::bang::annotated_string_view> (261) 26 47 49 50
    INTERNAL_IDENTIFIER <sonia::lang::bang::annotated_string_view> (262) 49 51 87
    INTEGER <sonia::lang::bang::annotated_decimal> (263) 74 82
    DECIMAL <sonia::lang::bang::annotated_decimal> (264) 83
    OPERATOR_TERM <sonia::string_view> (265)
    "`=`" <sonia::lang::lex::resource_location> (266) 15 67 79
    "`_`" (267)
    "`->*`" (268)
    "`->`" (269) 7 31 76 90
    "`~>`" (270)
    "`.*`" (271)
    "`++`" (272)
    "`--`" (273)
    "`<<`" (274)
    "`>>`" (275)
    "`<=`" (276)
    "`>=`" (277)
    "`==`" (278)
    "`!=`" (279)
    "`&&`" <sonia::lang::lex::resource_location> (280) 95
    "`||`" <sonia::lang::lex::resource_location> (281) 96
    "`..`" <sonia::lang::lex::resource_location> (282) 98
    "`...`" <sonia::lang::lex::resource_location> (283) 52 54
    "`+=`" (284)
    "`-=`" (285)
    "`*=`" (286)
    "`/=`" (287)
    "`%=`" (288)
    "`<<=`" (289)
    "`>>=`" (290)
    "`&=`" (291)
    "`|=`" (292)
    "`^=`" (293)
    "`:`" (294) 5 19 47 49 50 51 107
    "`(`" <sonia::lang::lex::resource_location> (295) 6 7 30 31 73 77 88 89 90
    "`)`" (296) 6 7 30 31 73 77 88 89 90
    "`{`" <sonia::lang::lex::resource_location> (297) 30 31 32 38 78 89 90
    "`}`" (298) 30 31 32 38 78 89 90
    "`[`" <sonia::lang::lex::resource_location> (299) 72 74 91
    "`]`" (300) 72 74 91
    "`<`" (301)
    "`>`" (302)
    "`;`" (303) 3 5 6 7 13 14 15 21 24 25
    "`.`" <sonia::lang::lex::resource_location> (304) 85 94
    "`+`" <sonia::lang::lex::resource_location> (305) 97
    "`-`" (306)
    "`*`" (307)
    "`/`" (308)
    "`%`" (309)
    "`&`" (310)
    "`|`" (311) 75
    "`!`" <sonia::lang::lex::resource_location> (312) 92
    "`~`" (313)
    "`^`" (314)
    "," (315) 36 42 46 61 65 102 106
    "`$`" (316)
    "`?`" (317) 93
    "`#`" (318)
    LET (319) 16 17
    VAR (320) 5
    RETURN (321) 24
    EXTERN (322) 5 6 7
    FOR (323)
    VOID_ (324)
    AUTO (325)
    CONST_ (326)
    USING (327)
    THROW (328)
    DELETE_ (329)
    SIZEOF (330)
    LOWEST (331)
    DBLCOLON (332) 27 29
    "`::`" (333)
    INCLUDE (334) 8
    "reserved word `fn`" <sonia::lang::lex::resource_location> (335) 6 7 30 31 89 90
    ENUM (336) 32
    TYPE (337) 38
    EXTENDS (338) 40
    TYPENAME (339)
    BOOL (340) 68
    INT (341) 69
    FLOAT (342) 70
    "weak modifier" (343) 17
    "const modifier" (344) 52 53
    "true" <sonia::lang::lex::resource_location> (345) 80
    "false" <sonia::lang::lex::resource_location> (346) 81


Nonterminals, with rules where they appear

    $accept (92)
        on left: 0
    begin (93)
        on left: 1
        on right: 0
    declaration_any <declaration_set_t> (94)
        on left: 2 3 4
        on right: 1 3 4
    generic-decl <generic_declaration_t> (95)
        on left: 5 6 7 8 9 10 11 12 13
        on right: 4
    let-decl <let_statement_decl_t> (96)
        on left: 14 15
        on right: 12 23
    let-decl-start <let_statement_decl_t> (97)
        on left: 16 17
        on right: 18 19
    let-decl-start-with-opt-type <let_statement_decl_t> (98)
        on left: 18 19
        on right: 14 15
    infunction_declaration_any <std::vector<infunction_declaration_t>> (99)
        on left: 20 21 22
        on right: 21 22 30 31 89 90
    opt-infunction-decl <infunction_declaration_t> (100)
        on left: 23 24 25
        on right: 22
    identifier <sonia::lang::bang::annotated_identifier> (101)
        on left: 26
        on right: 5 16 17 27 28 29 37 85 94
    qname <sonia::lang::bang::annotated_qname> (102)
        on left: 27 28 29
        on right: 6 7 29 30 31 32 38 41 42 71 86 107
    fn-decl <fn_decl_t> (103)
        on left: 30 31
        on right: 11
    enum-decl <enum_decl> (104)
        on left: 32
        on right: 9
    case-list-opt <std::vector<sonia::lang::bang::identifier>> (105)
        on left: 33 34
        on right: 32
    case-list <std::vector<sonia::lang::bang::identifier>> (106)
        on left: 35 36
        on right: 34 36
    case-decl <sonia::lang::bang::identifier> (107)
        on left: 37
        on right: 35 36
    type-decl <type_decl> (108)
        on left: 38
        on right: 10
    type-extension-any <extension_list_t> (109)
        on left: 39 40
        on right: 38
    type-extension-list <extension_list_t> (110)
        on left: 41 42
        on right: 40 42
    field-list-opt <field_list_t> (111)
        on left: 43 44
        on right: 73
    field-list <field_list_t> (112)
        on left: 45 46
        on right: 44 46
    field-decl <field_t> (113)
        on left: 47 48
        on right: 45 46
    parameter-decl-name <parameter_name> (114)
        on left: 49 50 51
        on right: 56
    parameter-decl-type <parameter_type_t> (115)
        on left: 52 53 54 55
        on right: 56 57
    parameter-decl <parameter_t> (116)
        on left: 56 57
        on right: 60 61 66 67
    parameter-list-opt <parameter_woa_list_t> (117)
        on left: 58 59
        on right: 6 7
    parameter-list <parameter_woa_list_t> (118)
        on left: 60 61
        on right: 59 61
    parameter-woa-list-opt <parameter_woa_list_t> (119)
        on left: 62 63
        on right: 30 31 38 89 90
    parameter-woa-list <parameter_woa_list_t> (120)
        on left: 64 65
        on right: 63 65
    parameter-woa-decl <parameter_woa_t> (121)
        on left: 66 67
        on right: 64 65
    type-expr <bang_preliminary_type> (122)
        on left: 68 69 70 71 72 73 74 75 76
        on right: 5 7 19 31 47 48 52 53 54 55 72 74 75 76 90
    compound-expression <expression_t> (123)
        on left: 77 78 79
        on right: 13 25 99
    expression <expression_t> (124)
        on left: 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99
        on right: 15 24 67 77 78 79 88 92 93 94 95 96 97 98 101 102 107 108
    expression-list-any <expression_list_t> (125)
        on left: 100 101 102
        on right: 91 102
    opt-named-expr-list-any <named_expression_term_list_t> (126)
        on left: 103 104
        on right: 77 78
    opt-named-expr-list <named_expression_term_list_t> (127)
        on left: 105 106
        on right: 104 106
    opt-named-expr <named_expression_term_t> (128)
        on left: 107 108
        on right: 105 106


State 0

    0 $accept: . begin "end of file"

    $default  reduce using rule 2 (declaration_any)

    begin            go to state 1
    declaration_any  go to state 2


State 1

    0 $accept: begin . "end of file"

    "end of file"  shift, and go to state 3


State 2

    1 begin: declaration_any . "end of file"
    3 declaration_any: declaration_any . "`;`"
    4                | declaration_any . generic-decl

    "end of file"         shift, and go to state 4
    STRING                shift, and go to state 5
    IDENTIFIER            shift, and go to state 6
    INTERNAL_IDENTIFIER   shift, and go to state 7
    INTEGER               shift, and go to state 8
    DECIMAL               shift, and go to state 9
    "`(`"                 shift, and go to state 10
    "`[`"                 shift, and go to state 11
    "`;`"                 shift, and go to state 12
    "`.`"                 shift, and go to state 13
    "`!`"                 shift, and go to state 14
    LET                   shift, and go to state 15
    EXTERN                shift, and go to state 16
    DBLCOLON              shift, and go to state 17
    INCLUDE               shift, and go to state 18
    "reserved word `fn`"  shift, and go to state 19
    ENUM                  shift, and go to state 20
    TYPE                  shift, and go to state 21
    "true"                shift, and go to state 22
    "false"               shift, and go to state 23

    generic-decl                  go to state 24
    let-decl                      go to state 25
    let-decl-start                go to state 26
    let-decl-start-with-opt-type  go to state 27
    identifier                    go to state 28
    qname                         go to state 29
    fn-decl                       go to state 30
    enum-decl                     go to state 31
    type-decl                     go to state 32
    compound-expression           go to state 33
    expression                    go to state 34


State 3

    0 $accept: begin "end of file" .

    $default  accept


State 4

    1 begin: declaration_any "end of file" .

    $default  reduce using rule 1 (begin)


State 5

   84 expression: STRING .

    $default  reduce using rule 84 (expression)


State 6

   26 identifier: IDENTIFIER .

    $default  reduce using rule 26 (identifier)


State 7

   87 expression: INTERNAL_IDENTIFIER .

    $default  reduce using rule 87 (expression)


State 8

   82 expression: INTEGER .

    $default  reduce using rule 82 (expression)


State 9

   83 expression: DECIMAL .

    $default  reduce using rule 83 (expression)


State 10

   88 expression: "`(`" . expression "`)`"

    STRING                shift, and go to state 5
    IDENTIFIER            shift, and go to state 6
    INTERNAL_IDENTIFIER   shift, and go to state 7
    INTEGER               shift, and go to state 8
    DECIMAL               shift, and go to state 9
    "`(`"                 shift, and go to state 10
    "`[`"                 shift, and go to state 11
    "`.`"                 shift, and go to state 13
    "`!`"                 shift, and go to state 14
    DBLCOLON              shift, and go to state 17
    "reserved word `fn`"  shift, and go to state 35
    "true"                shift, and go to state 22
    "false"               shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 37


State 11

   91 expression: "`[`" . expression-list-any "`]`"

    STRING                shift, and go to state 5
    IDENTIFIER            shift, and go to state 6
    INTERNAL_IDENTIFIER   shift, and go to state 7
    INTEGER               shift, and go to state 8
    DECIMAL               shift, and go to state 9
    "`(`"                 shift, and go to state 10
    "`[`"                 shift, and go to state 11
    "`.`"                 shift, and go to state 13
    "`!`"                 shift, and go to state 14
    DBLCOLON              shift, and go to state 17
    "reserved word `fn`"  shift, and go to state 35
    "true"                shift, and go to state 22
    "false"               shift, and go to state 23

    $default  reduce using rule 100 (expression-list-any)

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 38
    expression-list-any  go to state 39


State 12

    3 declaration_any: declaration_any "`;`" .

    $default  reduce using rule 3 (declaration_any)


State 13

   85 expression: "`.`" . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 40


State 14

   92 expression: "`!`" . expression

    STRING                shift, and go to state 5
    IDENTIFIER            shift, and go to state 6
    INTERNAL_IDENTIFIER   shift, and go to state 7
    INTEGER               shift, and go to state 8
    DECIMAL               shift, and go to state 9
    "`(`"                 shift, and go to state 10
    "`[`"                 shift, and go to state 11
    "`.`"                 shift, and go to state 13
    "`!`"                 shift, and go to state 14
    DBLCOLON              shift, and go to state 17
    "reserved word `fn`"  shift, and go to state 35
    "true"                shift, and go to state 22
    "false"               shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 41


State 15

   16 let-decl-start: LET . identifier
   17               | LET . "weak modifier" identifier

    IDENTIFIER       shift, and go to state 6
    "weak modifier"  shift, and go to state 42

    identifier  go to state 43


State 16

    5 generic-decl: EXTERN . VAR identifier "`:`" type-expr "`;`"
    6             | EXTERN . "reserved word `fn`" qname "`(`" parameter-list-opt "`)`" "`;`"
    7             | EXTERN . "reserved word `fn`" qname "`(`" parameter-list-opt "`)`" "`->`" type-expr "`;`"

    VAR                   shift, and go to state 44
    "reserved word `fn`"  shift, and go to state 45


State 17

   27 qname: DBLCOLON . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 46


State 18

    8 generic-decl: INCLUDE . STRING

    STRING  shift, and go to state 47


State 19

   30 fn-decl: "reserved word `fn`" . qname "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   31        | "reserved word `fn`" . qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"
   89 expression: "reserved word `fn`" . "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   90           | "reserved word `fn`" . "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    IDENTIFIER  shift, and go to state 6
    "`(`"       shift, and go to state 48
    DBLCOLON    shift, and go to state 17

    identifier  go to state 28
    qname       go to state 49


State 20

   32 enum-decl: ENUM . qname "`{`" case-list-opt "`}`"

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 17

    identifier  go to state 28
    qname       go to state 50


State 21

   38 type-decl: TYPE . qname type-extension-any "`{`" parameter-woa-list-opt "`}`"

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 17

    identifier  go to state 28
    qname       go to state 51


State 22

   80 expression: "true" .

    $default  reduce using rule 80 (expression)


State 23

   81 expression: "false" .

    $default  reduce using rule 81 (expression)


State 24

    4 declaration_any: declaration_any generic-decl .

    $default  reduce using rule 4 (declaration_any)


State 25

   12 generic-decl: let-decl .

    $default  reduce using rule 12 (generic-decl)


State 26

   18 let-decl-start-with-opt-type: let-decl-start .
   19                             | let-decl-start . "`:`" type-expr

    "`:`"  shift, and go to state 52

    $default  reduce using rule 18 (let-decl-start-with-opt-type)


State 27

   14 let-decl: let-decl-start-with-opt-type . "`;`"
   15         | let-decl-start-with-opt-type . "`=`" expression "`;`"

    "`=`"  shift, and go to state 53
    "`;`"  shift, and go to state 54


State 28

   28 qname: identifier .

    $default  reduce using rule 28 (qname)


State 29

   29 qname: qname . DBLCOLON identifier
   86 expression: qname .

    DBLCOLON  shift, and go to state 55

    $default  reduce using rule 86 (expression)


State 30

   11 generic-decl: fn-decl .

    $default  reduce using rule 11 (generic-decl)


State 31

    9 generic-decl: enum-decl .

    $default  reduce using rule 9 (generic-decl)


State 32

   10 generic-decl: type-decl .

    $default  reduce using rule 10 (generic-decl)


State 33

   13 generic-decl: compound-expression . "`;`"
   99 expression: compound-expression .

    "`;`"  shift, and go to state 56

    $default  reduce using rule 99 (expression)


State 34

   77 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   78                    | expression . "`{`" opt-named-expr-list-any "`}`"
   79                    | expression . "`=`" expression
   93 expression: expression . "`?`"
   94           | expression . "`.`" identifier
   95           | expression . "`&&`" expression
   96           | expression . "`||`" expression
   97           | expression . "`+`" expression
   98           | expression . "`..`" expression

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`{`"   shift, and go to state 62
    "`.`"   shift, and go to state 63
    "`+`"   shift, and go to state 64
    "`?`"   shift, and go to state 65


State 35

   89 expression: "reserved word `fn`" . "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   90           | "reserved word `fn`" . "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`(`"  shift, and go to state 48


State 36

   99 expression: compound-expression .

    $default  reduce using rule 99 (expression)


State 37

   77 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   78                    | expression . "`{`" opt-named-expr-list-any "`}`"
   79                    | expression . "`=`" expression
   88 expression: "`(`" expression . "`)`"
   93           | expression . "`?`"
   94           | expression . "`.`" identifier
   95           | expression . "`&&`" expression
   96           | expression . "`||`" expression
   97           | expression . "`+`" expression
   98           | expression . "`..`" expression

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`)`"   shift, and go to state 66
    "`{`"   shift, and go to state 62
    "`.`"   shift, and go to state 63
    "`+`"   shift, and go to state 64
    "`?`"   shift, and go to state 65


State 38

   77 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   78                    | expression . "`{`" opt-named-expr-list-any "`}`"
   79                    | expression . "`=`" expression
   93 expression: expression . "`?`"
   94           | expression . "`.`" identifier
   95           | expression . "`&&`" expression
   96           | expression . "`||`" expression
   97           | expression . "`+`" expression
   98           | expression . "`..`" expression
  101 expression-list-any: expression .

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`{`"   shift, and go to state 62
    "`.`"   shift, and go to state 63
    "`+`"   shift, and go to state 64
    "`?`"   shift, and go to state 65

    $default  reduce using rule 101 (expression-list-any)


State 39

   91 expression: "`[`" expression-list-any . "`]`"
  102 expression-list-any: expression-list-any . "," expression

    "`]`"  shift, and go to state 67
    ","    shift, and go to state 68


State 40

   85 expression: "`.`" identifier .

    $default  reduce using rule 85 (expression)


State 41

   77 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   78                    | expression . "`{`" opt-named-expr-list-any "`}`"
   79                    | expression . "`=`" expression
   92 expression: "`!`" expression .
   93           | expression . "`?`"
   94           | expression . "`.`" identifier
   95           | expression . "`&&`" expression
   96           | expression . "`||`" expression
   97           | expression . "`+`" expression
   98           | expression . "`..`" expression

    "`(`"  shift, and go to state 61
    "`{`"  shift, and go to state 62
    "`.`"  shift, and go to state 63
    "`?`"  shift, and go to state 65

    $default  reduce using rule 92 (expression)


State 42

   17 let-decl-start: LET "weak modifier" . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 69


State 43

   16 let-decl-start: LET identifier .

    $default  reduce using rule 16 (let-decl-start)


State 44

    5 generic-decl: EXTERN VAR . identifier "`:`" type-expr "`;`"

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 70


State 45

    6 generic-decl: EXTERN "reserved word `fn`" . qname "`(`" parameter-list-opt "`)`" "`;`"
    7             | EXTERN "reserved word `fn`" . qname "`(`" parameter-list-opt "`)`" "`->`" type-expr "`;`"

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 17

    identifier  go to state 28
    qname       go to state 71


State 46

   27 qname: DBLCOLON identifier .

    $default  reduce using rule 27 (qname)


State 47

    8 generic-decl: INCLUDE STRING .

    $default  reduce using rule 8 (generic-decl)


State 48

   89 expression: "reserved word `fn`" "`(`" . parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   90           | "reserved word `fn`" "`(`" . parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    IDENTIFIER           shift, and go to state 72
    INTERNAL_IDENTIFIER  shift, and go to state 73
    "`(`"                shift, and go to state 74
    "`[`"                shift, and go to state 75
    DBLCOLON             shift, and go to state 17
    BOOL                 shift, and go to state 76
    INT                  shift, and go to state 77
    FLOAT                shift, and go to state 78
    "const modifier"     shift, and go to state 79

    $default  reduce using rule 62 (parameter-woa-list-opt)

    identifier              go to state 28
    qname                   go to state 80
    parameter-decl-name     go to state 81
    parameter-decl-type     go to state 82
    parameter-decl          go to state 83
    parameter-woa-list-opt  go to state 84
    parameter-woa-list      go to state 85
    parameter-woa-decl      go to state 86
    type-expr               go to state 87


State 49

   29 qname: qname . DBLCOLON identifier
   30 fn-decl: "reserved word `fn`" qname . "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   31        | "reserved word `fn`" qname . "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`(`"     shift, and go to state 88
    DBLCOLON  shift, and go to state 55


State 50

   29 qname: qname . DBLCOLON identifier
   32 enum-decl: ENUM qname . "`{`" case-list-opt "`}`"

    "`{`"     shift, and go to state 89
    DBLCOLON  shift, and go to state 55


State 51

   29 qname: qname . DBLCOLON identifier
   38 type-decl: TYPE qname . type-extension-any "`{`" parameter-woa-list-opt "`}`"

    DBLCOLON  shift, and go to state 55
    EXTENDS   shift, and go to state 90

    $default  reduce using rule 39 (type-extension-any)

    type-extension-any  go to state 91


State 52

   19 let-decl-start-with-opt-type: let-decl-start "`:`" . type-expr

    IDENTIFIER  shift, and go to state 6
    "`(`"       shift, and go to state 74
    "`[`"       shift, and go to state 75
    DBLCOLON    shift, and go to state 17
    BOOL        shift, and go to state 76
    INT         shift, and go to state 77
    FLOAT       shift, and go to state 78

    identifier  go to state 28
    qname       go to state 80
    type-expr   go to state 92


State 53

   15 let-decl: let-decl-start-with-opt-type "`=`" . expression "`;`"

    STRING                shift, and go to state 5
    IDENTIFIER            shift, and go to state 6
    INTERNAL_IDENTIFIER   shift, and go to state 7
    INTEGER               shift, and go to state 8
    DECIMAL               shift, and go to state 9
    "`(`"                 shift, and go to state 10
    "`[`"                 shift, and go to state 11
    "`.`"                 shift, and go to state 13
    "`!`"                 shift, and go to state 14
    DBLCOLON              shift, and go to state 17
    "reserved word `fn`"  shift, and go to state 35
    "true"                shift, and go to state 22
    "false"               shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 93


State 54

   14 let-decl: let-decl-start-with-opt-type "`;`" .

    $default  reduce using rule 14 (let-decl)


State 55

   29 qname: qname DBLCOLON . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 94


State 56

   13 generic-decl: compound-expression "`;`" .

    $default  reduce using rule 13 (generic-decl)


State 57

   79 compound-expression: expression "`=`" . expression

    STRING                shift, and go to state 5
    IDENTIFIER            shift, and go to state 6
    INTERNAL_IDENTIFIER   shift, and go to state 7
    INTEGER               shift, and go to state 8
    DECIMAL               shift, and go to state 9
    "`(`"                 shift, and go to state 10
    "`[`"                 shift, and go to state 11
    "`.`"                 shift, and go to state 13
    "`!`"                 shift, and go to state 14
    DBLCOLON              shift, and go to state 17
    "reserved word `fn`"  shift, and go to state 35
    "true"                shift, and go to state 22
    "false"               shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 95


State 58

   95 expression: expression "`&&`" . expression

    STRING                shift, and go to state 5
    IDENTIFIER            shift, and go to state 6
    INTERNAL_IDENTIFIER   shift, and go to state 7
    INTEGER               shift, and go to state 8
    DECIMAL               shift, and go to state 9
    "`(`"                 shift, and go to state 10
    "`[`"                 shift, and go to state 11
    "`.`"                 shift, and go to state 13
    "`!`"                 shift, and go to state 14
    DBLCOLON              shift, and go to state 17
    "reserved word `fn`"  shift, and go to state 35
    "true"                shift, and go to state 22
    "false"               shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 96


State 59

   96 expression: expression "`||`" . expression

    STRING                shift, and go to state 5
    IDENTIFIER            shift, and go to state 6
    INTERNAL_IDENTIFIER   shift, and go to state 7
    INTEGER               shift, and go to state 8
    DECIMAL               shift, and go to state 9
    "`(`"                 shift, and go to state 10
    "`[`"                 shift, and go to state 11
    "`.`"                 shift, and go to state 13
    "`!`"                 shift, and go to state 14
    DBLCOLON              shift, and go to state 17
    "reserved word `fn`"  shift, and go to state 35
    "true"                shift, and go to state 22
    "false"               shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 97


State 60

   98 expression: expression "`..`" . expression

    STRING                shift, and go to state 5
    IDENTIFIER            shift, and go to state 6
    INTERNAL_IDENTIFIER   shift, and go to state 7
    INTEGER               shift, and go to state 8
    DECIMAL               shift, and go to state 9
    "`(`"                 shift, and go to state 10
    "`[`"                 shift, and go to state 11
    "`.`"                 shift, and go to state 13
    "`!`"                 shift, and go to state 14
    DBLCOLON              shift, and go to state 17
    "reserved word `fn`"  shift, and go to state 35
    "true"                shift, and go to state 22
    "false"               shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 98


State 61

   77 compound-expression: expression "`(`" . opt-named-expr-list-any "`)`"

    STRING                shift, and go to state 5
    IDENTIFIER            shift, and go to state 6
    INTERNAL_IDENTIFIER   shift, and go to state 7
    INTEGER               shift, and go to state 8
    DECIMAL               shift, and go to state 9
    "`(`"                 shift, and go to state 10
    "`[`"                 shift, and go to state 11
    "`.`"                 shift, and go to state 13
    "`!`"                 shift, and go to state 14
    DBLCOLON              shift, and go to state 17
    "reserved word `fn`"  shift, and go to state 35
    "true"                shift, and go to state 22
    "false"               shift, and go to state 23

    $default  reduce using rule 103 (opt-named-expr-list-any)

    identifier               go to state 28
    qname                    go to state 99
    compound-expression      go to state 36
    expression               go to state 100
    opt-named-expr-list-any  go to state 101
    opt-named-expr-list      go to state 102
    opt-named-expr           go to state 103


State 62

   78 compound-expression: expression "`{`" . opt-named-expr-list-any "`}`"

    STRING                shift, and go to state 5
    IDENTIFIER            shift, and go to state 6
    INTERNAL_IDENTIFIER   shift, and go to state 7
    INTEGER               shift, and go to state 8
    DECIMAL               shift, and go to state 9
    "`(`"                 shift, and go to state 10
    "`[`"                 shift, and go to state 11
    "`.`"                 shift, and go to state 13
    "`!`"                 shift, and go to state 14
    DBLCOLON              shift, and go to state 17
    "reserved word `fn`"  shift, and go to state 35
    "true"                shift, and go to state 22
    "false"               shift, and go to state 23

    $default  reduce using rule 103 (opt-named-expr-list-any)

    identifier               go to state 28
    qname                    go to state 99
    compound-expression      go to state 36
    expression               go to state 100
    opt-named-expr-list-any  go to state 104
    opt-named-expr-list      go to state 102
    opt-named-expr           go to state 103


State 63

   94 expression: expression "`.`" . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 105


State 64

   97 expression: expression "`+`" . expression

    STRING                shift, and go to state 5
    IDENTIFIER            shift, and go to state 6
    INTERNAL_IDENTIFIER   shift, and go to state 7
    INTEGER               shift, and go to state 8
    DECIMAL               shift, and go to state 9
    "`(`"                 shift, and go to state 10
    "`[`"                 shift, and go to state 11
    "`.`"                 shift, and go to state 13
    "`!`"                 shift, and go to state 14
    DBLCOLON              shift, and go to state 17
    "reserved word `fn`"  shift, and go to state 35
    "true"                shift, and go to state 22
    "false"               shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 106


State 65

   93 expression: expression "`?`" .

    $default  reduce using rule 93 (expression)


State 66

   88 expression: "`(`" expression "`)`" .

    $default  reduce using rule 88 (expression)


State 67

   91 expression: "`[`" expression-list-any "`]`" .

    $default  reduce using rule 91 (expression)


State 68

  102 expression-list-any: expression-list-any "," . expression

    STRING                shift, and go to state 5
    IDENTIFIER            shift, and go to state 6
    INTERNAL_IDENTIFIER   shift, and go to state 7
    INTEGER               shift, and go to state 8
    DECIMAL               shift, and go to state 9
    "`(`"                 shift, and go to state 10
    "`[`"                 shift, and go to state 11
    "`.`"                 shift, and go to state 13
    "`!`"                 shift, and go to state 14
    DBLCOLON              shift, and go to state 17
    "reserved word `fn`"  shift, and go to state 35
    "true"                shift, and go to state 22
    "false"               shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 107


State 69

   17 let-decl-start: LET "weak modifier" identifier .

    $default  reduce using rule 17 (let-decl-start)


State 70

    5 generic-decl: EXTERN VAR identifier . "`:`" type-expr "`;`"

    "`:`"  shift, and go to state 108


State 71

    6 generic-decl: EXTERN "reserved word `fn`" qname . "`(`" parameter-list-opt "`)`" "`;`"
    7             | EXTERN "reserved word `fn`" qname . "`(`" parameter-list-opt "`)`" "`->`" type-expr "`;`"
   29 qname: qname . DBLCOLON identifier

    "`(`"     shift, and go to state 109
    DBLCOLON  shift, and go to state 55


State 72

   26 identifier: IDENTIFIER .
   49 parameter-decl-name: IDENTIFIER . INTERNAL_IDENTIFIER "`:`"
   50                    | IDENTIFIER . "`:`"

    INTERNAL_IDENTIFIER  shift, and go to state 110
    "`:`"                shift, and go to state 111

    $default  reduce using rule 26 (identifier)


State 73

   51 parameter-decl-name: INTERNAL_IDENTIFIER . "`:`"

    "`:`"  shift, and go to state 112


State 74

   73 type-expr: "`(`" . field-list-opt "`)`"

    IDENTIFIER  shift, and go to state 113
    "`(`"       shift, and go to state 74
    "`[`"       shift, and go to state 75
    DBLCOLON    shift, and go to state 17
    BOOL        shift, and go to state 76
    INT         shift, and go to state 77
    FLOAT       shift, and go to state 78

    $default  reduce using rule 43 (field-list-opt)

    identifier      go to state 28
    qname           go to state 80
    field-list-opt  go to state 114
    field-list      go to state 115
    field-decl      go to state 116
    type-expr       go to state 117


State 75

   72 type-expr: "`[`" . type-expr "`]`"

    IDENTIFIER  shift, and go to state 6
    "`(`"       shift, and go to state 74
    "`[`"       shift, and go to state 75
    DBLCOLON    shift, and go to state 17
    BOOL        shift, and go to state 76
    INT         shift, and go to state 77
    FLOAT       shift, and go to state 78

    identifier  go to state 28
    qname       go to state 80
    type-expr   go to state 118


State 76

   68 type-expr: BOOL .

    $default  reduce using rule 68 (type-expr)


State 77

   69 type-expr: INT .

    $default  reduce using rule 69 (type-expr)


State 78

   70 type-expr: FLOAT .

    $default  reduce using rule 70 (type-expr)


State 79

   52 parameter-decl-type: "const modifier" . type-expr "`...`"
   53                    | "const modifier" . type-expr

    IDENTIFIER  shift, and go to state 6
    "`(`"       shift, and go to state 74
    "`[`"       shift, and go to state 75
    DBLCOLON    shift, and go to state 17
    BOOL        shift, and go to state 76
    INT         shift, and go to state 77
    FLOAT       shift, and go to state 78

    identifier  go to state 28
    qname       go to state 80
    type-expr   go to state 119


State 80

   29 qname: qname . DBLCOLON identifier
   71 type-expr: qname .

    DBLCOLON  shift, and go to state 55

    $default  reduce using rule 71 (type-expr)


State 81

   56 parameter-decl: parameter-decl-name . parameter-decl-type

    IDENTIFIER        shift, and go to state 6
    "`(`"             shift, and go to state 74
    "`[`"             shift, and go to state 75
    DBLCOLON          shift, and go to state 17
    BOOL              shift, and go to state 76
    INT               shift, and go to state 77
    FLOAT             shift, and go to state 78
    "const modifier"  shift, and go to state 79

    identifier           go to state 28
    qname                go to state 80
    parameter-decl-type  go to state 120
    type-expr            go to state 87


State 82

   57 parameter-decl: parameter-decl-type .

    $default  reduce using rule 57 (parameter-decl)


State 83

   66 parameter-woa-decl: parameter-decl .
   67                   | parameter-decl . "`=`" expression

    "`=`"  shift, and go to state 121

    $default  reduce using rule 66 (parameter-woa-decl)


State 84

   89 expression: "reserved word `fn`" "`(`" parameter-woa-list-opt . "`)`" "`{`" infunction_declaration_any "`}`"
   90           | "reserved word `fn`" "`(`" parameter-woa-list-opt . "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`)`"  shift, and go to state 122


State 85

   63 parameter-woa-list-opt: parameter-woa-list .
   65 parameter-woa-list: parameter-woa-list . "," parameter-woa-decl

    ","  shift, and go to state 123

    $default  reduce using rule 63 (parameter-woa-list-opt)


State 86

   64 parameter-woa-list: parameter-woa-decl .

    $default  reduce using rule 64 (parameter-woa-list)


State 87

   54 parameter-decl-type: type-expr . "`...`"
   55                    | type-expr .
   74 type-expr: type-expr . "`[`" INTEGER "`]`"
   75          | type-expr . "`|`" type-expr
   76          | type-expr . "`->`" type-expr

    "`->`"   shift, and go to state 124
    "`...`"  shift, and go to state 125
    "`[`"    shift, and go to state 126
    "`|`"    shift, and go to state 127

    $default  reduce using rule 55 (parameter-decl-type)


State 88

   30 fn-decl: "reserved word `fn`" qname "`(`" . parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`"
   31        | "reserved word `fn`" qname "`(`" . parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    IDENTIFIER           shift, and go to state 72
    INTERNAL_IDENTIFIER  shift, and go to state 73
    "`(`"                shift, and go to state 74
    "`[`"                shift, and go to state 75
    DBLCOLON             shift, and go to state 17
    BOOL                 shift, and go to state 76
    INT                  shift, and go to state 77
    FLOAT                shift, and go to state 78
    "const modifier"     shift, and go to state 79

    $default  reduce using rule 62 (parameter-woa-list-opt)

    identifier              go to state 28
    qname                   go to state 80
    parameter-decl-name     go to state 81
    parameter-decl-type     go to state 82
    parameter-decl          go to state 83
    parameter-woa-list-opt  go to state 128
    parameter-woa-list      go to state 85
    parameter-woa-decl      go to state 86
    type-expr               go to state 87


State 89

   32 enum-decl: ENUM qname "`{`" . case-list-opt "`}`"

    IDENTIFIER  shift, and go to state 6

    $default  reduce using rule 33 (case-list-opt)

    identifier     go to state 129
    case-list-opt  go to state 130
    case-list      go to state 131
    case-decl      go to state 132


State 90

   40 type-extension-any: EXTENDS . type-extension-list

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 17

    identifier           go to state 28
    qname                go to state 133
    type-extension-list  go to state 134


State 91

   38 type-decl: TYPE qname type-extension-any . "`{`" parameter-woa-list-opt "`}`"

    "`{`"  shift, and go to state 135


State 92

   19 let-decl-start-with-opt-type: let-decl-start "`:`" type-expr .
   74 type-expr: type-expr . "`[`" INTEGER "`]`"
   75          | type-expr . "`|`" type-expr
   76          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 124
    "`[`"   shift, and go to state 126
    "`|`"   shift, and go to state 127

    $default  reduce using rule 19 (let-decl-start-with-opt-type)


State 93

   15 let-decl: let-decl-start-with-opt-type "`=`" expression . "`;`"
   77 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   78                    | expression . "`{`" opt-named-expr-list-any "`}`"
   79                    | expression . "`=`" expression
   93 expression: expression . "`?`"
   94           | expression . "`.`" identifier
   95           | expression . "`&&`" expression
   96           | expression . "`||`" expression
   97           | expression . "`+`" expression
   98           | expression . "`..`" expression

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`{`"   shift, and go to state 62
    "`;`"   shift, and go to state 136
    "`.`"   shift, and go to state 63
    "`+`"   shift, and go to state 64
    "`?`"   shift, and go to state 65


State 94

   29 qname: qname DBLCOLON identifier .

    $default  reduce using rule 29 (qname)


State 95

   77 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   78                    | expression . "`{`" opt-named-expr-list-any "`}`"
   79                    | expression . "`=`" expression
   79                    | expression "`=`" expression .
   93 expression: expression . "`?`"
   94           | expression . "`.`" identifier
   95           | expression . "`&&`" expression
   96           | expression . "`||`" expression
   97           | expression . "`+`" expression
   98           | expression . "`..`" expression

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`{`"   shift, and go to state 62
    "`.`"   shift, and go to state 63
    "`+`"   shift, and go to state 64
    "`?`"   shift, and go to state 65

    $default  reduce using rule 79 (compound-expression)


State 96

   77 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   78                    | expression . "`{`" opt-named-expr-list-any "`}`"
   79                    | expression . "`=`" expression
   93 expression: expression . "`?`"
   94           | expression . "`.`" identifier
   95           | expression . "`&&`" expression
   95           | expression "`&&`" expression .
   96           | expression . "`||`" expression
   97           | expression . "`+`" expression
   98           | expression . "`..`" expression

    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`{`"   shift, and go to state 62
    "`.`"   shift, and go to state 63
    "`+`"   shift, and go to state 64
    "`?`"   shift, and go to state 65

    $default  reduce using rule 95 (expression)


State 97

   77 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   78                    | expression . "`{`" opt-named-expr-list-any "`}`"
   79                    | expression . "`=`" expression
   93 expression: expression . "`?`"
   94           | expression . "`.`" identifier
   95           | expression . "`&&`" expression
   96           | expression . "`||`" expression
   96           | expression "`||`" expression .
   97           | expression . "`+`" expression
   98           | expression . "`..`" expression

    "`&&`"  shift, and go to state 58
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`{`"   shift, and go to state 62
    "`.`"   shift, and go to state 63
    "`+`"   shift, and go to state 64
    "`?`"   shift, and go to state 65

    $default  reduce using rule 96 (expression)


State 98

   77 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   78                    | expression . "`{`" opt-named-expr-list-any "`}`"
   79                    | expression . "`=`" expression
   93 expression: expression . "`?`"
   94           | expression . "`.`" identifier
   95           | expression . "`&&`" expression
   96           | expression . "`||`" expression
   97           | expression . "`+`" expression
   98           | expression . "`..`" expression
   98           | expression "`..`" expression .

    "`(`"  shift, and go to state 61
    "`{`"  shift, and go to state 62
    "`.`"  shift, and go to state 63
    "`+`"  shift, and go to state 64
    "`?`"  shift, and go to state 65

    $default  reduce using rule 98 (expression)


State 99

   29 qname: qname . DBLCOLON identifier
   86 expression: qname .
  107 opt-named-expr: qname . "`:`" expression

    "`:`"     shift, and go to state 137
    DBLCOLON  shift, and go to state 55

    $default  reduce using rule 86 (expression)


State 100

   77 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   78                    | expression . "`{`" opt-named-expr-list-any "`}`"
   79                    | expression . "`=`" expression
   93 expression: expression . "`?`"
   94           | expression . "`.`" identifier
   95           | expression . "`&&`" expression
   96           | expression . "`||`" expression
   97           | expression . "`+`" expression
   98           | expression . "`..`" expression
  108 opt-named-expr: expression .

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`{`"   shift, and go to state 62
    "`.`"   shift, and go to state 63
    "`+`"   shift, and go to state 64
    "`?`"   shift, and go to state 65

    $default  reduce using rule 108 (opt-named-expr)


State 101

   77 compound-expression: expression "`(`" opt-named-expr-list-any . "`)`"

    "`)`"  shift, and go to state 138


State 102

  104 opt-named-expr-list-any: opt-named-expr-list .
  106 opt-named-expr-list: opt-named-expr-list . "," opt-named-expr

    ","  shift, and go to state 139

    $default  reduce using rule 104 (opt-named-expr-list-any)


State 103

  105 opt-named-expr-list: opt-named-expr .

    $default  reduce using rule 105 (opt-named-expr-list)


State 104

   78 compound-expression: expression "`{`" opt-named-expr-list-any . "`}`"

    "`}`"  shift, and go to state 140


State 105

   94 expression: expression "`.`" identifier .

    $default  reduce using rule 94 (expression)


State 106

   77 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   78                    | expression . "`{`" opt-named-expr-list-any "`}`"
   79                    | expression . "`=`" expression
   93 expression: expression . "`?`"
   94           | expression . "`.`" identifier
   95           | expression . "`&&`" expression
   96           | expression . "`||`" expression
   97           | expression . "`+`" expression
   97           | expression "`+`" expression .
   98           | expression . "`..`" expression

    "`(`"  shift, and go to state 61
    "`{`"  shift, and go to state 62
    "`.`"  shift, and go to state 63
    "`?`"  shift, and go to state 65

    $default  reduce using rule 97 (expression)


State 107

   77 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   78                    | expression . "`{`" opt-named-expr-list-any "`}`"
   79                    | expression . "`=`" expression
   93 expression: expression . "`?`"
   94           | expression . "`.`" identifier
   95           | expression . "`&&`" expression
   96           | expression . "`||`" expression
   97           | expression . "`+`" expression
   98           | expression . "`..`" expression
  102 expression-list-any: expression-list-any "," expression .

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`{`"   shift, and go to state 62
    "`.`"   shift, and go to state 63
    "`+`"   shift, and go to state 64
    "`?`"   shift, and go to state 65

    $default  reduce using rule 102 (expression-list-any)


State 108

    5 generic-decl: EXTERN VAR identifier "`:`" . type-expr "`;`"

    IDENTIFIER  shift, and go to state 6
    "`(`"       shift, and go to state 74
    "`[`"       shift, and go to state 75
    DBLCOLON    shift, and go to state 17
    BOOL        shift, and go to state 76
    INT         shift, and go to state 77
    FLOAT       shift, and go to state 78

    identifier  go to state 28
    qname       go to state 80
    type-expr   go to state 141


State 109

    6 generic-decl: EXTERN "reserved word `fn`" qname "`(`" . parameter-list-opt "`)`" "`;`"
    7             | EXTERN "reserved word `fn`" qname "`(`" . parameter-list-opt "`)`" "`->`" type-expr "`;`"

    IDENTIFIER           shift, and go to state 72
    INTERNAL_IDENTIFIER  shift, and go to state 73
    "`(`"                shift, and go to state 74
    "`[`"                shift, and go to state 75
    DBLCOLON             shift, and go to state 17
    BOOL                 shift, and go to state 76
    INT                  shift, and go to state 77
    FLOAT                shift, and go to state 78
    "const modifier"     shift, and go to state 79

    $default  reduce using rule 58 (parameter-list-opt)

    identifier           go to state 28
    qname                go to state 80
    parameter-decl-name  go to state 81
    parameter-decl-type  go to state 82
    parameter-decl       go to state 142
    parameter-list-opt   go to state 143
    parameter-list       go to state 144
    type-expr            go to state 87


State 110

   49 parameter-decl-name: IDENTIFIER INTERNAL_IDENTIFIER . "`:`"

    "`:`"  shift, and go to state 145


State 111

   50 parameter-decl-name: IDENTIFIER "`:`" .

    $default  reduce using rule 50 (parameter-decl-name)


State 112

   51 parameter-decl-name: INTERNAL_IDENTIFIER "`:`" .

    $default  reduce using rule 51 (parameter-decl-name)


State 113

   26 identifier: IDENTIFIER .
   47 field-decl: IDENTIFIER . "`:`" type-expr

    "`:`"  shift, and go to state 146

    $default  reduce using rule 26 (identifier)


State 114

   73 type-expr: "`(`" field-list-opt . "`)`"

    "`)`"  shift, and go to state 147


State 115

   44 field-list-opt: field-list .
   46 field-list: field-list . "," field-decl

    ","  shift, and go to state 148

    $default  reduce using rule 44 (field-list-opt)


State 116

   45 field-list: field-decl .

    $default  reduce using rule 45 (field-list)


State 117

   48 field-decl: type-expr .
   74 type-expr: type-expr . "`[`" INTEGER "`]`"
   75          | type-expr . "`|`" type-expr
   76          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 124
    "`[`"   shift, and go to state 126
    "`|`"   shift, and go to state 127

    $default  reduce using rule 48 (field-decl)


State 118

   72 type-expr: "`[`" type-expr . "`]`"
   74          | type-expr . "`[`" INTEGER "`]`"
   75          | type-expr . "`|`" type-expr
   76          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 124
    "`[`"   shift, and go to state 126
    "`]`"   shift, and go to state 149
    "`|`"   shift, and go to state 127


State 119

   52 parameter-decl-type: "const modifier" type-expr . "`...`"
   53                    | "const modifier" type-expr .
   74 type-expr: type-expr . "`[`" INTEGER "`]`"
   75          | type-expr . "`|`" type-expr
   76          | type-expr . "`->`" type-expr

    "`->`"   shift, and go to state 124
    "`...`"  shift, and go to state 150
    "`[`"    shift, and go to state 126
    "`|`"    shift, and go to state 127

    $default  reduce using rule 53 (parameter-decl-type)


State 120

   56 parameter-decl: parameter-decl-name parameter-decl-type .

    $default  reduce using rule 56 (parameter-decl)


State 121

   67 parameter-woa-decl: parameter-decl "`=`" . expression

    STRING                shift, and go to state 5
    IDENTIFIER            shift, and go to state 6
    INTERNAL_IDENTIFIER   shift, and go to state 7
    INTEGER               shift, and go to state 8
    DECIMAL               shift, and go to state 9
    "`(`"                 shift, and go to state 10
    "`[`"                 shift, and go to state 11
    "`.`"                 shift, and go to state 13
    "`!`"                 shift, and go to state 14
    DBLCOLON              shift, and go to state 17
    "reserved word `fn`"  shift, and go to state 35
    "true"                shift, and go to state 22
    "false"               shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 151


State 122

   89 expression: "reserved word `fn`" "`(`" parameter-woa-list-opt "`)`" . "`{`" infunction_declaration_any "`}`"
   90           | "reserved word `fn`" "`(`" parameter-woa-list-opt "`)`" . "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`->`"  shift, and go to state 152
    "`{`"   shift, and go to state 153


State 123

   65 parameter-woa-list: parameter-woa-list "," . parameter-woa-decl

    IDENTIFIER           shift, and go to state 72
    INTERNAL_IDENTIFIER  shift, and go to state 73
    "`(`"                shift, and go to state 74
    "`[`"                shift, and go to state 75
    DBLCOLON             shift, and go to state 17
    BOOL                 shift, and go to state 76
    INT                  shift, and go to state 77
    FLOAT                shift, and go to state 78
    "const modifier"     shift, and go to state 79

    identifier           go to state 28
    qname                go to state 80
    parameter-decl-name  go to state 81
    parameter-decl-type  go to state 82
    parameter-decl       go to state 83
    parameter-woa-decl   go to state 154
    type-expr            go to state 87


State 124

   76 type-expr: type-expr "`->`" . type-expr

    IDENTIFIER  shift, and go to state 6
    "`(`"       shift, and go to state 74
    "`[`"       shift, and go to state 75
    DBLCOLON    shift, and go to state 17
    BOOL        shift, and go to state 76
    INT         shift, and go to state 77
    FLOAT       shift, and go to state 78

    identifier  go to state 28
    qname       go to state 80
    type-expr   go to state 155


State 125

   54 parameter-decl-type: type-expr "`...`" .

    $default  reduce using rule 54 (parameter-decl-type)


State 126

   74 type-expr: type-expr "`[`" . INTEGER "`]`"

    INTEGER  shift, and go to state 156


State 127

   75 type-expr: type-expr "`|`" . type-expr

    IDENTIFIER  shift, and go to state 6
    "`(`"       shift, and go to state 74
    "`[`"       shift, and go to state 75
    DBLCOLON    shift, and go to state 17
    BOOL        shift, and go to state 76
    INT         shift, and go to state 77
    FLOAT       shift, and go to state 78

    identifier  go to state 28
    qname       go to state 80
    type-expr   go to state 157


State 128

   30 fn-decl: "reserved word `fn`" qname "`(`" parameter-woa-list-opt . "`)`" "`{`" infunction_declaration_any "`}`"
   31        | "reserved word `fn`" qname "`(`" parameter-woa-list-opt . "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`)`"  shift, and go to state 158


State 129

   37 case-decl: identifier .

    $default  reduce using rule 37 (case-decl)


State 130

   32 enum-decl: ENUM qname "`{`" case-list-opt . "`}`"

    "`}`"  shift, and go to state 159


State 131

   34 case-list-opt: case-list .
   36 case-list: case-list . "," case-decl

    ","  shift, and go to state 160

    $default  reduce using rule 34 (case-list-opt)


State 132

   35 case-list: case-decl .

    $default  reduce using rule 35 (case-list)


State 133

   29 qname: qname . DBLCOLON identifier
   41 type-extension-list: qname .

    DBLCOLON  shift, and go to state 55

    $default  reduce using rule 41 (type-extension-list)


State 134

   40 type-extension-any: EXTENDS type-extension-list .
   42 type-extension-list: type-extension-list . "," qname

    ","  shift, and go to state 161

    $default  reduce using rule 40 (type-extension-any)


State 135

   38 type-decl: TYPE qname type-extension-any "`{`" . parameter-woa-list-opt "`}`"

    IDENTIFIER           shift, and go to state 72
    INTERNAL_IDENTIFIER  shift, and go to state 73
    "`(`"                shift, and go to state 74
    "`[`"                shift, and go to state 75
    DBLCOLON             shift, and go to state 17
    BOOL                 shift, and go to state 76
    INT                  shift, and go to state 77
    FLOAT                shift, and go to state 78
    "const modifier"     shift, and go to state 79

    $default  reduce using rule 62 (parameter-woa-list-opt)

    identifier              go to state 28
    qname                   go to state 80
    parameter-decl-name     go to state 81
    parameter-decl-type     go to state 82
    parameter-decl          go to state 83
    parameter-woa-list-opt  go to state 162
    parameter-woa-list      go to state 85
    parameter-woa-decl      go to state 86
    type-expr               go to state 87


State 136

   15 let-decl: let-decl-start-with-opt-type "`=`" expression "`;`" .

    $default  reduce using rule 15 (let-decl)


State 137

  107 opt-named-expr: qname "`:`" . expression

    STRING                shift, and go to state 5
    IDENTIFIER            shift, and go to state 6
    INTERNAL_IDENTIFIER   shift, and go to state 7
    INTEGER               shift, and go to state 8
    DECIMAL               shift, and go to state 9
    "`(`"                 shift, and go to state 10
    "`[`"                 shift, and go to state 11
    "`.`"                 shift, and go to state 13
    "`!`"                 shift, and go to state 14
    DBLCOLON              shift, and go to state 17
    "reserved word `fn`"  shift, and go to state 35
    "true"                shift, and go to state 22
    "false"               shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 163


State 138

   77 compound-expression: expression "`(`" opt-named-expr-list-any "`)`" .

    $default  reduce using rule 77 (compound-expression)


State 139

  106 opt-named-expr-list: opt-named-expr-list "," . opt-named-expr

    STRING                shift, and go to state 5
    IDENTIFIER            shift, and go to state 6
    INTERNAL_IDENTIFIER   shift, and go to state 7
    INTEGER               shift, and go to state 8
    DECIMAL               shift, and go to state 9
    "`(`"                 shift, and go to state 10
    "`[`"                 shift, and go to state 11
    "`.`"                 shift, and go to state 13
    "`!`"                 shift, and go to state 14
    DBLCOLON              shift, and go to state 17
    "reserved word `fn`"  shift, and go to state 35
    "true"                shift, and go to state 22
    "false"               shift, and go to state 23

    identifier           go to state 28
    qname                go to state 99
    compound-expression  go to state 36
    expression           go to state 100
    opt-named-expr       go to state 164


State 140

   78 compound-expression: expression "`{`" opt-named-expr-list-any "`}`" .

    $default  reduce using rule 78 (compound-expression)


State 141

    5 generic-decl: EXTERN VAR identifier "`:`" type-expr . "`;`"
   74 type-expr: type-expr . "`[`" INTEGER "`]`"
   75          | type-expr . "`|`" type-expr
   76          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 124
    "`[`"   shift, and go to state 126
    "`;`"   shift, and go to state 165
    "`|`"   shift, and go to state 127


State 142

   60 parameter-list: parameter-decl .

    $default  reduce using rule 60 (parameter-list)


State 143

    6 generic-decl: EXTERN "reserved word `fn`" qname "`(`" parameter-list-opt . "`)`" "`;`"
    7             | EXTERN "reserved word `fn`" qname "`(`" parameter-list-opt . "`)`" "`->`" type-expr "`;`"

    "`)`"  shift, and go to state 166


State 144

   59 parameter-list-opt: parameter-list .
   61 parameter-list: parameter-list . "," parameter-decl

    ","  shift, and go to state 167

    $default  reduce using rule 59 (parameter-list-opt)


State 145

   49 parameter-decl-name: IDENTIFIER INTERNAL_IDENTIFIER "`:`" .

    $default  reduce using rule 49 (parameter-decl-name)


State 146

   47 field-decl: IDENTIFIER "`:`" . type-expr

    IDENTIFIER  shift, and go to state 6
    "`(`"       shift, and go to state 74
    "`[`"       shift, and go to state 75
    DBLCOLON    shift, and go to state 17
    BOOL        shift, and go to state 76
    INT         shift, and go to state 77
    FLOAT       shift, and go to state 78

    identifier  go to state 28
    qname       go to state 80
    type-expr   go to state 168


State 147

   73 type-expr: "`(`" field-list-opt "`)`" .

    $default  reduce using rule 73 (type-expr)


State 148

   46 field-list: field-list "," . field-decl

    IDENTIFIER  shift, and go to state 113
    "`(`"       shift, and go to state 74
    "`[`"       shift, and go to state 75
    DBLCOLON    shift, and go to state 17
    BOOL        shift, and go to state 76
    INT         shift, and go to state 77
    FLOAT       shift, and go to state 78

    identifier  go to state 28
    qname       go to state 80
    field-decl  go to state 169
    type-expr   go to state 117


State 149

   72 type-expr: "`[`" type-expr "`]`" .

    $default  reduce using rule 72 (type-expr)


State 150

   52 parameter-decl-type: "const modifier" type-expr "`...`" .

    $default  reduce using rule 52 (parameter-decl-type)


State 151

   67 parameter-woa-decl: parameter-decl "`=`" expression .
   77 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   78                    | expression . "`{`" opt-named-expr-list-any "`}`"
   79                    | expression . "`=`" expression
   93 expression: expression . "`?`"
   94           | expression . "`.`" identifier
   95           | expression . "`&&`" expression
   96           | expression . "`||`" expression
   97           | expression . "`+`" expression
   98           | expression . "`..`" expression

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`{`"   shift, and go to state 62
    "`.`"   shift, and go to state 63
    "`+`"   shift, and go to state 64
    "`?`"   shift, and go to state 65

    $default  reduce using rule 67 (parameter-woa-decl)


State 152

   90 expression: "reserved word `fn`" "`(`" parameter-woa-list-opt "`)`" "`->`" . type-expr "`{`" infunction_declaration_any "`}`"

    IDENTIFIER  shift, and go to state 6
    "`(`"       shift, and go to state 74
    "`[`"       shift, and go to state 75
    DBLCOLON    shift, and go to state 17
    BOOL        shift, and go to state 76
    INT         shift, and go to state 77
    FLOAT       shift, and go to state 78

    identifier  go to state 28
    qname       go to state 80
    type-expr   go to state 170


State 153

   89 expression: "reserved word `fn`" "`(`" parameter-woa-list-opt "`)`" "`{`" . infunction_declaration_any "`}`"

    $default  reduce using rule 20 (infunction_declaration_any)

    infunction_declaration_any  go to state 171


State 154

   65 parameter-woa-list: parameter-woa-list "," parameter-woa-decl .

    $default  reduce using rule 65 (parameter-woa-list)


State 155

   74 type-expr: type-expr . "`[`" INTEGER "`]`"
   75          | type-expr . "`|`" type-expr
   76          | type-expr . "`->`" type-expr
   76          | type-expr "`->`" type-expr .

    $default  reduce using rule 76 (type-expr)


State 156

   74 type-expr: type-expr "`[`" INTEGER . "`]`"

    "`]`"  shift, and go to state 172


State 157

   74 type-expr: type-expr . "`[`" INTEGER "`]`"
   75          | type-expr . "`|`" type-expr
   75          | type-expr "`|`" type-expr .
   76          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 124
    "`[`"   shift, and go to state 126

    $default  reduce using rule 75 (type-expr)


State 158

   30 fn-decl: "reserved word `fn`" qname "`(`" parameter-woa-list-opt "`)`" . "`{`" infunction_declaration_any "`}`"
   31        | "reserved word `fn`" qname "`(`" parameter-woa-list-opt "`)`" . "`->`" type-expr "`{`" infunction_declaration_any "`}`"

    "`->`"  shift, and go to state 173
    "`{`"   shift, and go to state 174


State 159

   32 enum-decl: ENUM qname "`{`" case-list-opt "`}`" .

    $default  reduce using rule 32 (enum-decl)


State 160

   36 case-list: case-list "," . case-decl

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 129
    case-decl   go to state 175


State 161

   42 type-extension-list: type-extension-list "," . qname

    IDENTIFIER  shift, and go to state 6
    DBLCOLON    shift, and go to state 17

    identifier  go to state 28
    qname       go to state 176


State 162

   38 type-decl: TYPE qname type-extension-any "`{`" parameter-woa-list-opt . "`}`"

    "`}`"  shift, and go to state 177


State 163

   77 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   78                    | expression . "`{`" opt-named-expr-list-any "`}`"
   79                    | expression . "`=`" expression
   93 expression: expression . "`?`"
   94           | expression . "`.`" identifier
   95           | expression . "`&&`" expression
   96           | expression . "`||`" expression
   97           | expression . "`+`" expression
   98           | expression . "`..`" expression
  107 opt-named-expr: qname "`:`" expression .

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`{`"   shift, and go to state 62
    "`.`"   shift, and go to state 63
    "`+`"   shift, and go to state 64
    "`?`"   shift, and go to state 65

    $default  reduce using rule 107 (opt-named-expr)


State 164

  106 opt-named-expr-list: opt-named-expr-list "," opt-named-expr .

    $default  reduce using rule 106 (opt-named-expr-list)


State 165

    5 generic-decl: EXTERN VAR identifier "`:`" type-expr "`;`" .

    $default  reduce using rule 5 (generic-decl)


State 166

    6 generic-decl: EXTERN "reserved word `fn`" qname "`(`" parameter-list-opt "`)`" . "`;`"
    7             | EXTERN "reserved word `fn`" qname "`(`" parameter-list-opt "`)`" . "`->`" type-expr "`;`"

    "`->`"  shift, and go to state 178
    "`;`"   shift, and go to state 179


State 167

   61 parameter-list: parameter-list "," . parameter-decl

    IDENTIFIER           shift, and go to state 72
    INTERNAL_IDENTIFIER  shift, and go to state 73
    "`(`"                shift, and go to state 74
    "`[`"                shift, and go to state 75
    DBLCOLON             shift, and go to state 17
    BOOL                 shift, and go to state 76
    INT                  shift, and go to state 77
    FLOAT                shift, and go to state 78
    "const modifier"     shift, and go to state 79

    identifier           go to state 28
    qname                go to state 80
    parameter-decl-name  go to state 81
    parameter-decl-type  go to state 82
    parameter-decl       go to state 180
    type-expr            go to state 87


State 168

   47 field-decl: IDENTIFIER "`:`" type-expr .
   74 type-expr: type-expr . "`[`" INTEGER "`]`"
   75          | type-expr . "`|`" type-expr
   76          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 124
    "`[`"   shift, and go to state 126
    "`|`"   shift, and go to state 127

    $default  reduce using rule 47 (field-decl)


State 169

   46 field-list: field-list "," field-decl .

    $default  reduce using rule 46 (field-list)


State 170

   74 type-expr: type-expr . "`[`" INTEGER "`]`"
   75          | type-expr . "`|`" type-expr
   76          | type-expr . "`->`" type-expr
   90 expression: "reserved word `fn`" "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr . "`{`" infunction_declaration_any "`}`"

    "`->`"  shift, and go to state 124
    "`{`"   shift, and go to state 181
    "`[`"   shift, and go to state 126
    "`|`"   shift, and go to state 127


State 171

   21 infunction_declaration_any: infunction_declaration_any . "`;`"
   22                           | infunction_declaration_any . opt-infunction-decl
   89 expression: "reserved word `fn`" "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any . "`}`"

    STRING                shift, and go to state 5
    IDENTIFIER            shift, and go to state 6
    INTERNAL_IDENTIFIER   shift, and go to state 7
    INTEGER               shift, and go to state 8
    DECIMAL               shift, and go to state 9
    "`(`"                 shift, and go to state 10
    "`}`"                 shift, and go to state 182
    "`[`"                 shift, and go to state 11
    "`;`"                 shift, and go to state 183
    "`.`"                 shift, and go to state 13
    "`!`"                 shift, and go to state 14
    LET                   shift, and go to state 15
    RETURN                shift, and go to state 184
    DBLCOLON              shift, and go to state 17
    "reserved word `fn`"  shift, and go to state 35
    "true"                shift, and go to state 22
    "false"               shift, and go to state 23

    let-decl                      go to state 185
    let-decl-start                go to state 26
    let-decl-start-with-opt-type  go to state 27
    opt-infunction-decl           go to state 186
    identifier                    go to state 28
    qname                         go to state 29
    compound-expression           go to state 187
    expression                    go to state 34


State 172

   74 type-expr: type-expr "`[`" INTEGER "`]`" .

    $default  reduce using rule 74 (type-expr)


State 173

   31 fn-decl: "reserved word `fn`" qname "`(`" parameter-woa-list-opt "`)`" "`->`" . type-expr "`{`" infunction_declaration_any "`}`"

    IDENTIFIER  shift, and go to state 6
    "`(`"       shift, and go to state 74
    "`[`"       shift, and go to state 75
    DBLCOLON    shift, and go to state 17
    BOOL        shift, and go to state 76
    INT         shift, and go to state 77
    FLOAT       shift, and go to state 78

    identifier  go to state 28
    qname       go to state 80
    type-expr   go to state 188


State 174

   30 fn-decl: "reserved word `fn`" qname "`(`" parameter-woa-list-opt "`)`" "`{`" . infunction_declaration_any "`}`"

    $default  reduce using rule 20 (infunction_declaration_any)

    infunction_declaration_any  go to state 189


State 175

   36 case-list: case-list "," case-decl .

    $default  reduce using rule 36 (case-list)


State 176

   29 qname: qname . DBLCOLON identifier
   42 type-extension-list: type-extension-list "," qname .

    DBLCOLON  shift, and go to state 55

    $default  reduce using rule 42 (type-extension-list)


State 177

   38 type-decl: TYPE qname type-extension-any "`{`" parameter-woa-list-opt "`}`" .

    $default  reduce using rule 38 (type-decl)


State 178

    7 generic-decl: EXTERN "reserved word `fn`" qname "`(`" parameter-list-opt "`)`" "`->`" . type-expr "`;`"

    IDENTIFIER  shift, and go to state 6
    "`(`"       shift, and go to state 74
    "`[`"       shift, and go to state 75
    DBLCOLON    shift, and go to state 17
    BOOL        shift, and go to state 76
    INT         shift, and go to state 77
    FLOAT       shift, and go to state 78

    identifier  go to state 28
    qname       go to state 80
    type-expr   go to state 190


State 179

    6 generic-decl: EXTERN "reserved word `fn`" qname "`(`" parameter-list-opt "`)`" "`;`" .

    $default  reduce using rule 6 (generic-decl)


State 180

   61 parameter-list: parameter-list "," parameter-decl .

    $default  reduce using rule 61 (parameter-list)


State 181

   90 expression: "reserved word `fn`" "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" . infunction_declaration_any "`}`"

    $default  reduce using rule 20 (infunction_declaration_any)

    infunction_declaration_any  go to state 191


State 182

   89 expression: "reserved word `fn`" "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`" .

    $default  reduce using rule 89 (expression)


State 183

   21 infunction_declaration_any: infunction_declaration_any "`;`" .

    $default  reduce using rule 21 (infunction_declaration_any)


State 184

   24 opt-infunction-decl: RETURN . expression "`;`"

    STRING                shift, and go to state 5
    IDENTIFIER            shift, and go to state 6
    INTERNAL_IDENTIFIER   shift, and go to state 7
    INTEGER               shift, and go to state 8
    DECIMAL               shift, and go to state 9
    "`(`"                 shift, and go to state 10
    "`[`"                 shift, and go to state 11
    "`.`"                 shift, and go to state 13
    "`!`"                 shift, and go to state 14
    DBLCOLON              shift, and go to state 17
    "reserved word `fn`"  shift, and go to state 35
    "true"                shift, and go to state 22
    "false"               shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 36
    expression           go to state 192


State 185

   23 opt-infunction-decl: let-decl .

    $default  reduce using rule 23 (opt-infunction-decl)


State 186

   22 infunction_declaration_any: infunction_declaration_any opt-infunction-decl .

    $default  reduce using rule 22 (infunction_declaration_any)


State 187

   25 opt-infunction-decl: compound-expression . "`;`"
   99 expression: compound-expression .

    "`;`"  shift, and go to state 193

    $default  reduce using rule 99 (expression)


State 188

   31 fn-decl: "reserved word `fn`" qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr . "`{`" infunction_declaration_any "`}`"
   74 type-expr: type-expr . "`[`" INTEGER "`]`"
   75          | type-expr . "`|`" type-expr
   76          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 124
    "`{`"   shift, and go to state 194
    "`[`"   shift, and go to state 126
    "`|`"   shift, and go to state 127


State 189

   21 infunction_declaration_any: infunction_declaration_any . "`;`"
   22                           | infunction_declaration_any . opt-infunction-decl
   30 fn-decl: "reserved word `fn`" qname "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any . "`}`"

    STRING                shift, and go to state 5
    IDENTIFIER            shift, and go to state 6
    INTERNAL_IDENTIFIER   shift, and go to state 7
    INTEGER               shift, and go to state 8
    DECIMAL               shift, and go to state 9
    "`(`"                 shift, and go to state 10
    "`}`"                 shift, and go to state 195
    "`[`"                 shift, and go to state 11
    "`;`"                 shift, and go to state 183
    "`.`"                 shift, and go to state 13
    "`!`"                 shift, and go to state 14
    LET                   shift, and go to state 15
    RETURN                shift, and go to state 184
    DBLCOLON              shift, and go to state 17
    "reserved word `fn`"  shift, and go to state 35
    "true"                shift, and go to state 22
    "false"               shift, and go to state 23

    let-decl                      go to state 185
    let-decl-start                go to state 26
    let-decl-start-with-opt-type  go to state 27
    opt-infunction-decl           go to state 186
    identifier                    go to state 28
    qname                         go to state 29
    compound-expression           go to state 187
    expression                    go to state 34


State 190

    7 generic-decl: EXTERN "reserved word `fn`" qname "`(`" parameter-list-opt "`)`" "`->`" type-expr . "`;`"
   74 type-expr: type-expr . "`[`" INTEGER "`]`"
   75          | type-expr . "`|`" type-expr
   76          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 124
    "`[`"   shift, and go to state 126
    "`;`"   shift, and go to state 196
    "`|`"   shift, and go to state 127


State 191

   21 infunction_declaration_any: infunction_declaration_any . "`;`"
   22                           | infunction_declaration_any . opt-infunction-decl
   90 expression: "reserved word `fn`" "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any . "`}`"

    STRING                shift, and go to state 5
    IDENTIFIER            shift, and go to state 6
    INTERNAL_IDENTIFIER   shift, and go to state 7
    INTEGER               shift, and go to state 8
    DECIMAL               shift, and go to state 9
    "`(`"                 shift, and go to state 10
    "`}`"                 shift, and go to state 197
    "`[`"                 shift, and go to state 11
    "`;`"                 shift, and go to state 183
    "`.`"                 shift, and go to state 13
    "`!`"                 shift, and go to state 14
    LET                   shift, and go to state 15
    RETURN                shift, and go to state 184
    DBLCOLON              shift, and go to state 17
    "reserved word `fn`"  shift, and go to state 35
    "true"                shift, and go to state 22
    "false"               shift, and go to state 23

    let-decl                      go to state 185
    let-decl-start                go to state 26
    let-decl-start-with-opt-type  go to state 27
    opt-infunction-decl           go to state 186
    identifier                    go to state 28
    qname                         go to state 29
    compound-expression           go to state 187
    expression                    go to state 34


State 192

   24 opt-infunction-decl: RETURN expression . "`;`"
   77 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   78                    | expression . "`{`" opt-named-expr-list-any "`}`"
   79                    | expression . "`=`" expression
   93 expression: expression . "`?`"
   94           | expression . "`.`" identifier
   95           | expression . "`&&`" expression
   96           | expression . "`||`" expression
   97           | expression . "`+`" expression
   98           | expression . "`..`" expression

    "`=`"   shift, and go to state 57
    "`&&`"  shift, and go to state 58
    "`||`"  shift, and go to state 59
    "`..`"  shift, and go to state 60
    "`(`"   shift, and go to state 61
    "`{`"   shift, and go to state 62
    "`;`"   shift, and go to state 198
    "`.`"   shift, and go to state 63
    "`+`"   shift, and go to state 64
    "`?`"   shift, and go to state 65


State 193

   25 opt-infunction-decl: compound-expression "`;`" .

    $default  reduce using rule 25 (opt-infunction-decl)


State 194

   31 fn-decl: "reserved word `fn`" qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" . infunction_declaration_any "`}`"

    $default  reduce using rule 20 (infunction_declaration_any)

    infunction_declaration_any  go to state 199


State 195

   30 fn-decl: "reserved word `fn`" qname "`(`" parameter-woa-list-opt "`)`" "`{`" infunction_declaration_any "`}`" .

    $default  reduce using rule 30 (fn-decl)


State 196

    7 generic-decl: EXTERN "reserved word `fn`" qname "`(`" parameter-list-opt "`)`" "`->`" type-expr "`;`" .

    $default  reduce using rule 7 (generic-decl)


State 197

   90 expression: "reserved word `fn`" "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`" .

    $default  reduce using rule 90 (expression)


State 198

   24 opt-infunction-decl: RETURN expression "`;`" .

    $default  reduce using rule 24 (opt-infunction-decl)


State 199

   21 infunction_declaration_any: infunction_declaration_any . "`;`"
   22                           | infunction_declaration_any . opt-infunction-decl
   31 fn-decl: "reserved word `fn`" qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any . "`}`"

    STRING                shift, and go to state 5
    IDENTIFIER            shift, and go to state 6
    INTERNAL_IDENTIFIER   shift, and go to state 7
    INTEGER               shift, and go to state 8
    DECIMAL               shift, and go to state 9
    "`(`"                 shift, and go to state 10
    "`}`"                 shift, and go to state 200
    "`[`"                 shift, and go to state 11
    "`;`"                 shift, and go to state 183
    "`.`"                 shift, and go to state 13
    "`!`"                 shift, and go to state 14
    LET                   shift, and go to state 15
    RETURN                shift, and go to state 184
    DBLCOLON              shift, and go to state 17
    "reserved word `fn`"  shift, and go to state 35
    "true"                shift, and go to state 22
    "false"               shift, and go to state 23

    let-decl                      go to state 185
    let-decl-start                go to state 26
    let-decl-start-with-opt-type  go to state 27
    opt-infunction-decl           go to state 186
    identifier                    go to state 28
    qname                         go to state 29
    compound-expression           go to state 187
    expression                    go to state 34


State 200

   31 fn-decl: "reserved word `fn`" qname "`(`" parameter-woa-list-opt "`)`" "`->`" type-expr "`{`" infunction_declaration_any "`}`" .

    $default  reduce using rule 31 (fn-decl)
