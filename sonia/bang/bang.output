Nonterminals useless in grammar

    type-decl
    type-extension-any
    type-extension-list
    parameter-woa-list-opt
    parameter-woa-list
    parameter-woa-decl


Terminals unused in grammar

    COMMENT_BEGIN
    COMMENT_END
    OPERATOR_TERM
    "`_`"
    "`->*`"
    "`~>`"
    "`.*`"
    "`++`"
    "`--`"
    "`<<`"
    "`>>`"
    "`<=`"
    "`>=`"
    "`+=`"
    "`-=`"
    "`*=`"
    "`/=`"
    "`%=`"
    "`<<=`"
    "`>>=`"
    "`&=`"
    "`|=`"
    "`^=`"
    "`<`"
    "`>`"
    "`-`"
    "`*`"
    "`/`"
    "`%`"
    "`&`"
    "`~`"
    "`^`"
    "`$`"
    "`#`"
    FOR
    VOID_
    AUTO
    CONST_
    USING
    THROW
    DELETE_
    SIZEOF
    LOWEST
    TYPE
    EXTENDS
    INT
    FLOAT


Rules useless in grammar

  108 type-decl: TYPE qname type-extension-any "`{`" parameter-woa-list-opt "`}`"

  109 type-extension-any: %empty
  110                   | EXTENDS type-extension-list

  111 type-extension-list: qname
  112                    | type-extension-list "," qname

  113 parameter-woa-list-opt: %empty
  114                       | parameter-woa-list

  115 parameter-woa-list: parameter-woa-decl
  116                   | parameter-woa-list "," parameter-woa-decl

  117 parameter-woa-decl: parameter-decl
  118                   | parameter-decl "`=`" expression


Grammar

    0 $accept: begin "end of file"

    1 begin: declaration_any "end of file"

    2 declaration_any: %empty
    3                | declaration_any "`;`"
    4                | declaration_any generic-decl

    5 generic-decl: EXTERN VAR identifier "`:`" type-expr "`;`"
    6             | EXTERN fn-decl "`;`"
    7             | INCLUDE STRING
    8             | enum-decl
    9             | fn-decl "`{`" infunction_declaration_any "`}`"
   10             | let-decl
   11             | compound-expression "`;`"

   12 let-decl: let-decl-start-with-opt-type "`;`"
   13         | let-decl-start-with-opt-type "`=`" expression "`;`"

   14 let-decl-start: LET identifier
   15               | LET "weak modifier" identifier

   16 let-decl-start-with-opt-type: let-decl-start
   17                             | let-decl-start "`:`" type-expr

   18 infunction_declaration_any: %empty
   19                           | infunction_declaration_any "`;`"
   20                           | infunction_declaration_any opt-infunction-decl

   21 opt-infunction-decl: let-decl
   22                    | RETURN expression "`;`"
   23                    | compound-expression "`;`"

   24 identifier: IDENTIFIER

   25 qname: "`::`" identifier
   26      | identifier
   27      | qname "`::`" identifier

   28 fn-decl: "`fn`" qname "`(`" parameter-list-opt "`)`"
   29        | "`fn`" qname "`(`" parameter-list-opt "`)`" "`->`" syntax-expression

   30 enum-decl: ENUM qname "`{`" case-list-opt "`}`"

   31 case-list-opt: %empty
   32              | case-list

   33 case-list: case-decl
   34          | case-list "," case-decl

   35 case-decl: identifier

   36 field-list-opt: %empty
   37               | field-list

   38 field-list: field-decl
   39           | field-list "," field-decl

   40 field-decl: IDENTIFIER "`:`" type-expr
   41           | type-expr

   42 parameter-name-decl: IDENTIFIER INTERNAL_IDENTIFIER "`:`"
   43                    | IDENTIFIER "`:`"
   44                    | INTERNAL_IDENTIFIER "`:`"

   45 parameter-constraint-modifier: TYPENAME
   46                              | "const modifier"

   47 parameter-constraint-modifier-opt: parameter-constraint-modifier
   48                                  | %empty

   49 parameter-constraint-set: syntax-expression-wo-ii
   50                         | INTERNAL_IDENTIFIER
   51                         | concept-expression
   52                         | parameter-constraint-set INTERNAL_IDENTIFIER
   53                         | parameter-constraint-set concept-expression

   54 concept-expression: "`@`" qname

   55 syntax-expression-wo-ii: RESERVED_IDENTIFIER
   56                        | qname
   57                        | syntax-expression "`...`"

   58 syntax-expression: INTERNAL_IDENTIFIER
   59                  | syntax-expression-wo-ii

   60 parameter-decl: parameter-name-decl parameter-constraint-modifier-opt parameter-constraint-set
   61               | parameter-constraint-modifier parameter-constraint-set
   62               | parameter-constraint-set

   63 parameter-list-opt: %empty
   64                   | parameter-list

   65 parameter-list: parameter-decl
   66               | parameter-list "," parameter-decl

   67 type-expr: qname
   68          | qname "`(`" opt-named-expr-list-any "`)`"
   69          | INTERNAL_IDENTIFIER
   70          | INTERNAL_IDENTIFIER "`(`" opt-named-expr-list-any "`)`"
   71          | "`[`" type-expr "`]`"
   72          | "`(`" field-list-opt "`)`"
   73          | type-expr "`[`" INTEGER "`]`"
   74          | type-expr "`|`" type-expr
   75          | type-expr "`->`" type-expr

   76 compound-expression: expression "`(`" opt-named-expr-list-any "`)`"
   77                    | expression "`{`" opt-named-expr-list-any "`}`"

   78 expression: "true"
   79           | "false"
   80           | INTEGER
   81           | DECIMAL
   82           | STRING
   83           | "`.`" identifier
   84           | qname
   85           | INTERNAL_IDENTIFIER
   86           | RESERVED_IDENTIFIER
   87           | "`(`" expression "`)`"
   88           | "`[`" expression-list-any "`]`"
   89           | "`!`" expression
   90           | expression "`?`"
   91           | expression "`.`" identifier
   92           | expression "`&&`" expression
   93           | expression "`||`" expression
   94           | expression "`+`" expression
   95           | expression "`..`" expression
   96           | expression "`==`" expression
   97           | expression "`!=`" expression
   98           | compound-expression

   99 expression-list-any: %empty
  100                    | expression
  101                    | expression-list-any "," expression

  102 opt-named-expr-list-any: %empty
  103                        | opt-named-expr-list

  104 opt-named-expr-list: opt-named-expr
  105                    | opt-named-expr-list "," opt-named-expr

  106 opt-named-expr: qname "`:`" expression
  107               | expression


Terminals, with rules where they appear

    "end of file" (0) 0 1
    error (256)
    COMMENT_BEGIN (258)
    COMMENT_END (259)
    STRING <sonia::lang::bang::annotated_string_view> (260) 7 82
    IDENTIFIER <sonia::lang::bang::annotated_string_view> (261) 24 40 42 43
    INTERNAL_IDENTIFIER <sonia::lang::bang::annotated_string_view> (262) 42 44 50 52 58 69 70 85
    RESERVED_IDENTIFIER <sonia::lang::bang::annotated_string_view> (263) 55 86
    INTEGER <sonia::lang::bang::annotated_decimal> (264) 73 80
    DECIMAL <sonia::lang::bang::annotated_decimal> (265) 81
    OPERATOR_TERM <sonia::string_view> (266)
    "`=`" <sonia::lang::lex::resource_location> (267) 13
    "`@`" (268) 54
    "`_`" (269)
    "`->*`" (270)
    "`->`" (271) 29 75
    "`~>`" (272)
    "`.*`" (273)
    "`++`" (274)
    "`--`" (275)
    "`<<`" (276)
    "`>>`" (277)
    "`<=`" (278)
    "`>=`" (279)
    "`==`" <sonia::lang::lex::resource_location> (280) 96
    "`!=`" <sonia::lang::lex::resource_location> (281) 97
    "`&&`" <sonia::lang::lex::resource_location> (282) 92
    "`||`" <sonia::lang::lex::resource_location> (283) 93
    "`..`" <sonia::lang::lex::resource_location> (284) 95
    "`...`" <sonia::lang::lex::resource_location> (285) 57
    "`+=`" (286)
    "`-=`" (287)
    "`*=`" (288)
    "`/=`" (289)
    "`%=`" (290)
    "`<<=`" (291)
    "`>>=`" (292)
    "`&=`" (293)
    "`|=`" (294)
    "`^=`" (295)
    "`:`" (296) 5 17 40 42 43 44 106
    "`::`" (297) 25 27
    "`(`" <sonia::lang::lex::resource_location> (298) 28 29 68 70 72 76 87
    "`)`" (299) 28 29 68 70 72 76 87
    "`{`" <sonia::lang::lex::resource_location> (300) 9 30 77
    "`}`" (301) 9 30 77
    "`[`" <sonia::lang::lex::resource_location> (302) 71 73 88
    "`]`" (303) 71 73 88
    "`<`" (304)
    "`>`" (305)
    "`;`" (306) 3 5 6 11 12 13 19 22 23
    "`.`" <sonia::lang::lex::resource_location> (307) 83 91
    "`+`" <sonia::lang::lex::resource_location> (308) 94
    "`-`" (309)
    "`*`" (310)
    "`/`" (311)
    "`%`" (312)
    "`&`" (313)
    "`|`" (314) 74
    "`!`" <sonia::lang::lex::resource_location> (315) 89
    "`~`" (316)
    "`^`" (317)
    "," (318) 34 39 66 101 105
    "`$`" (319)
    "`?`" (320) 90
    "`#`" (321)
    LET (322) 14 15
    VAR (323) 5
    RETURN (324) 22
    EXTERN (325) 5 6
    FOR (326)
    VOID_ (327)
    AUTO (328)
    CONST_ (329)
    USING (330)
    THROW (331)
    DELETE_ (332)
    SIZEOF (333)
    LOWEST (334)
    INCLUDE (335) 7
    "`fn`" <sonia::lang::lex::resource_location> (336) 28 29
    ENUM (337) 30
    TYPE (338)
    EXTENDS (339)
    TYPENAME (340) 45
    INT (341)
    FLOAT (342)
    "weak modifier" (343) 15
    "const modifier" (344) 46
    "true" <sonia::lang::lex::resource_location> (345) 78
    "false" <sonia::lang::lex::resource_location> (346) 79


Nonterminals, with rules where they appear

    $accept (92)
        on left: 0
    begin (93)
        on left: 1
        on right: 0
    declaration_any <declaration_set_t> (94)
        on left: 2 3 4
        on right: 1 3 4
    generic-decl <generic_declaration_t> (95)
        on left: 5 6 7 8 9 10 11
        on right: 4
    let-decl <let_statement_decl_t> (96)
        on left: 12 13
        on right: 10 21
    let-decl-start <let_statement_decl_t> (97)
        on left: 14 15
        on right: 16 17
    let-decl-start-with-opt-type <let_statement_decl_t> (98)
        on left: 16 17
        on right: 12 13
    infunction_declaration_any <std::vector<infunction_declaration_t>> (99)
        on left: 18 19 20
        on right: 9 19 20
    opt-infunction-decl <infunction_declaration_t> (100)
        on left: 21 22 23
        on right: 20
    identifier <sonia::lang::bang::annotated_identifier> (101)
        on left: 24
        on right: 5 14 15 25 26 27 35 83 91
    qname <sonia::lang::bang::annotated_qname> (102)
        on left: 25 26 27
        on right: 27 28 29 30 54 56 67 68 84 106
    fn-decl <fn_pure_t> (103)
        on left: 28 29
        on right: 6 9
    enum-decl <enum_decl> (104)
        on left: 30
        on right: 8
    case-list-opt <std::vector<sonia::lang::bang::identifier>> (105)
        on left: 31 32
        on right: 30
    case-list <std::vector<sonia::lang::bang::identifier>> (106)
        on left: 33 34
        on right: 32 34
    case-decl <sonia::lang::bang::identifier> (107)
        on left: 35
        on right: 33 34
    field-list-opt <field_list_t> (108)
        on left: 36 37
        on right: 72
    field-list <field_list_t> (109)
        on left: 38 39
        on right: 37 39
    field-decl <field_t> (110)
        on left: 40 41
        on right: 38 39
    parameter-name-decl <parameter_name> (111)
        on left: 42 43 44
        on right: 60
    parameter-constraint-modifier <parameter_constraint_modifier_t> (112)
        on left: 45 46
        on right: 47 61
    parameter-constraint-modifier-opt <parameter_constraint_modifier_t> (113)
        on left: 47 48
        on right: 60
    parameter-constraint-set <parameter_constraint_set_t> (114)
        on left: 49 50 51 52 53
        on right: 52 53 60 61 62
    concept-expression <syntax_expression_t> (115)
        on left: 54
        on right: 51 53
    syntax-expression-wo-ii <syntax_expression_t> (116)
        on left: 55 56 57
        on right: 49 59
    syntax-expression <syntax_expression_t> (117)
        on left: 58 59
        on right: 29 57
    parameter-decl <parameter_t> (118)
        on left: 60 61 62
        on right: 65 66
    parameter-list-opt <parameter_woa_list_t> (119)
        on left: 63 64
        on right: 28 29
    parameter-list <parameter_woa_list_t> (120)
        on left: 65 66
        on right: 64 66
    type-expr <bang_preliminary_type> (121)
        on left: 67 68 69 70 71 72 73 74 75
        on right: 5 17 40 41 71 73 74 75
    compound-expression <syntax_expression_t> (122)
        on left: 76 77
        on right: 11 23 98
    expression <syntax_expression_t> (123)
        on left: 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98
        on right: 13 22 76 77 87 89 90 91 92 93 94 95 96 97 100 101 106 107
    expression-list-any <expression_list_t> (124)
        on left: 99 100 101
        on right: 88 101
    opt-named-expr-list-any <named_expression_term_list_t> (125)
        on left: 102 103
        on right: 68 70 76 77
    opt-named-expr-list <named_expression_term_list_t> (126)
        on left: 104 105
        on right: 103 105
    opt-named-expr <named_expression_term_t> (127)
        on left: 106 107
        on right: 104 105


State 0

    0 $accept: . begin "end of file"

    $default  reduce using rule 2 (declaration_any)

    begin            go to state 1
    declaration_any  go to state 2


State 1

    0 $accept: begin . "end of file"

    "end of file"  shift, and go to state 3


State 2

    1 begin: declaration_any . "end of file"
    3 declaration_any: declaration_any . "`;`"
    4                | declaration_any . generic-decl

    "end of file"        shift, and go to state 4
    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`[`"                shift, and go to state 13
    "`;`"                shift, and go to state 14
    "`.`"                shift, and go to state 15
    "`!`"                shift, and go to state 16
    LET                  shift, and go to state 17
    EXTERN               shift, and go to state 18
    INCLUDE              shift, and go to state 19
    "`fn`"               shift, and go to state 20
    ENUM                 shift, and go to state 21
    "true"               shift, and go to state 22
    "false"              shift, and go to state 23

    generic-decl                  go to state 24
    let-decl                      go to state 25
    let-decl-start                go to state 26
    let-decl-start-with-opt-type  go to state 27
    identifier                    go to state 28
    qname                         go to state 29
    fn-decl                       go to state 30
    enum-decl                     go to state 31
    compound-expression           go to state 32
    expression                    go to state 33


State 3

    0 $accept: begin "end of file" .

    $default  accept


State 4

    1 begin: declaration_any "end of file" .

    $default  reduce using rule 1 (begin)


State 5

   82 expression: STRING .

    $default  reduce using rule 82 (expression)


State 6

   24 identifier: IDENTIFIER .

    $default  reduce using rule 24 (identifier)


State 7

   85 expression: INTERNAL_IDENTIFIER .

    $default  reduce using rule 85 (expression)


State 8

   86 expression: RESERVED_IDENTIFIER .

    $default  reduce using rule 86 (expression)


State 9

   80 expression: INTEGER .

    $default  reduce using rule 80 (expression)


State 10

   81 expression: DECIMAL .

    $default  reduce using rule 81 (expression)


State 11

   25 qname: "`::`" . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 34


State 12

   87 expression: "`(`" . expression "`)`"

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`[`"                shift, and go to state 13
    "`.`"                shift, and go to state 15
    "`!`"                shift, and go to state 16
    "true"               shift, and go to state 22
    "false"              shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 35
    expression           go to state 36


State 13

   88 expression: "`[`" . expression-list-any "`]`"

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`[`"                shift, and go to state 13
    "`.`"                shift, and go to state 15
    "`!`"                shift, and go to state 16
    "true"               shift, and go to state 22
    "false"              shift, and go to state 23

    $default  reduce using rule 99 (expression-list-any)

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 35
    expression           go to state 37
    expression-list-any  go to state 38


State 14

    3 declaration_any: declaration_any "`;`" .

    $default  reduce using rule 3 (declaration_any)


State 15

   83 expression: "`.`" . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 39


State 16

   89 expression: "`!`" . expression

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`[`"                shift, and go to state 13
    "`.`"                shift, and go to state 15
    "`!`"                shift, and go to state 16
    "true"               shift, and go to state 22
    "false"              shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 35
    expression           go to state 40


State 17

   14 let-decl-start: LET . identifier
   15               | LET . "weak modifier" identifier

    IDENTIFIER       shift, and go to state 6
    "weak modifier"  shift, and go to state 41

    identifier  go to state 42


State 18

    5 generic-decl: EXTERN . VAR identifier "`:`" type-expr "`;`"
    6             | EXTERN . fn-decl "`;`"

    VAR     shift, and go to state 43
    "`fn`"  shift, and go to state 20

    fn-decl  go to state 44


State 19

    7 generic-decl: INCLUDE . STRING

    STRING  shift, and go to state 45


State 20

   28 fn-decl: "`fn`" . qname "`(`" parameter-list-opt "`)`"
   29        | "`fn`" . qname "`(`" parameter-list-opt "`)`" "`->`" syntax-expression

    IDENTIFIER  shift, and go to state 6
    "`::`"      shift, and go to state 11

    identifier  go to state 28
    qname       go to state 46


State 21

   30 enum-decl: ENUM . qname "`{`" case-list-opt "`}`"

    IDENTIFIER  shift, and go to state 6
    "`::`"      shift, and go to state 11

    identifier  go to state 28
    qname       go to state 47


State 22

   78 expression: "true" .

    $default  reduce using rule 78 (expression)


State 23

   79 expression: "false" .

    $default  reduce using rule 79 (expression)


State 24

    4 declaration_any: declaration_any generic-decl .

    $default  reduce using rule 4 (declaration_any)


State 25

   10 generic-decl: let-decl .

    $default  reduce using rule 10 (generic-decl)


State 26

   16 let-decl-start-with-opt-type: let-decl-start .
   17                             | let-decl-start . "`:`" type-expr

    "`:`"  shift, and go to state 48

    $default  reduce using rule 16 (let-decl-start-with-opt-type)


State 27

   12 let-decl: let-decl-start-with-opt-type . "`;`"
   13         | let-decl-start-with-opt-type . "`=`" expression "`;`"

    "`=`"  shift, and go to state 49
    "`;`"  shift, and go to state 50


State 28

   26 qname: identifier .

    $default  reduce using rule 26 (qname)


State 29

   27 qname: qname . "`::`" identifier
   84 expression: qname .

    "`::`"  shift, and go to state 51

    $default  reduce using rule 84 (expression)


State 30

    9 generic-decl: fn-decl . "`{`" infunction_declaration_any "`}`"

    "`{`"  shift, and go to state 52


State 31

    8 generic-decl: enum-decl .

    $default  reduce using rule 8 (generic-decl)


State 32

   11 generic-decl: compound-expression . "`;`"
   98 expression: compound-expression .

    "`;`"  shift, and go to state 53

    $default  reduce using rule 98 (expression)


State 33

   76 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   77                    | expression . "`{`" opt-named-expr-list-any "`}`"
   90 expression: expression . "`?`"
   91           | expression . "`.`" identifier
   92           | expression . "`&&`" expression
   93           | expression . "`||`" expression
   94           | expression . "`+`" expression
   95           | expression . "`..`" expression
   96           | expression . "`==`" expression
   97           | expression . "`!=`" expression

    "`==`"  shift, and go to state 54
    "`!=`"  shift, and go to state 55
    "`&&`"  shift, and go to state 56
    "`||`"  shift, and go to state 57
    "`..`"  shift, and go to state 58
    "`(`"   shift, and go to state 59
    "`{`"   shift, and go to state 60
    "`.`"   shift, and go to state 61
    "`+`"   shift, and go to state 62
    "`?`"   shift, and go to state 63


State 34

   25 qname: "`::`" identifier .

    $default  reduce using rule 25 (qname)


State 35

   98 expression: compound-expression .

    $default  reduce using rule 98 (expression)


State 36

   76 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   77                    | expression . "`{`" opt-named-expr-list-any "`}`"
   87 expression: "`(`" expression . "`)`"
   90           | expression . "`?`"
   91           | expression . "`.`" identifier
   92           | expression . "`&&`" expression
   93           | expression . "`||`" expression
   94           | expression . "`+`" expression
   95           | expression . "`..`" expression
   96           | expression . "`==`" expression
   97           | expression . "`!=`" expression

    "`==`"  shift, and go to state 54
    "`!=`"  shift, and go to state 55
    "`&&`"  shift, and go to state 56
    "`||`"  shift, and go to state 57
    "`..`"  shift, and go to state 58
    "`(`"   shift, and go to state 59
    "`)`"   shift, and go to state 64
    "`{`"   shift, and go to state 60
    "`.`"   shift, and go to state 61
    "`+`"   shift, and go to state 62
    "`?`"   shift, and go to state 63


State 37

   76 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   77                    | expression . "`{`" opt-named-expr-list-any "`}`"
   90 expression: expression . "`?`"
   91           | expression . "`.`" identifier
   92           | expression . "`&&`" expression
   93           | expression . "`||`" expression
   94           | expression . "`+`" expression
   95           | expression . "`..`" expression
   96           | expression . "`==`" expression
   97           | expression . "`!=`" expression
  100 expression-list-any: expression .

    "`==`"  shift, and go to state 54
    "`!=`"  shift, and go to state 55
    "`&&`"  shift, and go to state 56
    "`||`"  shift, and go to state 57
    "`..`"  shift, and go to state 58
    "`(`"   shift, and go to state 59
    "`{`"   shift, and go to state 60
    "`.`"   shift, and go to state 61
    "`+`"   shift, and go to state 62
    "`?`"   shift, and go to state 63

    $default  reduce using rule 100 (expression-list-any)


State 38

   88 expression: "`[`" expression-list-any . "`]`"
  101 expression-list-any: expression-list-any . "," expression

    "`]`"  shift, and go to state 65
    ","    shift, and go to state 66


State 39

   83 expression: "`.`" identifier .

    $default  reduce using rule 83 (expression)


State 40

   76 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   77                    | expression . "`{`" opt-named-expr-list-any "`}`"
   89 expression: "`!`" expression .
   90           | expression . "`?`"
   91           | expression . "`.`" identifier
   92           | expression . "`&&`" expression
   93           | expression . "`||`" expression
   94           | expression . "`+`" expression
   95           | expression . "`..`" expression
   96           | expression . "`==`" expression
   97           | expression . "`!=`" expression

    "`(`"  shift, and go to state 59
    "`{`"  shift, and go to state 60
    "`.`"  shift, and go to state 61
    "`?`"  shift, and go to state 63

    $default  reduce using rule 89 (expression)


State 41

   15 let-decl-start: LET "weak modifier" . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 67


State 42

   14 let-decl-start: LET identifier .

    $default  reduce using rule 14 (let-decl-start)


State 43

    5 generic-decl: EXTERN VAR . identifier "`:`" type-expr "`;`"

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 68


State 44

    6 generic-decl: EXTERN fn-decl . "`;`"

    "`;`"  shift, and go to state 69


State 45

    7 generic-decl: INCLUDE STRING .

    $default  reduce using rule 7 (generic-decl)


State 46

   27 qname: qname . "`::`" identifier
   28 fn-decl: "`fn`" qname . "`(`" parameter-list-opt "`)`"
   29        | "`fn`" qname . "`(`" parameter-list-opt "`)`" "`->`" syntax-expression

    "`::`"  shift, and go to state 51
    "`(`"   shift, and go to state 70


State 47

   27 qname: qname . "`::`" identifier
   30 enum-decl: ENUM qname . "`{`" case-list-opt "`}`"

    "`::`"  shift, and go to state 51
    "`{`"   shift, and go to state 71


State 48

   17 let-decl-start-with-opt-type: let-decl-start "`:`" . type-expr

    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 72
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 73
    "`[`"                shift, and go to state 74

    identifier  go to state 28
    qname       go to state 75
    type-expr   go to state 76


State 49

   13 let-decl: let-decl-start-with-opt-type "`=`" . expression "`;`"

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`[`"                shift, and go to state 13
    "`.`"                shift, and go to state 15
    "`!`"                shift, and go to state 16
    "true"               shift, and go to state 22
    "false"              shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 35
    expression           go to state 77


State 50

   12 let-decl: let-decl-start-with-opt-type "`;`" .

    $default  reduce using rule 12 (let-decl)


State 51

   27 qname: qname "`::`" . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 78


State 52

    9 generic-decl: fn-decl "`{`" . infunction_declaration_any "`}`"

    $default  reduce using rule 18 (infunction_declaration_any)

    infunction_declaration_any  go to state 79


State 53

   11 generic-decl: compound-expression "`;`" .

    $default  reduce using rule 11 (generic-decl)


State 54

   96 expression: expression "`==`" . expression

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`[`"                shift, and go to state 13
    "`.`"                shift, and go to state 15
    "`!`"                shift, and go to state 16
    "true"               shift, and go to state 22
    "false"              shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 35
    expression           go to state 80


State 55

   97 expression: expression "`!=`" . expression

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`[`"                shift, and go to state 13
    "`.`"                shift, and go to state 15
    "`!`"                shift, and go to state 16
    "true"               shift, and go to state 22
    "false"              shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 35
    expression           go to state 81


State 56

   92 expression: expression "`&&`" . expression

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`[`"                shift, and go to state 13
    "`.`"                shift, and go to state 15
    "`!`"                shift, and go to state 16
    "true"               shift, and go to state 22
    "false"              shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 35
    expression           go to state 82


State 57

   93 expression: expression "`||`" . expression

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`[`"                shift, and go to state 13
    "`.`"                shift, and go to state 15
    "`!`"                shift, and go to state 16
    "true"               shift, and go to state 22
    "false"              shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 35
    expression           go to state 83


State 58

   95 expression: expression "`..`" . expression

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`[`"                shift, and go to state 13
    "`.`"                shift, and go to state 15
    "`!`"                shift, and go to state 16
    "true"               shift, and go to state 22
    "false"              shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 35
    expression           go to state 84


State 59

   76 compound-expression: expression "`(`" . opt-named-expr-list-any "`)`"

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`[`"                shift, and go to state 13
    "`.`"                shift, and go to state 15
    "`!`"                shift, and go to state 16
    "true"               shift, and go to state 22
    "false"              shift, and go to state 23

    $default  reduce using rule 102 (opt-named-expr-list-any)

    identifier               go to state 28
    qname                    go to state 85
    compound-expression      go to state 35
    expression               go to state 86
    opt-named-expr-list-any  go to state 87
    opt-named-expr-list      go to state 88
    opt-named-expr           go to state 89


State 60

   77 compound-expression: expression "`{`" . opt-named-expr-list-any "`}`"

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`[`"                shift, and go to state 13
    "`.`"                shift, and go to state 15
    "`!`"                shift, and go to state 16
    "true"               shift, and go to state 22
    "false"              shift, and go to state 23

    $default  reduce using rule 102 (opt-named-expr-list-any)

    identifier               go to state 28
    qname                    go to state 85
    compound-expression      go to state 35
    expression               go to state 86
    opt-named-expr-list-any  go to state 90
    opt-named-expr-list      go to state 88
    opt-named-expr           go to state 89


State 61

   91 expression: expression "`.`" . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 91


State 62

   94 expression: expression "`+`" . expression

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`[`"                shift, and go to state 13
    "`.`"                shift, and go to state 15
    "`!`"                shift, and go to state 16
    "true"               shift, and go to state 22
    "false"              shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 35
    expression           go to state 92


State 63

   90 expression: expression "`?`" .

    $default  reduce using rule 90 (expression)


State 64

   87 expression: "`(`" expression "`)`" .

    $default  reduce using rule 87 (expression)


State 65

   88 expression: "`[`" expression-list-any "`]`" .

    $default  reduce using rule 88 (expression)


State 66

  101 expression-list-any: expression-list-any "," . expression

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`[`"                shift, and go to state 13
    "`.`"                shift, and go to state 15
    "`!`"                shift, and go to state 16
    "true"               shift, and go to state 22
    "false"              shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 35
    expression           go to state 93


State 67

   15 let-decl-start: LET "weak modifier" identifier .

    $default  reduce using rule 15 (let-decl-start)


State 68

    5 generic-decl: EXTERN VAR identifier . "`:`" type-expr "`;`"

    "`:`"  shift, and go to state 94


State 69

    6 generic-decl: EXTERN fn-decl "`;`" .

    $default  reduce using rule 6 (generic-decl)


State 70

   28 fn-decl: "`fn`" qname "`(`" . parameter-list-opt "`)`"
   29        | "`fn`" qname "`(`" . parameter-list-opt "`)`" "`->`" syntax-expression

    IDENTIFIER           shift, and go to state 95
    INTERNAL_IDENTIFIER  shift, and go to state 96
    RESERVED_IDENTIFIER  shift, and go to state 97
    "`@`"                shift, and go to state 98
    "`::`"               shift, and go to state 11
    TYPENAME             shift, and go to state 99
    "const modifier"     shift, and go to state 100

    $default  reduce using rule 63 (parameter-list-opt)

    identifier                     go to state 28
    qname                          go to state 101
    parameter-name-decl            go to state 102
    parameter-constraint-modifier  go to state 103
    parameter-constraint-set       go to state 104
    concept-expression             go to state 105
    syntax-expression-wo-ii        go to state 106
    syntax-expression              go to state 107
    parameter-decl                 go to state 108
    parameter-list-opt             go to state 109
    parameter-list                 go to state 110


State 71

   30 enum-decl: ENUM qname "`{`" . case-list-opt "`}`"

    IDENTIFIER  shift, and go to state 6

    $default  reduce using rule 31 (case-list-opt)

    identifier     go to state 111
    case-list-opt  go to state 112
    case-list      go to state 113
    case-decl      go to state 114


State 72

   69 type-expr: INTERNAL_IDENTIFIER .
   70          | INTERNAL_IDENTIFIER . "`(`" opt-named-expr-list-any "`)`"

    "`(`"  shift, and go to state 115

    $default  reduce using rule 69 (type-expr)


State 73

   72 type-expr: "`(`" . field-list-opt "`)`"

    IDENTIFIER           shift, and go to state 116
    INTERNAL_IDENTIFIER  shift, and go to state 72
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 73
    "`[`"                shift, and go to state 74

    $default  reduce using rule 36 (field-list-opt)

    identifier      go to state 28
    qname           go to state 75
    field-list-opt  go to state 117
    field-list      go to state 118
    field-decl      go to state 119
    type-expr       go to state 120


State 74

   71 type-expr: "`[`" . type-expr "`]`"

    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 72
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 73
    "`[`"                shift, and go to state 74

    identifier  go to state 28
    qname       go to state 75
    type-expr   go to state 121


State 75

   27 qname: qname . "`::`" identifier
   67 type-expr: qname .
   68          | qname . "`(`" opt-named-expr-list-any "`)`"

    "`::`"  shift, and go to state 51
    "`(`"   shift, and go to state 122

    $default  reduce using rule 67 (type-expr)


State 76

   17 let-decl-start-with-opt-type: let-decl-start "`:`" type-expr .
   73 type-expr: type-expr . "`[`" INTEGER "`]`"
   74          | type-expr . "`|`" type-expr
   75          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 123
    "`[`"   shift, and go to state 124
    "`|`"   shift, and go to state 125

    $default  reduce using rule 17 (let-decl-start-with-opt-type)


State 77

   13 let-decl: let-decl-start-with-opt-type "`=`" expression . "`;`"
   76 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   77                    | expression . "`{`" opt-named-expr-list-any "`}`"
   90 expression: expression . "`?`"
   91           | expression . "`.`" identifier
   92           | expression . "`&&`" expression
   93           | expression . "`||`" expression
   94           | expression . "`+`" expression
   95           | expression . "`..`" expression
   96           | expression . "`==`" expression
   97           | expression . "`!=`" expression

    "`==`"  shift, and go to state 54
    "`!=`"  shift, and go to state 55
    "`&&`"  shift, and go to state 56
    "`||`"  shift, and go to state 57
    "`..`"  shift, and go to state 58
    "`(`"   shift, and go to state 59
    "`{`"   shift, and go to state 60
    "`;`"   shift, and go to state 126
    "`.`"   shift, and go to state 61
    "`+`"   shift, and go to state 62
    "`?`"   shift, and go to state 63


State 78

   27 qname: qname "`::`" identifier .

    $default  reduce using rule 27 (qname)


State 79

    9 generic-decl: fn-decl "`{`" infunction_declaration_any . "`}`"
   19 infunction_declaration_any: infunction_declaration_any . "`;`"
   20                           | infunction_declaration_any . opt-infunction-decl

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`}`"                shift, and go to state 127
    "`[`"                shift, and go to state 13
    "`;`"                shift, and go to state 128
    "`.`"                shift, and go to state 15
    "`!`"                shift, and go to state 16
    LET                  shift, and go to state 17
    RETURN               shift, and go to state 129
    "true"               shift, and go to state 22
    "false"              shift, and go to state 23

    let-decl                      go to state 130
    let-decl-start                go to state 26
    let-decl-start-with-opt-type  go to state 27
    opt-infunction-decl           go to state 131
    identifier                    go to state 28
    qname                         go to state 29
    compound-expression           go to state 132
    expression                    go to state 33


State 80

   76 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   77                    | expression . "`{`" opt-named-expr-list-any "`}`"
   90 expression: expression . "`?`"
   91           | expression . "`.`" identifier
   92           | expression . "`&&`" expression
   93           | expression . "`||`" expression
   94           | expression . "`+`" expression
   95           | expression . "`..`" expression
   96           | expression . "`==`" expression
   96           | expression "`==`" expression .
   97           | expression . "`!=`" expression

    "`..`"  shift, and go to state 58
    "`(`"   shift, and go to state 59
    "`{`"   shift, and go to state 60
    "`.`"   shift, and go to state 61
    "`+`"   shift, and go to state 62
    "`?`"   shift, and go to state 63

    $default  reduce using rule 96 (expression)


State 81

   76 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   77                    | expression . "`{`" opt-named-expr-list-any "`}`"
   90 expression: expression . "`?`"
   91           | expression . "`.`" identifier
   92           | expression . "`&&`" expression
   93           | expression . "`||`" expression
   94           | expression . "`+`" expression
   95           | expression . "`..`" expression
   96           | expression . "`==`" expression
   97           | expression . "`!=`" expression
   97           | expression "`!=`" expression .

    "`..`"  shift, and go to state 58
    "`(`"   shift, and go to state 59
    "`{`"   shift, and go to state 60
    "`.`"   shift, and go to state 61
    "`+`"   shift, and go to state 62
    "`?`"   shift, and go to state 63

    $default  reduce using rule 97 (expression)


State 82

   76 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   77                    | expression . "`{`" opt-named-expr-list-any "`}`"
   90 expression: expression . "`?`"
   91           | expression . "`.`" identifier
   92           | expression . "`&&`" expression
   92           | expression "`&&`" expression .
   93           | expression . "`||`" expression
   94           | expression . "`+`" expression
   95           | expression . "`..`" expression
   96           | expression . "`==`" expression
   97           | expression . "`!=`" expression

    "`==`"  shift, and go to state 54
    "`!=`"  shift, and go to state 55
    "`..`"  shift, and go to state 58
    "`(`"   shift, and go to state 59
    "`{`"   shift, and go to state 60
    "`.`"   shift, and go to state 61
    "`+`"   shift, and go to state 62
    "`?`"   shift, and go to state 63

    $default  reduce using rule 92 (expression)


State 83

   76 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   77                    | expression . "`{`" opt-named-expr-list-any "`}`"
   90 expression: expression . "`?`"
   91           | expression . "`.`" identifier
   92           | expression . "`&&`" expression
   93           | expression . "`||`" expression
   93           | expression "`||`" expression .
   94           | expression . "`+`" expression
   95           | expression . "`..`" expression
   96           | expression . "`==`" expression
   97           | expression . "`!=`" expression

    "`==`"  shift, and go to state 54
    "`!=`"  shift, and go to state 55
    "`&&`"  shift, and go to state 56
    "`..`"  shift, and go to state 58
    "`(`"   shift, and go to state 59
    "`{`"   shift, and go to state 60
    "`.`"   shift, and go to state 61
    "`+`"   shift, and go to state 62
    "`?`"   shift, and go to state 63

    $default  reduce using rule 93 (expression)


State 84

   76 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   77                    | expression . "`{`" opt-named-expr-list-any "`}`"
   90 expression: expression . "`?`"
   91           | expression . "`.`" identifier
   92           | expression . "`&&`" expression
   93           | expression . "`||`" expression
   94           | expression . "`+`" expression
   95           | expression . "`..`" expression
   95           | expression "`..`" expression .
   96           | expression . "`==`" expression
   97           | expression . "`!=`" expression

    "`(`"  shift, and go to state 59
    "`{`"  shift, and go to state 60
    "`.`"  shift, and go to state 61
    "`+`"  shift, and go to state 62
    "`?`"  shift, and go to state 63

    $default  reduce using rule 95 (expression)


State 85

   27 qname: qname . "`::`" identifier
   84 expression: qname .
  106 opt-named-expr: qname . "`:`" expression

    "`:`"   shift, and go to state 133
    "`::`"  shift, and go to state 51

    $default  reduce using rule 84 (expression)


State 86

   76 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   77                    | expression . "`{`" opt-named-expr-list-any "`}`"
   90 expression: expression . "`?`"
   91           | expression . "`.`" identifier
   92           | expression . "`&&`" expression
   93           | expression . "`||`" expression
   94           | expression . "`+`" expression
   95           | expression . "`..`" expression
   96           | expression . "`==`" expression
   97           | expression . "`!=`" expression
  107 opt-named-expr: expression .

    "`==`"  shift, and go to state 54
    "`!=`"  shift, and go to state 55
    "`&&`"  shift, and go to state 56
    "`||`"  shift, and go to state 57
    "`..`"  shift, and go to state 58
    "`(`"   shift, and go to state 59
    "`{`"   shift, and go to state 60
    "`.`"   shift, and go to state 61
    "`+`"   shift, and go to state 62
    "`?`"   shift, and go to state 63

    $default  reduce using rule 107 (opt-named-expr)


State 87

   76 compound-expression: expression "`(`" opt-named-expr-list-any . "`)`"

    "`)`"  shift, and go to state 134


State 88

  103 opt-named-expr-list-any: opt-named-expr-list .
  105 opt-named-expr-list: opt-named-expr-list . "," opt-named-expr

    ","  shift, and go to state 135

    $default  reduce using rule 103 (opt-named-expr-list-any)


State 89

  104 opt-named-expr-list: opt-named-expr .

    $default  reduce using rule 104 (opt-named-expr-list)


State 90

   77 compound-expression: expression "`{`" opt-named-expr-list-any . "`}`"

    "`}`"  shift, and go to state 136


State 91

   91 expression: expression "`.`" identifier .

    $default  reduce using rule 91 (expression)


State 92

   76 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   77                    | expression . "`{`" opt-named-expr-list-any "`}`"
   90 expression: expression . "`?`"
   91           | expression . "`.`" identifier
   92           | expression . "`&&`" expression
   93           | expression . "`||`" expression
   94           | expression . "`+`" expression
   94           | expression "`+`" expression .
   95           | expression . "`..`" expression
   96           | expression . "`==`" expression
   97           | expression . "`!=`" expression

    "`(`"  shift, and go to state 59
    "`{`"  shift, and go to state 60
    "`.`"  shift, and go to state 61
    "`?`"  shift, and go to state 63

    $default  reduce using rule 94 (expression)


State 93

   76 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   77                    | expression . "`{`" opt-named-expr-list-any "`}`"
   90 expression: expression . "`?`"
   91           | expression . "`.`" identifier
   92           | expression . "`&&`" expression
   93           | expression . "`||`" expression
   94           | expression . "`+`" expression
   95           | expression . "`..`" expression
   96           | expression . "`==`" expression
   97           | expression . "`!=`" expression
  101 expression-list-any: expression-list-any "," expression .

    "`==`"  shift, and go to state 54
    "`!=`"  shift, and go to state 55
    "`&&`"  shift, and go to state 56
    "`||`"  shift, and go to state 57
    "`..`"  shift, and go to state 58
    "`(`"   shift, and go to state 59
    "`{`"   shift, and go to state 60
    "`.`"   shift, and go to state 61
    "`+`"   shift, and go to state 62
    "`?`"   shift, and go to state 63

    $default  reduce using rule 101 (expression-list-any)


State 94

    5 generic-decl: EXTERN VAR identifier "`:`" . type-expr "`;`"

    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 72
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 73
    "`[`"                shift, and go to state 74

    identifier  go to state 28
    qname       go to state 75
    type-expr   go to state 137


State 95

   24 identifier: IDENTIFIER .
   42 parameter-name-decl: IDENTIFIER . INTERNAL_IDENTIFIER "`:`"
   43                    | IDENTIFIER . "`:`"

    INTERNAL_IDENTIFIER  shift, and go to state 138
    "`:`"                shift, and go to state 139

    $default  reduce using rule 24 (identifier)


State 96

   44 parameter-name-decl: INTERNAL_IDENTIFIER . "`:`"
   50 parameter-constraint-set: INTERNAL_IDENTIFIER .
   58 syntax-expression: INTERNAL_IDENTIFIER .

    "`:`"  shift, and go to state 140

    "`...`"   reduce using rule 58 (syntax-expression)
    $default  reduce using rule 50 (parameter-constraint-set)


State 97

   55 syntax-expression-wo-ii: RESERVED_IDENTIFIER .

    $default  reduce using rule 55 (syntax-expression-wo-ii)


State 98

   54 concept-expression: "`@`" . qname

    IDENTIFIER  shift, and go to state 6
    "`::`"      shift, and go to state 11

    identifier  go to state 28
    qname       go to state 141


State 99

   45 parameter-constraint-modifier: TYPENAME .

    $default  reduce using rule 45 (parameter-constraint-modifier)


State 100

   46 parameter-constraint-modifier: "const modifier" .

    $default  reduce using rule 46 (parameter-constraint-modifier)


State 101

   27 qname: qname . "`::`" identifier
   56 syntax-expression-wo-ii: qname .

    "`::`"  shift, and go to state 51

    $default  reduce using rule 56 (syntax-expression-wo-ii)


State 102

   60 parameter-decl: parameter-name-decl . parameter-constraint-modifier-opt parameter-constraint-set

    TYPENAME          shift, and go to state 99
    "const modifier"  shift, and go to state 100

    $default  reduce using rule 48 (parameter-constraint-modifier-opt)

    parameter-constraint-modifier      go to state 142
    parameter-constraint-modifier-opt  go to state 143


State 103

   61 parameter-decl: parameter-constraint-modifier . parameter-constraint-set

    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 144
    RESERVED_IDENTIFIER  shift, and go to state 97
    "`@`"                shift, and go to state 98
    "`::`"               shift, and go to state 11

    identifier                go to state 28
    qname                     go to state 101
    parameter-constraint-set  go to state 145
    concept-expression        go to state 105
    syntax-expression-wo-ii   go to state 106
    syntax-expression         go to state 107


State 104

   52 parameter-constraint-set: parameter-constraint-set . INTERNAL_IDENTIFIER
   53                         | parameter-constraint-set . concept-expression
   62 parameter-decl: parameter-constraint-set .

    INTERNAL_IDENTIFIER  shift, and go to state 146
    "`@`"                shift, and go to state 98

    $default  reduce using rule 62 (parameter-decl)

    concept-expression  go to state 147


State 105

   51 parameter-constraint-set: concept-expression .

    $default  reduce using rule 51 (parameter-constraint-set)


State 106

   49 parameter-constraint-set: syntax-expression-wo-ii .
   59 syntax-expression: syntax-expression-wo-ii .

    "`...`"   reduce using rule 59 (syntax-expression)
    $default  reduce using rule 49 (parameter-constraint-set)


State 107

   57 syntax-expression-wo-ii: syntax-expression . "`...`"

    "`...`"  shift, and go to state 148


State 108

   65 parameter-list: parameter-decl .

    $default  reduce using rule 65 (parameter-list)


State 109

   28 fn-decl: "`fn`" qname "`(`" parameter-list-opt . "`)`"
   29        | "`fn`" qname "`(`" parameter-list-opt . "`)`" "`->`" syntax-expression

    "`)`"  shift, and go to state 149


State 110

   64 parameter-list-opt: parameter-list .
   66 parameter-list: parameter-list . "," parameter-decl

    ","  shift, and go to state 150

    $default  reduce using rule 64 (parameter-list-opt)


State 111

   35 case-decl: identifier .

    $default  reduce using rule 35 (case-decl)


State 112

   30 enum-decl: ENUM qname "`{`" case-list-opt . "`}`"

    "`}`"  shift, and go to state 151


State 113

   32 case-list-opt: case-list .
   34 case-list: case-list . "," case-decl

    ","  shift, and go to state 152

    $default  reduce using rule 32 (case-list-opt)


State 114

   33 case-list: case-decl .

    $default  reduce using rule 33 (case-list)


State 115

   70 type-expr: INTERNAL_IDENTIFIER "`(`" . opt-named-expr-list-any "`)`"

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`[`"                shift, and go to state 13
    "`.`"                shift, and go to state 15
    "`!`"                shift, and go to state 16
    "true"               shift, and go to state 22
    "false"              shift, and go to state 23

    $default  reduce using rule 102 (opt-named-expr-list-any)

    identifier               go to state 28
    qname                    go to state 85
    compound-expression      go to state 35
    expression               go to state 86
    opt-named-expr-list-any  go to state 153
    opt-named-expr-list      go to state 88
    opt-named-expr           go to state 89


State 116

   24 identifier: IDENTIFIER .
   40 field-decl: IDENTIFIER . "`:`" type-expr

    "`:`"  shift, and go to state 154

    $default  reduce using rule 24 (identifier)


State 117

   72 type-expr: "`(`" field-list-opt . "`)`"

    "`)`"  shift, and go to state 155


State 118

   37 field-list-opt: field-list .
   39 field-list: field-list . "," field-decl

    ","  shift, and go to state 156

    $default  reduce using rule 37 (field-list-opt)


State 119

   38 field-list: field-decl .

    $default  reduce using rule 38 (field-list)


State 120

   41 field-decl: type-expr .
   73 type-expr: type-expr . "`[`" INTEGER "`]`"
   74          | type-expr . "`|`" type-expr
   75          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 123
    "`[`"   shift, and go to state 124
    "`|`"   shift, and go to state 125

    $default  reduce using rule 41 (field-decl)


State 121

   71 type-expr: "`[`" type-expr . "`]`"
   73          | type-expr . "`[`" INTEGER "`]`"
   74          | type-expr . "`|`" type-expr
   75          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 123
    "`[`"   shift, and go to state 124
    "`]`"   shift, and go to state 157
    "`|`"   shift, and go to state 125


State 122

   68 type-expr: qname "`(`" . opt-named-expr-list-any "`)`"

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`[`"                shift, and go to state 13
    "`.`"                shift, and go to state 15
    "`!`"                shift, and go to state 16
    "true"               shift, and go to state 22
    "false"              shift, and go to state 23

    $default  reduce using rule 102 (opt-named-expr-list-any)

    identifier               go to state 28
    qname                    go to state 85
    compound-expression      go to state 35
    expression               go to state 86
    opt-named-expr-list-any  go to state 158
    opt-named-expr-list      go to state 88
    opt-named-expr           go to state 89


State 123

   75 type-expr: type-expr "`->`" . type-expr

    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 72
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 73
    "`[`"                shift, and go to state 74

    identifier  go to state 28
    qname       go to state 75
    type-expr   go to state 159


State 124

   73 type-expr: type-expr "`[`" . INTEGER "`]`"

    INTEGER  shift, and go to state 160


State 125

   74 type-expr: type-expr "`|`" . type-expr

    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 72
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 73
    "`[`"                shift, and go to state 74

    identifier  go to state 28
    qname       go to state 75
    type-expr   go to state 161


State 126

   13 let-decl: let-decl-start-with-opt-type "`=`" expression "`;`" .

    $default  reduce using rule 13 (let-decl)


State 127

    9 generic-decl: fn-decl "`{`" infunction_declaration_any "`}`" .

    $default  reduce using rule 9 (generic-decl)


State 128

   19 infunction_declaration_any: infunction_declaration_any "`;`" .

    $default  reduce using rule 19 (infunction_declaration_any)


State 129

   22 opt-infunction-decl: RETURN . expression "`;`"

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`[`"                shift, and go to state 13
    "`.`"                shift, and go to state 15
    "`!`"                shift, and go to state 16
    "true"               shift, and go to state 22
    "false"              shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 35
    expression           go to state 162


State 130

   21 opt-infunction-decl: let-decl .

    $default  reduce using rule 21 (opt-infunction-decl)


State 131

   20 infunction_declaration_any: infunction_declaration_any opt-infunction-decl .

    $default  reduce using rule 20 (infunction_declaration_any)


State 132

   23 opt-infunction-decl: compound-expression . "`;`"
   98 expression: compound-expression .

    "`;`"  shift, and go to state 163

    $default  reduce using rule 98 (expression)


State 133

  106 opt-named-expr: qname "`:`" . expression

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`[`"                shift, and go to state 13
    "`.`"                shift, and go to state 15
    "`!`"                shift, and go to state 16
    "true"               shift, and go to state 22
    "false"              shift, and go to state 23

    identifier           go to state 28
    qname                go to state 29
    compound-expression  go to state 35
    expression           go to state 164


State 134

   76 compound-expression: expression "`(`" opt-named-expr-list-any "`)`" .

    $default  reduce using rule 76 (compound-expression)


State 135

  105 opt-named-expr-list: opt-named-expr-list "," . opt-named-expr

    STRING               shift, and go to state 5
    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 7
    RESERVED_IDENTIFIER  shift, and go to state 8
    INTEGER              shift, and go to state 9
    DECIMAL              shift, and go to state 10
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 12
    "`[`"                shift, and go to state 13
    "`.`"                shift, and go to state 15
    "`!`"                shift, and go to state 16
    "true"               shift, and go to state 22
    "false"              shift, and go to state 23

    identifier           go to state 28
    qname                go to state 85
    compound-expression  go to state 35
    expression           go to state 86
    opt-named-expr       go to state 165


State 136

   77 compound-expression: expression "`{`" opt-named-expr-list-any "`}`" .

    $default  reduce using rule 77 (compound-expression)


State 137

    5 generic-decl: EXTERN VAR identifier "`:`" type-expr . "`;`"
   73 type-expr: type-expr . "`[`" INTEGER "`]`"
   74          | type-expr . "`|`" type-expr
   75          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 123
    "`[`"   shift, and go to state 124
    "`;`"   shift, and go to state 166
    "`|`"   shift, and go to state 125


State 138

   42 parameter-name-decl: IDENTIFIER INTERNAL_IDENTIFIER . "`:`"

    "`:`"  shift, and go to state 167


State 139

   43 parameter-name-decl: IDENTIFIER "`:`" .

    $default  reduce using rule 43 (parameter-name-decl)


State 140

   44 parameter-name-decl: INTERNAL_IDENTIFIER "`:`" .

    $default  reduce using rule 44 (parameter-name-decl)


State 141

   27 qname: qname . "`::`" identifier
   54 concept-expression: "`@`" qname .

    "`::`"  shift, and go to state 51

    $default  reduce using rule 54 (concept-expression)


State 142

   47 parameter-constraint-modifier-opt: parameter-constraint-modifier .

    $default  reduce using rule 47 (parameter-constraint-modifier-opt)


State 143

   60 parameter-decl: parameter-name-decl parameter-constraint-modifier-opt . parameter-constraint-set

    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 144
    RESERVED_IDENTIFIER  shift, and go to state 97
    "`@`"                shift, and go to state 98
    "`::`"               shift, and go to state 11

    identifier                go to state 28
    qname                     go to state 101
    parameter-constraint-set  go to state 168
    concept-expression        go to state 105
    syntax-expression-wo-ii   go to state 106
    syntax-expression         go to state 107


State 144

   50 parameter-constraint-set: INTERNAL_IDENTIFIER .
   58 syntax-expression: INTERNAL_IDENTIFIER .

    "`...`"   reduce using rule 58 (syntax-expression)
    $default  reduce using rule 50 (parameter-constraint-set)


State 145

   52 parameter-constraint-set: parameter-constraint-set . INTERNAL_IDENTIFIER
   53                         | parameter-constraint-set . concept-expression
   61 parameter-decl: parameter-constraint-modifier parameter-constraint-set .

    INTERNAL_IDENTIFIER  shift, and go to state 146
    "`@`"                shift, and go to state 98

    $default  reduce using rule 61 (parameter-decl)

    concept-expression  go to state 147


State 146

   52 parameter-constraint-set: parameter-constraint-set INTERNAL_IDENTIFIER .

    $default  reduce using rule 52 (parameter-constraint-set)


State 147

   53 parameter-constraint-set: parameter-constraint-set concept-expression .

    $default  reduce using rule 53 (parameter-constraint-set)


State 148

   57 syntax-expression-wo-ii: syntax-expression "`...`" .

    $default  reduce using rule 57 (syntax-expression-wo-ii)


State 149

   28 fn-decl: "`fn`" qname "`(`" parameter-list-opt "`)`" .
   29        | "`fn`" qname "`(`" parameter-list-opt "`)`" . "`->`" syntax-expression

    "`->`"  shift, and go to state 169

    $default  reduce using rule 28 (fn-decl)


State 150

   66 parameter-list: parameter-list "," . parameter-decl

    IDENTIFIER           shift, and go to state 95
    INTERNAL_IDENTIFIER  shift, and go to state 96
    RESERVED_IDENTIFIER  shift, and go to state 97
    "`@`"                shift, and go to state 98
    "`::`"               shift, and go to state 11
    TYPENAME             shift, and go to state 99
    "const modifier"     shift, and go to state 100

    identifier                     go to state 28
    qname                          go to state 101
    parameter-name-decl            go to state 102
    parameter-constraint-modifier  go to state 103
    parameter-constraint-set       go to state 104
    concept-expression             go to state 105
    syntax-expression-wo-ii        go to state 106
    syntax-expression              go to state 107
    parameter-decl                 go to state 170


State 151

   30 enum-decl: ENUM qname "`{`" case-list-opt "`}`" .

    $default  reduce using rule 30 (enum-decl)


State 152

   34 case-list: case-list "," . case-decl

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 111
    case-decl   go to state 171


State 153

   70 type-expr: INTERNAL_IDENTIFIER "`(`" opt-named-expr-list-any . "`)`"

    "`)`"  shift, and go to state 172


State 154

   40 field-decl: IDENTIFIER "`:`" . type-expr

    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 72
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 73
    "`[`"                shift, and go to state 74

    identifier  go to state 28
    qname       go to state 75
    type-expr   go to state 173


State 155

   72 type-expr: "`(`" field-list-opt "`)`" .

    $default  reduce using rule 72 (type-expr)


State 156

   39 field-list: field-list "," . field-decl

    IDENTIFIER           shift, and go to state 116
    INTERNAL_IDENTIFIER  shift, and go to state 72
    "`::`"               shift, and go to state 11
    "`(`"                shift, and go to state 73
    "`[`"                shift, and go to state 74

    identifier  go to state 28
    qname       go to state 75
    field-decl  go to state 174
    type-expr   go to state 120


State 157

   71 type-expr: "`[`" type-expr "`]`" .

    $default  reduce using rule 71 (type-expr)


State 158

   68 type-expr: qname "`(`" opt-named-expr-list-any . "`)`"

    "`)`"  shift, and go to state 175


State 159

   73 type-expr: type-expr . "`[`" INTEGER "`]`"
   74          | type-expr . "`|`" type-expr
   75          | type-expr . "`->`" type-expr
   75          | type-expr "`->`" type-expr .

    $default  reduce using rule 75 (type-expr)


State 160

   73 type-expr: type-expr "`[`" INTEGER . "`]`"

    "`]`"  shift, and go to state 176


State 161

   73 type-expr: type-expr . "`[`" INTEGER "`]`"
   74          | type-expr . "`|`" type-expr
   74          | type-expr "`|`" type-expr .
   75          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 123
    "`[`"   shift, and go to state 124

    $default  reduce using rule 74 (type-expr)


State 162

   22 opt-infunction-decl: RETURN expression . "`;`"
   76 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   77                    | expression . "`{`" opt-named-expr-list-any "`}`"
   90 expression: expression . "`?`"
   91           | expression . "`.`" identifier
   92           | expression . "`&&`" expression
   93           | expression . "`||`" expression
   94           | expression . "`+`" expression
   95           | expression . "`..`" expression
   96           | expression . "`==`" expression
   97           | expression . "`!=`" expression

    "`==`"  shift, and go to state 54
    "`!=`"  shift, and go to state 55
    "`&&`"  shift, and go to state 56
    "`||`"  shift, and go to state 57
    "`..`"  shift, and go to state 58
    "`(`"   shift, and go to state 59
    "`{`"   shift, and go to state 60
    "`;`"   shift, and go to state 177
    "`.`"   shift, and go to state 61
    "`+`"   shift, and go to state 62
    "`?`"   shift, and go to state 63


State 163

   23 opt-infunction-decl: compound-expression "`;`" .

    $default  reduce using rule 23 (opt-infunction-decl)


State 164

   76 compound-expression: expression . "`(`" opt-named-expr-list-any "`)`"
   77                    | expression . "`{`" opt-named-expr-list-any "`}`"
   90 expression: expression . "`?`"
   91           | expression . "`.`" identifier
   92           | expression . "`&&`" expression
   93           | expression . "`||`" expression
   94           | expression . "`+`" expression
   95           | expression . "`..`" expression
   96           | expression . "`==`" expression
   97           | expression . "`!=`" expression
  106 opt-named-expr: qname "`:`" expression .

    "`==`"  shift, and go to state 54
    "`!=`"  shift, and go to state 55
    "`&&`"  shift, and go to state 56
    "`||`"  shift, and go to state 57
    "`..`"  shift, and go to state 58
    "`(`"   shift, and go to state 59
    "`{`"   shift, and go to state 60
    "`.`"   shift, and go to state 61
    "`+`"   shift, and go to state 62
    "`?`"   shift, and go to state 63

    $default  reduce using rule 106 (opt-named-expr)


State 165

  105 opt-named-expr-list: opt-named-expr-list "," opt-named-expr .

    $default  reduce using rule 105 (opt-named-expr-list)


State 166

    5 generic-decl: EXTERN VAR identifier "`:`" type-expr "`;`" .

    $default  reduce using rule 5 (generic-decl)


State 167

   42 parameter-name-decl: IDENTIFIER INTERNAL_IDENTIFIER "`:`" .

    $default  reduce using rule 42 (parameter-name-decl)


State 168

   52 parameter-constraint-set: parameter-constraint-set . INTERNAL_IDENTIFIER
   53                         | parameter-constraint-set . concept-expression
   60 parameter-decl: parameter-name-decl parameter-constraint-modifier-opt parameter-constraint-set .

    INTERNAL_IDENTIFIER  shift, and go to state 146
    "`@`"                shift, and go to state 98

    $default  reduce using rule 60 (parameter-decl)

    concept-expression  go to state 147


State 169

   29 fn-decl: "`fn`" qname "`(`" parameter-list-opt "`)`" "`->`" . syntax-expression

    IDENTIFIER           shift, and go to state 6
    INTERNAL_IDENTIFIER  shift, and go to state 178
    RESERVED_IDENTIFIER  shift, and go to state 97
    "`::`"               shift, and go to state 11

    identifier               go to state 28
    qname                    go to state 101
    syntax-expression-wo-ii  go to state 179
    syntax-expression        go to state 180


State 170

   66 parameter-list: parameter-list "," parameter-decl .

    $default  reduce using rule 66 (parameter-list)


State 171

   34 case-list: case-list "," case-decl .

    $default  reduce using rule 34 (case-list)


State 172

   70 type-expr: INTERNAL_IDENTIFIER "`(`" opt-named-expr-list-any "`)`" .

    $default  reduce using rule 70 (type-expr)


State 173

   40 field-decl: IDENTIFIER "`:`" type-expr .
   73 type-expr: type-expr . "`[`" INTEGER "`]`"
   74          | type-expr . "`|`" type-expr
   75          | type-expr . "`->`" type-expr

    "`->`"  shift, and go to state 123
    "`[`"   shift, and go to state 124
    "`|`"   shift, and go to state 125

    $default  reduce using rule 40 (field-decl)


State 174

   39 field-list: field-list "," field-decl .

    $default  reduce using rule 39 (field-list)


State 175

   68 type-expr: qname "`(`" opt-named-expr-list-any "`)`" .

    $default  reduce using rule 68 (type-expr)


State 176

   73 type-expr: type-expr "`[`" INTEGER "`]`" .

    $default  reduce using rule 73 (type-expr)


State 177

   22 opt-infunction-decl: RETURN expression "`;`" .

    $default  reduce using rule 22 (opt-infunction-decl)


State 178

   58 syntax-expression: INTERNAL_IDENTIFIER .

    $default  reduce using rule 58 (syntax-expression)


State 179

   59 syntax-expression: syntax-expression-wo-ii .

    $default  reduce using rule 59 (syntax-expression)


State 180

   29 fn-decl: "`fn`" qname "`(`" parameter-list-opt "`)`" "`->`" syntax-expression .
   57 syntax-expression-wo-ii: syntax-expression . "`...`"

    "`...`"  shift, and go to state 148

    $default  reduce using rule 29 (fn-decl)
